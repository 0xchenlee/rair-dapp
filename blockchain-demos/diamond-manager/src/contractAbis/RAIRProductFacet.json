{
  "address": "0xf4C420d11F206dB683e7742059ba3A8b1f5FC778",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startingToken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "ProductCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CREATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_productName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_copies",
          "type": "uint256"
        }
      ],
      "name": "createProduct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "productID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startingIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endingIndex",
          "type": "uint256"
        }
      ],
      "name": "getNextSequentialIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nextIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProductCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startingToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endingToken",
          "type": "uint256"
        }
      ],
      "name": "hasTokenInProduct",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        }
      ],
      "name": "mintedTokensInProduct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "find",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        }
      ],
      "name": "ownsTokenInProduct",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "find",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        }
      ],
      "name": "ownsTokenInRange",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "productIndex_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenIndex_",
          "type": "uint256"
        }
      ],
      "name": "productToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "productIndex_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenIndex_",
          "type": "uint256"
        }
      ],
      "name": "tokenByProduct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenIndex_",
          "type": "uint256"
        }
      ],
      "name": "tokenToProduct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenIndex_",
          "type": "uint256"
        }
      ],
      "name": "tokenToProductIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa7d3316c88f9fedd87b78545627d13f618c6f46002d97bf6817b299489e55a8e",
  "receipt": {
    "to": null,
    "from": "0xEC30759D0A3F3CE0A730920DC29d74e441f492C3",
    "contractAddress": "0xf4C420d11F206dB683e7742059ba3A8b1f5FC778",
    "transactionIndex": 4,
    "gasUsed": "1392488",
    "logsBloom": "0x
    "blockHash": "0x9ca130ec68883c9143dfebd05d00d52c73caf0fece3ce93814afafbce6ca2289",
    "transactionHash": "0xa7d3316c88f9fedd87b78545627d13f618c6f46002d97bf6817b299489e55a8e",
    "logs": [],
    "blockNumber": 6200895,
    "cumulativeGasUsed": "2128185",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8e65d135f0f1a9a15bd5e211a01c65ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ProductCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CREATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_productName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_copies\",\"type\":\"uint256\"}],\"name\":\"createProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"productID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingIndex\",\"type\":\"uint256\"}],\"name\":\"getNextSequentialIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nextIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProductCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingToken\",\"type\":\"uint256\"}],\"name\":\"hasTokenInProduct\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"}],\"name\":\"mintedTokensInProduct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"find\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"}],\"name\":\"ownsTokenInProduct\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"find\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"}],\"name\":\"ownsTokenInRange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"productIndex_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex_\",\"type\":\"uint256\"}],\"name\":\"productToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"productIndex_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex_\",\"type\":\"uint256\"}],\"name\":\"tokenByProduct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIndex_\",\"type\":\"uint256\"}],\"name\":\"tokenToProduct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIndex_\",\"type\":\"uint256\"}],\"name\":\"tokenToProductIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createProduct(string,uint256)\":{\"details\":\"Only a CREATOR can call this function\",\"params\":{\"_copies\":\"Amount of tokens inside the product\",\"_productName\":\"Name of the product\"}},\"getNextSequentialIndex(uint256,uint256,uint256)\":{\"details\":\"Uses a loop, do not call this from a non-view function!\",\"params\":{\"endingIndex\":\"Index of the product to search\",\"productID\":\"Index of the product to search\",\"startingIndex\":\"Index of the product to search\"}},\"getProductCount()\":{\"details\":\"Use with get product to list all of the products\"},\"hasTokenInProduct(address,uint256,uint256,uint256)\":{\"details\":\"Loops are expensive in solidity, so don't use this in a function that requires gas\",\"params\":{\"endingToken\":\"Product to search\",\"productIndex\":\"Product to search\",\"startingToken\":\"Product to search\",\"userAddress\":\"User to search\"}},\"mintedTokensInProduct(uint256)\":{\"params\":{\"productIndex\":\"Product index\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createProduct(string,uint256)\":{\"notice\":\"Creates a product\"},\"getNextSequentialIndex(uint256,uint256,uint256)\":{\"notice\":\"Loops through a range of tokens inside a product and returns the first token without an owner\"},\"getProductCount()\":{\"notice\":\"Returns the number of products on the contract\"},\"hasTokenInProduct(address,uint256,uint256,uint256)\":{\"notice\":\"Loops over the user's tokens looking for one that belongs to a product and a specific range\"},\"mintedTokensInProduct(uint256)\":{\"notice\":\"Returns the number of tokens inside a product\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/RAIR Token Facets/ProductFacet.sol\":\"RAIRProductFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/common/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.11; \\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct RoleData {\\r\\n\\tmapping(address => bool) members;\\r\\n\\tbytes32 adminRole;\\r\\n}\\r\\n\\r\\nabstract contract AccessControlEnumerable is Context {\\t\\r\\n\\tevent RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\r\\n\\tevent RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    modifier onlyRole(bytes32 role) {\\r\\n        _checkRole(role, _msgSender());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceRole(bytes32 role, address account) public {\\r\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    function grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    function revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    function _checkRole(bytes32 role, address account) internal view {\\r\\n        if (!hasRole(role, account)) {\\r\\n            revert(\\r\\n                string(\\r\\n                    abi.encodePacked(\\r\\n                        \\\"AccessControl: account \\\",\\r\\n                        Strings.toHexString(uint160(account), 20),\\r\\n                        \\\" is missing role \\\",\\r\\n                        Strings.toHexString(uint256(role), 32)\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\tfunction hasRole(bytes32 role, address account) public view virtual returns (bool);\\r\\n\\r\\n\\tfunction getRoleAdmin(bytes32 role) public view virtual returns (bytes32);\\r\\n\\r\\n\\tfunction getRoleMember(bytes32 role, uint256 index) public view virtual returns (address);\\r\\n\\r\\n\\tfunction getRoleMemberCount(bytes32 role) public view virtual returns (uint256);\\r\\n\\r\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual;\\r\\n\\r\\n\\tfunction _grantRole(bytes32 role, address account) internal virtual;\\r\\n\\r\\n\\tfunction _revokeRole(bytes32 role, address account) internal virtual;\\r\\n}\",\"keccak256\":\"0x2ec88ccf01386775c02afe3c7de92f73a2c8a1e846e2479d03683c067224e034\",\"license\":\"GPL-3.0\"},\"contracts/tokens/RAIR Token Facets/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.11; \\r\\n\\r\\nimport '../../common/AccessControl.sol';\\r\\n\\r\\nstruct range {\\r\\n\\tuint rangeStart;\\r\\n\\tuint rangeEnd;\\r\\n\\tuint tokensAllowed;\\r\\n\\tuint mintableTokens;\\r\\n\\tuint lockedTokens;\\r\\n\\tuint rangePrice;\\r\\n\\tstring rangeName;\\r\\n}\\r\\n\\r\\nstruct product {\\r\\n\\tuint startingToken;\\r\\n\\tuint endingToken;\\r\\n\\tuint mintableTokens;\\r\\n\\tstring name;\\r\\n\\tuint[] rangeList;\\r\\n}\\r\\n\\r\\nstruct AppStorage721 {\\r\\n\\t// ERC721\\r\\n\\tstring _name;\\r\\n\\tstring _symbol;\\r\\n\\tmapping(uint256 => address) _owners;\\r\\n\\tmapping(address => uint256) _balances;\\r\\n\\tmapping(uint256 => address) _tokenApprovals;\\r\\n\\tmapping(address => mapping(address => bool)) _operatorApprovals;\\r\\n\\t// ERC721 Enumerable\\r\\n\\tmapping(address => mapping(uint256 => uint256)) _ownedTokens;\\r\\n\\tmapping(uint256 => uint256) _ownedTokensIndex;\\r\\n\\tuint256[] _allTokens;\\r\\n\\tmapping(uint256 => uint256) _allTokensIndex;\\r\\n\\t// Access Control Enumerable\\r\\n\\tmapping(bytes32 => RoleData) _roles;\\r\\n\\tmapping(bytes32 => EnumerableSet.AddressSet) _roleMembers;\\r\\n\\t// App\\r\\n\\tstring baseURI;\\r\\n\\taddress factoryAddress;\\r\\n\\tuint16 royaltyFee;\\r\\n\\tproduct[] products;\\r\\n\\trange[] ranges;\\r\\n\\tmapping(uint => uint) tokenToProduct;\\r\\n\\tmapping(uint => uint) tokenToRange;\\r\\n\\tmapping(uint => string) uniqueTokenURI;\\r\\n\\tmapping(uint => string) productURI;\\r\\n\\tmapping(uint => bool) appendTokenIndexToProductURI;\\r\\n\\tbool appendTokenIndexToBaseURI;\\r\\n\\tmapping(uint => uint[]) tokensByProduct;\\r\\n\\tstring contractMetadataURI;\\r\\n\\tmapping(uint => uint) rangeToProduct;\\r\\n\\tmapping(uint => bool) _minted;\\r\\n\\t// Always add new variables at the end of the struct\\r\\n}\\r\\n\\r\\nlibrary LibAppStorage721 {\\r\\n\\tfunction diamondStorage() internal pure\\treturns (AppStorage721 storage ds) {\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tds.slot := 0\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\ncontract AccessControlAppStorageEnumerable721 is Context {\\r\\n\\tAppStorage721 internal s;\\r\\n\\r\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n\\tevent RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\r\\n\\tevent RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\tevent RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n\\tmodifier onlyRole(bytes32 role) {\\r\\n\\t\\t_checkRole(role, _msgSender());\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction renounceRole(bytes32 role, address account) public {\\r\\n\\t\\trequire(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\r\\n\\t\\t_revokeRole(role, account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\r\\n\\t\\t_grantRole(role, account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\r\\n\\t\\t_revokeRole(role, account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _checkRole(bytes32 role, address account) internal view {\\r\\n\\t\\tif (!hasRole(role, account)) {\\r\\n\\t\\t\\trevert(\\r\\n\\t\\t\\t\\tstring(\\r\\n\\t\\t\\t\\t\\tabi.encodePacked(\\r\\n\\t\\t\\t\\t\\t\\t\\\"AccessControl: account \\\",\\r\\n\\t\\t\\t\\t\\t\\tStrings.toHexString(uint160(account), 20),\\r\\n\\t\\t\\t\\t\\t\\t\\\" is missing role \\\",\\r\\n\\t\\t\\t\\t\\t\\tStrings.toHexString(uint256(role), 32)\\r\\n\\t\\t\\t\\t\\t)\\r\\n\\t\\t\\t\\t)\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction hasRole(bytes32 role, address account) public view returns (bool) {\\r\\n\\t\\treturn s._roles[role].members[account];\\r\\n\\t}\\r\\n\\r\\n\\tfunction getRoleAdmin(bytes32 role) public view returns (bytes32) {\\r\\n\\t\\treturn s._roles[role].adminRole;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\r\\n\\t\\treturn s._roleMembers[role].at(index);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getRoleMemberCount(bytes32 role) public view returns (uint256) {\\r\\n\\t\\treturn s._roleMembers[role].length();\\r\\n\\t}\\r\\n\\r\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\r\\n\\t\\tbytes32 previousAdminRole = getRoleAdmin(role);\\r\\n\\t\\ts._roles[role].adminRole = adminRole;\\r\\n\\t\\temit RoleAdminChanged(role, previousAdminRole, adminRole);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _grantRole(bytes32 role, address account) internal {\\r\\n\\t\\tif (!hasRole(role, account)) {\\r\\n\\t\\t\\ts._roles[role].members[account] = true;\\r\\n\\t\\t\\temit RoleGranted(role, account, _msgSender());\\r\\n\\t\\t\\ts._roleMembers[role].add(account);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _revokeRole(bytes32 role, address account) internal {\\r\\n\\t\\tif (hasRole(role, account)) {\\r\\n\\t\\t\\ts._roles[role].members[account] = false;\\r\\n\\t\\t\\temit RoleRevoked(role, account, _msgSender());\\r\\n\\t\\t\\ts._roleMembers[role].remove(account);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"keccak256\":\"0xecfc24385ef758d38cb976fc7ea6b054156f5b04df44f8d71f3a15bf9fdc8be0\",\"license\":\"GPL-3.0\"},\"contracts/tokens/RAIR Token Facets/ProductFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport './AppStorage.sol';\\r\\n\\r\\ncontract RAIRProductFacet is AccessControlAppStorageEnumerable721 {\\r\\n\\tbytes32 public constant CREATOR = keccak256(\\\"CREATOR\\\");\\r\\n\\tevent ProductCreated(uint indexed id, string name, uint startingToken, uint length);\\r\\n\\r\\n\\t/// @notice\\tMakes sure the product exists before doing changes to it\\r\\n\\t/// @param\\tproductID\\tProduct to verify\\r\\n\\tmodifier productExists(uint productID) {\\r\\n\\t\\trequire(s.products.length > productID, \\\"RAIR ERC721: Product does not exist\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier rangeExists(uint rangeID) {\\r\\n\\t\\trequire(s.ranges.length > rangeID, \\\"RAIR ERC721: Range does not exist\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier tokenExists(uint tokenIndex) {\\r\\n\\t\\trequire(s._minted[tokenIndex], \\\"RAIR ERC721: Query for nonexistent token\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction ownsTokenInProduct(address find, uint productIndex) public view productExists(productIndex) returns (bool) {\\r\\n\\t\\tproduct storage selectedProduct = s.products[productIndex];\\r\\n\\t\\treturn _ownsTokenInsideRange(find, selectedProduct.startingToken, selectedProduct.endingToken);\\r\\n\\t}\\r\\n\\r\\n\\tfunction ownsTokenInRange(address find, uint rangeIndex) public view rangeExists(rangeIndex) returns (bool) {\\r\\n\\t\\trange storage selectedRange = s.ranges[rangeIndex];\\r\\n\\t\\tuint startOfProduct = s.products[s.rangeToProduct[rangeIndex]].startingToken;\\r\\n\\t\\treturn _ownsTokenInsideRange(find, startOfProduct + selectedRange.rangeStart, startOfProduct + selectedRange.rangeEnd);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _ownsTokenInsideRange(address find, uint from, uint to) internal view returns (bool) {\\r\\n\\t\\tfor (uint i = from; i < to; i++) {\\r\\n\\t\\t\\tif (s._owners[i] == find) {\\r\\n\\t\\t\\t\\treturn true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn false;\\r\\n\\t}\\r\\n\\r\\n\\tfunction tokenByProduct(uint productIndex_, uint tokenIndex_) public view productExists(productIndex_) returns (uint) {\\r\\n\\t\\treturn s.tokensByProduct[productIndex_][tokenIndex_];\\r\\n\\t}\\r\\n\\r\\n\\tfunction productToToken(uint productIndex_, uint tokenIndex_) public view productExists(productIndex_) returns(uint) {\\r\\n\\t\\treturn s.products[productIndex_].startingToken + tokenIndex_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction tokenToProductIndex(uint tokenIndex_) public view tokenExists(tokenIndex_) returns (uint) {\\r\\n\\t\\treturn tokenIndex_ - s.products[s.tokenToProduct[tokenIndex_]].startingToken;\\r\\n\\t}\\r\\n\\r\\n\\tfunction tokenToProduct(uint tokenIndex_) public view tokenExists(tokenIndex_) returns (uint productIndex, uint rangeIndex) {\\r\\n\\t\\tproductIndex = s.tokenToProduct[tokenIndex_];\\r\\n\\t\\trangeIndex = s.tokenToRange[tokenIndex_];\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice\\tReturns the number of products on the contract\\r\\n\\t/// @dev\\tUse with get product to list all of the products\\r\\n\\tfunction getProductCount() external view returns(uint) {\\r\\n\\t\\treturn s.products.length;\\r\\n\\t}\\r\\n\\r\\n\\tfunction tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\\r\\n\\t\\trequire(index < RAIRProductFacet.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\r\\n\\t\\treturn s._ownedTokens[owner][index];\\r\\n\\t}\\r\\n\\r\\n\\tfunction balanceOf(address owner) public view returns (uint256) {\\r\\n\\t\\trequire(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\r\\n\\t\\treturn s._balances[owner];\\r\\n\\t}\\r\\n\\r\\n\\tfunction _exists(uint256 tokenId) internal view returns (bool) {\\r\\n        return s._owners[tokenId] != address(0);\\r\\n    }\\r\\n\\t\\r\\n\\t/// @notice\\tLoops through a range of tokens inside a product and returns the first token without an owner\\r\\n\\t/// @dev\\tUses a loop, do not call this from a non-view function!\\r\\n\\t/// @param\\tproductID\\tIndex of the product to search\\r\\n\\t/// @param\\tstartingIndex\\tIndex of the product to search\\r\\n\\t/// @param\\tendingIndex\\t\\tIndex of the product to search\\r\\n\\tfunction getNextSequentialIndex(uint productID, uint startingIndex, uint endingIndex) public view productExists(productID) returns(uint nextIndex) {\\r\\n\\t\\tproduct memory currentProduct = s.products[productID];\\r\\n\\t\\tfor (uint i = currentProduct.startingToken + startingIndex; i <= currentProduct.startingToken + endingIndex; i++) {\\r\\n\\t\\t\\tif (!_exists(i)) {\\r\\n\\t\\t\\t\\treturn i - currentProduct.startingToken;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\trequire(false, \\\"RAIR ERC721: There are no available tokens in this range.\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice\\tLoops over the user's tokens looking for one that belongs to a product and a specific range\\r\\n\\t/// @dev\\tLoops are expensive in solidity, so don't use this in a function that requires gas\\r\\n\\t/// @param\\tuserAddress\\t\\t\\tUser to search\\r\\n\\t/// @param\\tproductIndex\\t\\tProduct to search\\r\\n\\t/// @param\\tstartingToken\\t\\tProduct to search\\r\\n\\t/// @param\\tendingToken\\t\\t\\tProduct to search\\r\\n\\tfunction hasTokenInProduct(\\r\\n\\t\\t\\t\\taddress userAddress,\\r\\n\\t\\t\\t\\tuint productIndex,\\r\\n\\t\\t\\t\\tuint startingToken,\\r\\n\\t\\t\\t\\tuint endingToken) public view returns (bool) {\\r\\n\\t\\tproduct memory aux = s.products[productIndex];\\r\\n\\t\\tif (aux.endingToken != 0) {\\r\\n\\t\\t\\tfor (uint i = 0; i < balanceOf(userAddress); i++) {\\r\\n\\t\\t\\t\\tuint token = tokenOfOwnerByIndex(userAddress, i);\\r\\n\\t\\t\\t\\tif (s.tokenToProduct[token] == productIndex &&\\r\\n\\t\\t\\t\\t\\t\\ttoken >= aux.startingToken + startingToken &&\\r\\n\\t\\t\\t\\t\\t\\ttoken <= aux.startingToken + endingToken) {\\r\\n\\t\\t\\t\\t\\treturn true;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn false;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice\\tReturns the number of tokens inside a product\\r\\n\\t/// @param\\tproductIndex \\tProduct index\\r\\n\\tfunction mintedTokensInProduct(uint productIndex) public view returns (uint length) {\\r\\n\\t\\tlength = s.tokensByProduct[productIndex].length;\\r\\n\\t}\\r\\n\\t\\r\\n\\t/// @notice\\tCreates a product\\r\\n\\t/// @dev\\tOnly a CREATOR can call this function\\r\\n\\t/// @param\\t_productName Name of the product\\r\\n\\t/// @param\\t_copies\\t\\t\\tAmount of tokens inside the product\\r\\n\\tfunction createProduct(string memory _productName, uint _copies) public onlyRole(CREATOR) {\\r\\n\\t\\tuint lastToken = s.products.length == 0 ? 0 : s.products[s.products.length - 1].endingToken + 1;\\r\\n\\t\\t\\r\\n\\t\\tproduct storage newProduct = s.products.push();\\r\\n\\r\\n\\t\\tnewProduct.startingToken = lastToken;\\r\\n\\t\\tnewProduct.endingToken = newProduct.startingToken + _copies - 1;\\r\\n\\t\\tnewProduct.name = string(_productName);\\r\\n\\t\\tnewProduct.mintableTokens = _copies;\\r\\n\\t\\t\\r\\n\\t\\temit ProductCreated(s.products.length - 1, _productName, lastToken, _copies);\\r\\n\\t}\\r\\n}\",\"keccak256\":\"0x56a9b7872215debc694a797e55f524423d0b5fb5c081e83939119b8a8c218dde\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061183c806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806391d14854116100b8578063ca15c8731161007c578063ca15c873146102a8578063d547741f146102bb578063d76bf566146102ce578063e4fbb609146102f6578063e5b850151461031d578063e9300c6c1461033057600080fd5b806391d14854146102495780639716d1011461025c578063971b4cc41461026f578063bda5ec3314610282578063c00b83c51461029557600080fd5b80634a348da9116100ff5780634a348da9146101d0578063586704ea146101d85780636c99dcbf146101f857806370a082311461020b5780639010d07c1461021e57600080fd5b8063248a9ca31461013c5780632f2ff15d146101725780632f745c591461018757806336568abe1461019a57806336706b41146101ad575b600080fd5b61015f61014a366004611383565b6000908152600a602052604090206001015490565b6040519081526020015b60405180910390f35b6101856101803660046113b8565b610343565b005b61015f6101953660046113e4565b61036e565b6101856101a83660046113b8565b61040c565b6101c06101bb3660046113e4565b61048a565b6040519015158152602001610169565b600e5461015f565b61015f6101e6366004611383565b60009081526016602052604090205490565b6101c061020636600461140e565b6104f3565b61015f610219366004611447565b6106d2565b61023161022c366004611462565b610759565b6040516001600160a01b039091168152602001610169565b6101c06102573660046113b8565b610778565b61015f61026a366004611462565b6107a3565b61015f61027d366004611462565b6107fc565b61015f610290366004611484565b610856565b61015f6102a3366004611383565b610a98565b61015f6102b6366004611383565b610b12565b6101856102c93660046113b8565b610b29565b6102e16102dc366004611383565b610b4f565b60408051928352602083019190915201610169565b61015f7f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db681565b6101c061032b3660046113e4565b610ba3565b61018561033e3660046114c6565b610c95565b6000828152600a602052604090206001015461035f8133610dd4565b6103698383610e38565b505050565b6000610379836106d2565b82106103e05760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084015b60405180910390fd5b506001600160a01b03821660009081526006602090815260408083208484529091529020545b92915050565b6001600160a01b038116331461047c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016103d7565b6104868282610ed2565b5050565b600e54600090829081106104b05760405162461bcd60e51b81526004016103d79061157b565b600080600e0184815481106104c7576104c76115be565b906000526020600020906005020190506104ea8582600001548360010154610f4d565b95945050505050565b6000806000600e01858154811061050c5761050c6115be565b90600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382018054610553906115d4565b80601f016020809104026020016040519081016040528092919081815260200182805461057f906115d4565b80156105cc5780601f106105a1576101008083540402835291602001916105cc565b820191906000526020600020905b8154815290600101906020018083116105af57829003601f168201915b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561062457602002820191906000526020600020905b815481526020019060010190808311610610575b505050505081525050905080602001516000146106c45760005b610647876106d2565b8110156106c257600061065a888361036e565b600081815260106020526040902054909150871480156106865750825161068290879061161f565b8110155b801561069e5750825161069a90869061161f565b8111155b156106af57600193505050506106ca565b50806106ba81611637565b91505061063e565b505b60009150505b949350505050565b60006001600160a01b03821661073d5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016103d7565b506001600160a01b031660009081526003602052604090205490565b6000828152600b602052604081206107719083610fa2565b9392505050565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600e54600090839081106107c95760405162461bcd60e51b81526004016103d79061157b565b826000600e0185815481106107e0576107e06115be565b9060005260206000209060050201600001546106ca919061161f565b600e54600090839081106108225760405162461bcd60e51b81526004016103d79061157b565b6000848152601660205260409020805484908110610842576108426115be565b906000526020600020015491505092915050565b600e546000908490811061087c5760405162461bcd60e51b81526004016103d79061157b565b600080600e018681548110610893576108936115be565b90600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820180546108da906115d4565b80601f0160208091040260200160405190810160405280929190818152602001828054610906906115d4565b80156109535780601f1061092857610100808354040283529160200191610953565b820191906000526020600020905b81548152906001019060200180831161093657829003601f168201915b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156109ab57602002820191906000526020600020905b815481526020019060010190808311610997575b505050505081525050905060008582600001516109c8919061161f565b90505b81516109d890869061161f565b8111610a21576000818152600260205260409020546001600160a01b0316610a0f578151610a069082611652565b93505050610a90565b80610a1981611637565b9150506109cb565b5060405162461bcd60e51b815260206004820152603960248201527f52414952204552433732313a20546865726520617265206e6f20617661696c6160448201527f626c6520746f6b656e7320696e20746869732072616e67652e0000000000000060648201526084016103d7565b509392505050565b600081815260196020526040812054829060ff16610ac85760405162461bcd60e51b81526004016103d790611669565b600083815260106020526040902054600e80549091908110610aec57610aec6115be565b90600052602060002090600502016000015483610b099190611652565b91505b50919050565b6000818152600b6020526040812061040690610fae565b6000828152600a6020526040902060010154610b458133610dd4565b6103698383610ed2565b6000818152601960205260408120548190839060ff16610b815760405162461bcd60e51b81526004016103d790611669565b5050506000908152601060209081526040808320546011909252909120549091565b600f5460009082908110610c035760405162461bcd60e51b815260206004820152602160248201527f52414952204552433732313a2052616e676520646f6573206e6f7420657869736044820152601d60fa1b60648201526084016103d7565b600080600f018481548110610c1a57610c1a6115be565b6000918252602080832087845260189091526040832054600e80546007909402909201945090918110610c4f57610c4f6115be565b9060005260206000209060050201600001549050610c8b86836000015483610c77919061161f565b6001850154610c86908561161f565b610f4d565b9695505050505050565b7f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db6610cc08133610dd4565b600e5460009015610d0e57600e8054610cdb90600190611652565b81548110610ceb57610ceb6115be565b9060005260206000209060050201600101546001610d09919061161f565b610d11565b60005b600e8054600181810183556000929092526005027fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd01828155919250610d57858461161f565b610d619190611652565b60018201558451610d7b90600383019060208801906112ea565b5060028101849055600e54610d9290600190611652565b7f8d3d82130aebba03bb48b5d158bc2bbb4647856765b1089e7250507307965af9868487604051610dc59392919061170d565b60405180910390a25050505050565b610dde8282610778565b61048657610df6816001600160a01b03166014610fb8565b610e01836020610fb8565b604051602001610e12929190611732565b60408051601f198184030181529082905262461bcd60e51b82526103d7916004016117a7565b610e428282610778565b610486576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610e7a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46000828152600b602052604090206103699082611154565b610edc8282610778565b15610486576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46000828152600b602052604090206103699082611169565b6000825b82811015610f97576000818152600260205260409020546001600160a01b0386811691161415610f85576001915050610771565b80610f8f81611637565b915050610f51565b506000949350505050565b6000610771838361117e565b6000610406825490565b60606000610fc78360026117ba565b610fd290600261161f565b67ffffffffffffffff811115610fea57610fea6114b0565b6040519080825280601f01601f191660200182016040528015611014576020820181803683370190505b509050600360fc1b8160008151811061102f5761102f6115be565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061105e5761105e6115be565b60200101906001600160f81b031916908160001a90535060006110828460026117ba565b61108d90600161161f565b90505b6001811115611105576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106110c1576110c16115be565b1a60f81b8282815181106110d7576110d76115be565b60200101906001600160f81b031916908160001a90535060049490941c936110fe816117d9565b9050611090565b5083156107715760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103d7565b6000610771836001600160a01b0384166111a8565b6000610771836001600160a01b0384166111f7565b6000826000018281548110611195576111956115be565b9060005260206000200154905092915050565b60008181526001830160205260408120546111ef57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610406565b506000610406565b600081815260018301602052604081205480156112e057600061121b600183611652565b855490915060009061122f90600190611652565b905081811461129457600086600001828154811061124f5761124f6115be565b9060005260206000200154905080876000018481548110611272576112726115be565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806112a5576112a56117f0565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610406565b6000915050610406565b8280546112f6906115d4565b90600052602060002090601f016020900481019282611318576000855561135e565b82601f1061133157805160ff191683800117855561135e565b8280016001018555821561135e579182015b8281111561135e578251825591602001919060010190611343565b5061136a92915061136e565b5090565b5b8082111561136a576000815560010161136f565b60006020828403121561139557600080fd5b5035919050565b80356001600160a01b03811681146113b357600080fd5b919050565b600080604083850312156113cb57600080fd5b823591506113db6020840161139c565b90509250929050565b600080604083850312156113f757600080fd5b6114008361139c565b946020939093013593505050565b6000806000806080858703121561142457600080fd5b61142d8561139c565b966020860135965060408601359560600135945092505050565b60006020828403121561145957600080fd5b6107718261139c565b6000806040838503121561147557600080fd5b50508035926020909101359150565b60008060006060848603121561149957600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156114d957600080fd5b823567ffffffffffffffff808211156114f157600080fd5b818501915085601f83011261150557600080fd5b813581811115611517576115176114b0565b604051601f8201601f19908116603f0116810190838211818310171561153f5761153f6114b0565b8160405282815288602084870101111561155857600080fd5b826020860160208301376000602093820184015298969091013596505050505050565b60208082526023908201527f52414952204552433732313a2050726f6475637420646f6573206e6f742065786040820152621a5cdd60ea1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b600181811c908216806115e857607f821691505b60208210811415610b0c57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561163257611632611609565b500190565b600060001982141561164b5761164b611609565b5060010190565b60008282101561166457611664611609565b500390565b60208082526028908201527f52414952204552433732313a20517565727920666f72206e6f6e657869737465604082015267373a103a37b5b2b760c11b606082015260800190565b60005b838110156116cc5781810151838201526020016116b4565b838111156116db576000848401525b50505050565b600081518084526116f98160208601602086016116b1565b601f01601f19169290920160200192915050565b60608152600061172060608301866116e1565b60208301949094525060400152919050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161176a8160178501602088016116b1565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161179b8160288401602088016116b1565b01602801949350505050565b60208152600061077160208301846116e1565b60008160001904831182151516156117d4576117d4611609565b500290565b6000816117e8576117e8611609565b506000190190565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220260f657723b1d92a86c519ee2b9a4f68b0eb707d81e815212d199935ff9db39b64736f6c634300080b0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createProduct(string,uint256)": {
        "details": "Only a CREATOR can call this function",
        "params": {
          "_copies": "Amount of tokens inside the product",
          "_productName": "Name of the product"
        }
      },
      "getNextSequentialIndex(uint256,uint256,uint256)": {
        "details": "Uses a loop, do not call this from a non-view function!",
        "params": {
          "endingIndex": "Index of the product to search",
          "productID": "Index of the product to search",
          "startingIndex": "Index of the product to search"
        }
      },
      "getProductCount()": {
        "details": "Use with get product to list all of the products"
      },
      "hasTokenInProduct(address,uint256,uint256,uint256)": {
        "details": "Loops are expensive in solidity, so don't use this in a function that requires gas",
        "params": {
          "endingToken": "Product to search",
          "productIndex": "Product to search",
          "startingToken": "Product to search",
          "userAddress": "User to search"
        }
      },
      "mintedTokensInProduct(uint256)": {
        "params": {
          "productIndex": "Product index"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createProduct(string,uint256)": {
        "notice": "Creates a product"
      },
      "getNextSequentialIndex(uint256,uint256,uint256)": {
        "notice": "Loops through a range of tokens inside a product and returns the first token without an owner"
      },
      "getProductCount()": {
        "notice": "Returns the number of products on the contract"
      },
      "hasTokenInProduct(address,uint256,uint256,uint256)": {
        "notice": "Loops over the user's tokens looking for one that belongs to a product and a specific range"
      },
      "mintedTokensInProduct(uint256)": {
        "notice": "Returns the number of tokens inside a product"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7404,
        "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage721)7390_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(product)7289_storage)dyn_storage": {
        "base": "t_struct(product)7289_storage",
        "encoding": "dynamic_array",
        "label": "struct product[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(range)7277_storage)dyn_storage": {
        "base": "t_struct(range)7277_storage",
        "encoding": "dynamic_array",
        "label": "struct range[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2428_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2428_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)5150_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)5150_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2428_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2427,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2127_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AppStorage721)7390_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage721",
        "members": [
          {
            "astId": 7291,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 7293,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 7297,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_owners",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 7301,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_balances",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 7305,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 7311,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 7317,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 7321,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 7324,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_allTokens",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 7328,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 7333,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_roles",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)5150_storage)"
          },
          {
            "astId": 7338,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_roleMembers",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2428_storage)"
          },
          {
            "astId": 7340,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "baseURI",
            "offset": 0,
            "slot": "12",
            "type": "t_string_storage"
          },
          {
            "astId": 7342,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "factoryAddress",
            "offset": 0,
            "slot": "13",
            "type": "t_address"
          },
          {
            "astId": 7344,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "royaltyFee",
            "offset": 20,
            "slot": "13",
            "type": "t_uint16"
          },
          {
            "astId": 7348,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "products",
            "offset": 0,
            "slot": "14",
            "type": "t_array(t_struct(product)7289_storage)dyn_storage"
          },
          {
            "astId": 7352,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "ranges",
            "offset": 0,
            "slot": "15",
            "type": "t_array(t_struct(range)7277_storage)dyn_storage"
          },
          {
            "astId": 7356,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "tokenToProduct",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 7360,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "tokenToRange",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 7364,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "uniqueTokenURI",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_uint256,t_string_storage)"
          },
          {
            "astId": 7368,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "productURI",
            "offset": 0,
            "slot": "19",
            "type": "t_mapping(t_uint256,t_string_storage)"
          },
          {
            "astId": 7372,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "appendTokenIndexToProductURI",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 7374,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "appendTokenIndexToBaseURI",
            "offset": 0,
            "slot": "21",
            "type": "t_bool"
          },
          {
            "astId": 7379,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "tokensByProduct",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
          },
          {
            "astId": 7381,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "contractMetadataURI",
            "offset": 0,
            "slot": "23",
            "type": "t_string_storage"
          },
          {
            "astId": 7385,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "rangeToProduct",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 7389,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_minted",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_uint256,t_bool)"
          }
        ],
        "numberOfBytes": "832"
      },
      "t_struct(RoleData)5150_storage": {
        "encoding": "inplace",
        "label": "struct RoleData",
        "members": [
          {
            "astId": 5147,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 5149,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2127_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2122,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2126,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(product)7289_storage": {
        "encoding": "inplace",
        "label": "struct product",
        "members": [
          {
            "astId": 7279,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "startingToken",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7281,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "endingToken",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7283,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "mintableTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7285,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "name",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 7288,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "rangeList",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(range)7277_storage": {
        "encoding": "inplace",
        "label": "struct range",
        "members": [
          {
            "astId": 7264,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "rangeStart",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7266,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "rangeEnd",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7268,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "tokensAllowed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7270,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "mintableTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7272,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "lockedTokens",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7274,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "rangePrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7276,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "rangeName",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}