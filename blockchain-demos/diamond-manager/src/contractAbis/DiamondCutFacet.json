{
  "address": "0xc8a2a149D83Af7454d7320F2d8bb1dff8AA61E5e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa07c824fc7d237d7ef1de4b4166f5bf3dcb7820cba76d360e808699c839f97cd",
  "receipt": {
    "to": null,
    "from": "0xEC30759D0A3F3CE0A730920DC29d74e441f492C3",
    "contractAddress": "0xc8a2a149D83Af7454d7320F2d8bb1dff8AA61E5e",
    "transactionIndex": 8,
    "gasUsed": "1068643",
    "logsBloom": "0x
    "blockHash": "0xb68150d5ac8c5d73e6a2d74ab2a69d746b505f3b9ae65050d83c86940196bdb4",
    "transactionHash": "0xa07c824fc7d237d7ef1de4b4166f5bf3dcb7820cba76d360e808699c839f97cd",
    "logs": [],
    "blockNumber": 6189229,
    "cumulativeGasUsed": "1521236",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8e65d135f0f1a9a15bd5e211a01c65ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"_calldata\":\"A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init\",\"_diamondCut\":\"Contains the facet addresses and function selectors\",\"_init\":\"The address of the contract or facet to execute _calldata\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"Add/replace/remove any number of functions and optionally execute         a function with delegatecall\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/diamondStandard/facets/DiamondCutFacet.sol\":\"DiamondCutFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/diamondStandard/facets/DiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\r\\nimport { LibDiamond } from \\\"../libraries/LibDiamond.sol\\\";\\r\\n\\r\\ncontract DiamondCutFacet is IDiamondCut {\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external override {\\r\\n        LibDiamond.enforceIsContractOwner();\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        uint256 originalSelectorCount = ds.selectorCount;\\r\\n        uint256 selectorCount = originalSelectorCount;\\r\\n        bytes32 selectorSlot;\\r\\n        // Check if last selector slot is not full\\r\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\r\\n        if (selectorCount & 7 > 0) {\\r\\n            // get last selectorSlot\\r\\n            // \\\"selectorCount >> 3\\\" is a gas efficient division by 8 \\\"selectorCount / 8\\\"\\r\\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\\r\\n        }\\r\\n        // loop through diamond cut\\r\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\r\\n            (selectorCount, selectorSlot) = LibDiamond.addReplaceRemoveFacetSelectors(\\r\\n                selectorCount,\\r\\n                selectorSlot,\\r\\n                _diamondCut[facetIndex].facetAddress,\\r\\n                _diamondCut[facetIndex].action,\\r\\n                _diamondCut[facetIndex].functionSelectors\\r\\n            );\\r\\n        }\\r\\n        if (selectorCount != originalSelectorCount) {\\r\\n            ds.selectorCount = uint16(selectorCount);\\r\\n        }\\r\\n        // If last selector slot is not full\\r\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\r\\n        if (selectorCount & 7 > 0) {\\r\\n            // \\\"selectorCount >> 3\\\" is a gas efficient division by 8 \\\"selectorCount / 8\\\"\\r\\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\r\\n        }\\r\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\r\\n        LibDiamond.initializeDiamondCut(_init, _calldata);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3be2c960048664cedcdc2c9eb3de5199737b37e126d83c38796d25bd24a5678d\",\"license\":\"MIT\"},\"contracts/diamondStandard/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n}\\r\\n\",\"keccak256\":\"0x9875549c8bbc63ea8fcd713805d48fa78762f7d90ba524a44b389ff4a1704ed2\",\"license\":\"MIT\"},\"contracts/diamondStandard/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\r\\n\\r\\nlibrary LibDiamond {\\r\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\r\\n\\r\\n    struct DiamondStorage {\\r\\n        // maps function selectors to the facets that execute the functions.\\r\\n        // and maps the selectors to their position in the selectorSlots array.\\r\\n        // func selector => address facet, selector position\\r\\n        mapping(bytes4 => bytes32) facets;\\r\\n        // array of slots of function selectors.\\r\\n        // each slot holds 8 function selectors.\\r\\n        mapping(uint256 => bytes32) selectorSlots;\\r\\n        // The number of function selectors in selectorSlots\\r\\n        uint16 selectorCount;\\r\\n        // Used to query if a contract implements an interface.\\r\\n        // Used to implement ERC-165.\\r\\n        mapping(bytes4 => bool) supportedInterfaces;\\r\\n        // owner of the contract\\r\\n        address contractOwner;\\r\\n    }\\r\\n\\r\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    function setContractOwner(address _newOwner) internal {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        address previousOwner = ds.contractOwner;\\r\\n        ds.contractOwner = _newOwner;\\r\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\r\\n    }\\r\\n\\r\\n    function contractOwner() internal view returns (address contractOwner_) {\\r\\n        contractOwner_ = diamondStorage().contractOwner;\\r\\n    }\\r\\n\\r\\n    function enforceIsContractOwner() internal view {\\r\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\r\\n    }\\r\\n\\r\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n\\r\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\r\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\r\\n\\r\\n    // Internal function version of diamondCut\\r\\n    // This code is almost the same as the external diamondCut,\\r\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\r\\n    // 'Facet[] calldata _diamondCut'.\\r\\n    // The code is duplicated to prevent copying calldata to memory which\\r\\n    // causes an error for a two dimensional array.\\r\\n    function diamondCut(\\r\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\r\\n        address _init,\\r\\n        bytes memory _calldata\\r\\n    ) internal {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        uint256 originalSelectorCount = ds.selectorCount;\\r\\n        uint256 selectorCount = originalSelectorCount;\\r\\n        bytes32 selectorSlot;\\r\\n        // Check if last selector slot is not full\\r\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\r\\n        if (selectorCount & 7 > 0) {\\r\\n            // get last selectorSlot\\r\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\r\\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\\r\\n        }\\r\\n        // loop through diamond cut\\r\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\r\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\r\\n                selectorCount,\\r\\n                selectorSlot,\\r\\n                _diamondCut[facetIndex].facetAddress,\\r\\n                _diamondCut[facetIndex].action,\\r\\n                _diamondCut[facetIndex].functionSelectors\\r\\n            );\\r\\n        }\\r\\n        if (selectorCount != originalSelectorCount) {\\r\\n            ds.selectorCount = uint16(selectorCount);\\r\\n        }\\r\\n        // If last selector slot is not full\\r\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\r\\n        if (selectorCount & 7 > 0) {\\r\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\r\\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\r\\n        }\\r\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\r\\n        initializeDiamondCut(_init, _calldata);\\r\\n    }\\r\\n\\r\\n    function addReplaceRemoveFacetSelectors(\\r\\n        uint256 _selectorCount,\\r\\n        bytes32 _selectorSlot,\\r\\n        address _newFacetAddress,\\r\\n        IDiamondCut.FacetCutAction _action,\\r\\n        bytes4[] memory _selectors\\r\\n    ) internal returns (uint256, bytes32) {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\r\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\r\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\r\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\r\\n                bytes4 selector = _selectors[selectorIndex];\\r\\n                bytes32 oldFacet = ds.facets[selector];\\r\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\r\\n                // add facet for selector\\r\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\r\\n                // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\r\\n                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\r\\n                // clear selector position in slot and add selector\\r\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\r\\n                // if slot is full then write it to storage\\r\\n                if (selectorInSlotPosition == 224) {\\r\\n                    // \\\"_selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"_selectorSlot / 8\\\"\\r\\n                    ds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\r\\n                    _selectorSlot = 0;\\r\\n                }\\r\\n                _selectorCount++;\\r\\n            }\\r\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\r\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\r\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\r\\n                bytes4 selector = _selectors[selectorIndex];\\r\\n                bytes32 oldFacet = ds.facets[selector];\\r\\n                address oldFacetAddress = address(bytes20(oldFacet));\\r\\n                // only useful if immutable functions exist\\r\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\r\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\r\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\r\\n                // replace old facet address\\r\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\r\\n            }\\r\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\r\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\r\\n            // \\\"_selectorCount >> 3\\\" is a gas efficient division by 8 \\\"_selectorCount / 8\\\"\\r\\n            uint256 selectorSlotCount = _selectorCount >> 3;\\r\\n            // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\r\\n            uint256 selectorInSlotIndex = _selectorCount & 7;\\r\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\r\\n                if (_selectorSlot == 0) {\\r\\n                    // get last selectorSlot\\r\\n                    selectorSlotCount--;\\r\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\r\\n                    selectorInSlotIndex = 7;\\r\\n                } else {\\r\\n                    selectorInSlotIndex--;\\r\\n                }\\r\\n                bytes4 lastSelector;\\r\\n                uint256 oldSelectorsSlotCount;\\r\\n                uint256 oldSelectorInSlotPosition;\\r\\n                // adding a block here prevents stack too deep error\\r\\n                {\\r\\n                    bytes4 selector = _selectors[selectorIndex];\\r\\n                    bytes32 oldFacet = ds.facets[selector];\\r\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\r\\n                    // only useful if immutable functions exist\\r\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\r\\n                    // replace selector with last selector in ds.facets\\r\\n                    // gets the last selector\\r\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\r\\n                    if (lastSelector != selector) {\\r\\n                        // update last selector slot position info\\r\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\r\\n                    }\\r\\n                    delete ds.facets[selector];\\r\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\r\\n                    // \\\"oldSelectorCount >> 3\\\" is a gas efficient division by 8 \\\"oldSelectorCount / 8\\\"\\r\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\r\\n                    // \\\"oldSelectorCount & 7\\\" is a gas efficient modulo by eight \\\"oldSelectorCount % 8\\\" \\r\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\r\\n                }\\r\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\r\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\r\\n                    // clears the selector we are deleting and puts the last selector in its place.\\r\\n                    oldSelectorSlot =\\r\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\r\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\r\\n                    // update storage with the modified slot\\r\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\r\\n                } else {\\r\\n                    // clears the selector we are deleting and puts the last selector in its place.\\r\\n                    _selectorSlot =\\r\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\r\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\r\\n                }\\r\\n                if (selectorInSlotIndex == 0) {\\r\\n                    delete ds.selectorSlots[selectorSlotCount];\\r\\n                    _selectorSlot = 0;\\r\\n                }\\r\\n            }\\r\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\r\\n        } else {\\r\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\r\\n        }\\r\\n        return (_selectorCount, _selectorSlot);\\r\\n    }\\r\\n\\r\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\r\\n        if (_init == address(0)) {\\r\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\r\\n        } else {\\r\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\r\\n            if (_init != address(this)) {\\r\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\r\\n            }\\r\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\r\\n            if (!success) {\\r\\n                if (error.length > 0) {\\r\\n                    // bubble up the error\\r\\n                    revert(string(error));\\r\\n                } else {\\r\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\r\\n        uint256 contractSize;\\r\\n        assembly {\\r\\n            contractSize := extcodesize(_contract)\\r\\n        }\\r\\n        require(contractSize > 0, _errorMessage);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe677edcb97d8b558e0d27ac4f6b3723688180455abb3f6ac6dc0deb250f69b41\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061125f806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004361003e366004610d8f565b610045565b005b61004d61027b565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e547fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c9061ffff8116908190600090600716156100bc5750600381901c60009081526001840160205260409020545b60005b888110156101b35761019c83838c8c858181106100de576100de610e41565b90506020028101906100f09190610e57565b6100fe906020810190610e77565b8d8d8681811061011057610110610e41565b90506020028101906101229190610e57565b610133906040810190602001610ea8565b8e8e8781811061014557610145610e41565b90506020028101906101579190610e57565b610165906040810190610ec3565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061030992505050565b9093509150806101ab81610f23565b9150506100bf565b508282146101cf5760028401805461ffff191661ffff84161790555b60078216156101f157600382901c600090815260018501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738989898989604051610228959493929190610fcd565b60405180910390a16102708787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610af692505050565b505050505050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b031633146103075760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b60648201526084015b60405180910390fd5b565b600080807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c905060008451116103955760405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201526a1858d95d081d1bc818dd5d60aa1b60648201526084016102fe565b60008560028111156103a9576103a9610f3e565b1415610517576103d1866040518060600160405280602481526020016111b660249139610d09565b60005b84518110156105115760008582815181106103f1576103f1610e41565b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c1561048a5760405162461bcd60e51b815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f6044820152746e207468617420616c72656164792065786973747360581b60648201526084016102fe565b6001600160e01b031980831660008181526020879052604090206001600160601b031960608d901b168e17905560e060058e901b811692831c199c909c1690821c179a8114156104ee5760038c901c600090815260018601602052604081209b909b555b8b6104f881610f23565b9c5050505050808061050990610f23565b9150506103d4565b50610aea565b600185600281111561052b5761052b610f3e565b141561075d576105538660405180606001604052806028815260200161120260289139610d09565b60005b845181101561051157600085828151811061057357610573610e41565b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c308114156106095760405162461bcd60e51b815260206004820152602f60248201527f4c69624469616d6f6e644375743a2043616e2774207265706c61636520696d6d60448201526e3aba30b1363290333ab731ba34b7b760891b60648201526084016102fe565b896001600160a01b0316816001600160a01b031614156106915760405162461bcd60e51b815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527f6374696f6e20776974682073616d652066756e6374696f6e000000000000000060648201526084016102fe565b6001600160a01b03811661070d5760405162461bcd60e51b815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527f6374696f6e207468617420646f65736e2774206578697374000000000000000060648201526084016102fe565b506001600160e01b031990911660009081526020849052604090206bffffffffffffffffffffffff919091166001600160601b031960608a901b161790558061075581610f23565b915050610556565b600285600281111561077157610771610f3e565b1415610a92576001600160a01b038616156107ed5760405162461bcd60e51b815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f76652066616365742061646472604482015275657373206d757374206265206164647265737328302960501b60648201526084016102fe565b600388901c6007891660005b8651811015610a7257896108315782610811816110f6565b60008181526001870160205260409020549b5093506007925061083f9050565b8161083b816110f6565b9250505b6000806000808a858151811061085757610857610e41565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c6108f75760405162461bcd60e51b815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360448201527f74696f6e207468617420646f65736e277420657869737400000000000000000060648201526084016102fe565b606081901c3014156109625760405162461bcd60e51b815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201526d3a30b1363290333ab731ba34b7b760911b60648201526084016102fe565b600587901b8f901b94506001600160e01b0319808616908316146109b8576001600160e01b03198516600090815260208a90526040902080546001600160601b0319166bffffffffffffffffffffffff83161790555b6001600160e01b031991909116600090815260208990526040812055600381901c611fff16925060051b60e0169050858214610a1d576000828152600188016020526040902080546001600160e01b031980841c19909116908516831c179055610a41565b80836001600160e01b031916901c816001600160e01b031960001b901c198e16179c505b84610a5c57600086815260018801602052604081208190559c505b5050508080610a6a90610f23565b9150506107f9565b5080610a7f83600861110d565b610a89919061112c565b99505050610aea565b60405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f727265637420466163657443756044820152663a20b1ba34b7b760c91b60648201526084016102fe565b50959694955050505050565b6001600160a01b038216610b7d57805115610b795760405162461bcd60e51b815260206004820152603c60248201527f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860448201527f3029206275745f63616c6c64617461206973206e6f7420656d7074790000000060648201526084016102fe565b5050565b6000815111610bf45760405162461bcd60e51b815260206004820152603d60248201527f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460448201527f7920627574205f696e6974206973206e6f74206164647265737328302900000060648201526084016102fe565b6001600160a01b0382163014610c2657610c26826040518060600160405280602881526020016111da60289139610d09565b600080836001600160a01b031683604051610c419190611170565b600060405180830381855af49150503d8060008114610c7c576040519150601f19603f3d011682016040523d82523d6000602084013e610c81565b606091505b509150915081610d0357805115610cac578060405162461bcd60e51b81526004016102fe9190611182565b60405162461bcd60e51b815260206004820152602660248201527f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e2072656044820152651d995c9d195960d21b60648201526084016102fe565b50505050565b813b8181610d035760405162461bcd60e51b81526004016102fe9190611182565b80356001600160a01b0381168114610d4157600080fd5b919050565b60008083601f840112610d5857600080fd5b50813567ffffffffffffffff811115610d7057600080fd5b602083019150836020828501011115610d8857600080fd5b9250929050565b600080600080600060608688031215610da757600080fd5b853567ffffffffffffffff80821115610dbf57600080fd5b818801915088601f830112610dd357600080fd5b813581811115610de257600080fd5b8960208260051b8501011115610df757600080fd5b60208301975080965050610e0d60208901610d2a565b94506040880135915080821115610e2357600080fd5b50610e3088828901610d46565b969995985093965092949392505050565b634e487b7160e01b600052603260045260246000fd5b60008235605e19833603018112610e6d57600080fd5b9190910192915050565b600060208284031215610e8957600080fd5b610e9282610d2a565b9392505050565b803560038110610d4157600080fd5b600060208284031215610eba57600080fd5b610e9282610e99565b6000808335601e19843603018112610eda57600080fd5b83018035915067ffffffffffffffff821115610ef557600080fd5b6020019150600581901b3603821315610d8857600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610f3757610f37610f0d565b5060010190565b634e487b7160e01b600052602160045260246000fd5b818352600060208085019450826000805b86811015610f985782356001600160e01b03198116808214610f85578384fd5b8952509683019691830191600101610f65565b50959695505050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6060808252818101869052600090600560808085019089831b8601018a855b8b8110156110c357878303607f190184528135368e9003605e1901811261101257600080fd5b8d016001600160a01b0361102582610d2a565b1684526020611035818301610e99565b6003811061105357634e487b7160e01b600052602160045260246000fd5b8582015260408281013536849003601e1901811261107057600080fd5b8301803567ffffffffffffffff81111561108957600080fd5b808a1b360385131561109a57600080fd5b8a838901526110ae8b890182868501610f54565b98840198975050509301925050600101610fec565b50506001600160a01b038916602087015285810360408701526110e781888a610fa4565b9b9a5050505050505050505050565b60008161110557611105610f0d565b506000190190565b600081600019048311821515161561112757611127610f0d565b500290565b6000821982111561113f5761113f610f0d565b500190565b60005b8381101561115f578181015183820152602001611147565b83811115610d035750506000910152565b60008251610e6d818460208701611144565b60208152600082518060208401526111a1816040850160208701611144565b601f01601f1916919091016040019291505056fe4c69624469616d6f6e644375743a2041646420666163657420686173206e6f20636f64654c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a205265706c61636520666163657420686173206e6f20636f6465a2646970667358221220314587cff88e5b839e726d7e421a868ef310b658840eab7383ae71131e771ed864736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004361003e366004610d8f565b610045565b005b61004d61027b565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e547fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c9061ffff8116908190600090600716156100bc5750600381901c60009081526001840160205260409020545b60005b888110156101b35761019c83838c8c858181106100de576100de610e41565b90506020028101906100f09190610e57565b6100fe906020810190610e77565b8d8d8681811061011057610110610e41565b90506020028101906101229190610e57565b610133906040810190602001610ea8565b8e8e8781811061014557610145610e41565b90506020028101906101579190610e57565b610165906040810190610ec3565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061030992505050565b9093509150806101ab81610f23565b9150506100bf565b508282146101cf5760028401805461ffff191661ffff84161790555b60078216156101f157600382901c600090815260018501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738989898989604051610228959493929190610fcd565b60405180910390a16102708787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610af692505050565b505050505050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b031633146103075760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b60648201526084015b60405180910390fd5b565b600080807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c905060008451116103955760405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201526a1858d95d081d1bc818dd5d60aa1b60648201526084016102fe565b60008560028111156103a9576103a9610f3e565b1415610517576103d1866040518060600160405280602481526020016111b660249139610d09565b60005b84518110156105115760008582815181106103f1576103f1610e41565b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c1561048a5760405162461bcd60e51b815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f6044820152746e207468617420616c72656164792065786973747360581b60648201526084016102fe565b6001600160e01b031980831660008181526020879052604090206001600160601b031960608d901b168e17905560e060058e901b811692831c199c909c1690821c179a8114156104ee5760038c901c600090815260018601602052604081209b909b555b8b6104f881610f23565b9c5050505050808061050990610f23565b9150506103d4565b50610aea565b600185600281111561052b5761052b610f3e565b141561075d576105538660405180606001604052806028815260200161120260289139610d09565b60005b845181101561051157600085828151811061057357610573610e41565b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c308114156106095760405162461bcd60e51b815260206004820152602f60248201527f4c69624469616d6f6e644375743a2043616e2774207265706c61636520696d6d60448201526e3aba30b1363290333ab731ba34b7b760891b60648201526084016102fe565b896001600160a01b0316816001600160a01b031614156106915760405162461bcd60e51b815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527f6374696f6e20776974682073616d652066756e6374696f6e000000000000000060648201526084016102fe565b6001600160a01b03811661070d5760405162461bcd60e51b815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527f6374696f6e207468617420646f65736e2774206578697374000000000000000060648201526084016102fe565b506001600160e01b031990911660009081526020849052604090206bffffffffffffffffffffffff919091166001600160601b031960608a901b161790558061075581610f23565b915050610556565b600285600281111561077157610771610f3e565b1415610a92576001600160a01b038616156107ed5760405162461bcd60e51b815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f76652066616365742061646472604482015275657373206d757374206265206164647265737328302960501b60648201526084016102fe565b600388901c6007891660005b8651811015610a7257896108315782610811816110f6565b60008181526001870160205260409020549b5093506007925061083f9050565b8161083b816110f6565b9250505b6000806000808a858151811061085757610857610e41565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c6108f75760405162461bcd60e51b815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360448201527f74696f6e207468617420646f65736e277420657869737400000000000000000060648201526084016102fe565b606081901c3014156109625760405162461bcd60e51b815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201526d3a30b1363290333ab731ba34b7b760911b60648201526084016102fe565b600587901b8f901b94506001600160e01b0319808616908316146109b8576001600160e01b03198516600090815260208a90526040902080546001600160601b0319166bffffffffffffffffffffffff83161790555b6001600160e01b031991909116600090815260208990526040812055600381901c611fff16925060051b60e0169050858214610a1d576000828152600188016020526040902080546001600160e01b031980841c19909116908516831c179055610a41565b80836001600160e01b031916901c816001600160e01b031960001b901c198e16179c505b84610a5c57600086815260018801602052604081208190559c505b5050508080610a6a90610f23565b9150506107f9565b5080610a7f83600861110d565b610a89919061112c565b99505050610aea565b60405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f727265637420466163657443756044820152663a20b1ba34b7b760c91b60648201526084016102fe565b50959694955050505050565b6001600160a01b038216610b7d57805115610b795760405162461bcd60e51b815260206004820152603c60248201527f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860448201527f3029206275745f63616c6c64617461206973206e6f7420656d7074790000000060648201526084016102fe565b5050565b6000815111610bf45760405162461bcd60e51b815260206004820152603d60248201527f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460448201527f7920627574205f696e6974206973206e6f74206164647265737328302900000060648201526084016102fe565b6001600160a01b0382163014610c2657610c26826040518060600160405280602881526020016111da60289139610d09565b600080836001600160a01b031683604051610c419190611170565b600060405180830381855af49150503d8060008114610c7c576040519150601f19603f3d011682016040523d82523d6000602084013e610c81565b606091505b509150915081610d0357805115610cac578060405162461bcd60e51b81526004016102fe9190611182565b60405162461bcd60e51b815260206004820152602660248201527f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e2072656044820152651d995c9d195960d21b60648201526084016102fe565b50505050565b813b8181610d035760405162461bcd60e51b81526004016102fe9190611182565b80356001600160a01b0381168114610d4157600080fd5b919050565b60008083601f840112610d5857600080fd5b50813567ffffffffffffffff811115610d7057600080fd5b602083019150836020828501011115610d8857600080fd5b9250929050565b600080600080600060608688031215610da757600080fd5b853567ffffffffffffffff80821115610dbf57600080fd5b818801915088601f830112610dd357600080fd5b813581811115610de257600080fd5b8960208260051b8501011115610df757600080fd5b60208301975080965050610e0d60208901610d2a565b94506040880135915080821115610e2357600080fd5b50610e3088828901610d46565b969995985093965092949392505050565b634e487b7160e01b600052603260045260246000fd5b60008235605e19833603018112610e6d57600080fd5b9190910192915050565b600060208284031215610e8957600080fd5b610e9282610d2a565b9392505050565b803560038110610d4157600080fd5b600060208284031215610eba57600080fd5b610e9282610e99565b6000808335601e19843603018112610eda57600080fd5b83018035915067ffffffffffffffff821115610ef557600080fd5b6020019150600581901b3603821315610d8857600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610f3757610f37610f0d565b5060010190565b634e487b7160e01b600052602160045260246000fd5b818352600060208085019450826000805b86811015610f985782356001600160e01b03198116808214610f85578384fd5b8952509683019691830191600101610f65565b50959695505050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6060808252818101869052600090600560808085019089831b8601018a855b8b8110156110c357878303607f190184528135368e9003605e1901811261101257600080fd5b8d016001600160a01b0361102582610d2a565b1684526020611035818301610e99565b6003811061105357634e487b7160e01b600052602160045260246000fd5b8582015260408281013536849003601e1901811261107057600080fd5b8301803567ffffffffffffffff81111561108957600080fd5b808a1b360385131561109a57600080fd5b8a838901526110ae8b890182868501610f54565b98840198975050509301925050600101610fec565b50506001600160a01b038916602087015285810360408701526110e781888a610fa4565b9b9a5050505050505050505050565b60008161110557611105610f0d565b506000190190565b600081600019048311821515161561112757611127610f0d565b500290565b6000821982111561113f5761113f610f0d565b500190565b60005b8381101561115f578181015183820152602001611147565b83811115610d035750506000910152565b60008251610e6d818460208701611144565b60208152600082518060208401526111a1816040850160208701611144565b601f01601f1916919091016040019291505056fe4c69624469616d6f6e644375743a2041646420666163657420686173206e6f20636f64654c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a205265706c61636520666163657420686173206e6f20636f6465a2646970667358221220314587cff88e5b839e726d7e421a868ef310b658840eab7383ae71131e771ed864736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "params": {
          "_calldata": "A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init",
          "_diamondCut": "Contains the facet addresses and function selectors",
          "_init": "The address of the contract or facet to execute _calldata"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "Add/replace/remove any number of functions and optionally execute         a function with delegatecall"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}