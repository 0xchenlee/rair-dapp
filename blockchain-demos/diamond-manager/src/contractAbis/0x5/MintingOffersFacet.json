{
  "address": "0x4b9c4647B8FE57fda38FD15AeA533cBa5Ae699F5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc721Address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "rangeName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeSplitsLength",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        }
      ],
      "name": "AddedMintingOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc721Address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "TokenMinted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc721Address_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex_",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "percentage",
              "type": "uint256"
            }
          ],
          "internalType": "struct feeSplits[]",
          "name": "splits",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "visible_",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "nodeAddress_",
          "type": "address"
        }
      ],
      "name": "addMintingOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc721Address_",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "rangeIndexes",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "percentage",
              "type": "uint256"
            }
          ],
          "internalType": "struct feeSplits[]",
          "name": "splits",
          "type": "tuple[]"
        },
        {
          "internalType": "bool[]",
          "name": "visibility",
          "type": "bool[]"
        },
        {
          "internalType": "address",
          "name": "nodeAddress_",
          "type": "address"
        }
      ],
      "name": "addMintingOfferBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenIndex_",
          "type": "uint256"
        }
      ],
      "name": "buyMintingOffer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex_",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIndexes",
          "type": "uint256[]"
        }
      ],
      "name": "buyMintingOfferBatch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        }
      ],
      "name": "getOfferInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc721Address",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nodeAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rangeIndex",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "percentage",
                  "type": "uint256"
                }
              ],
              "internalType": "struct feeSplits[]",
              "name": "fees",
              "type": "tuple[]"
            },
            {
              "internalType": "bool",
              "name": "visible",
              "type": "bool"
            }
          ],
          "internalType": "struct mintingOffer",
          "name": "mintOffer",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rangeStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rangeEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensAllowed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintableTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rangePrice",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "rangeName",
              "type": "string"
            }
          ],
          "internalType": "struct IRAIR721.range",
          "name": "rangeData",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc721Address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        }
      ],
      "name": "getOfferInfoForAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc721Address",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nodeAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rangeIndex",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "percentage",
                  "type": "uint256"
                }
              ],
              "internalType": "struct feeSplits[]",
              "name": "fees",
              "type": "tuple[]"
            },
            {
              "internalType": "bool",
              "name": "visible",
              "type": "bool"
            }
          ],
          "internalType": "struct mintingOffer",
          "name": "mintOffer",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rangeStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rangeEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensAllowed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintableTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rangePrice",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "rangeName",
              "type": "string"
            }
          ],
          "internalType": "struct IRAIR721.range",
          "name": "rangeData",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc721Address",
          "type": "address"
        }
      ],
      "name": "getOffersCountForAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc85ea929a379fed15367474aeccb1efd203948e665d349429266c7dd0c3b7732",
  "receipt": {
    "to": null,
    "from": "0xEC30759D0A3F3CE0A730920DC29d74e441f492C3",
    "contractAddress": "0x4b9c4647B8FE57fda38FD15AeA533cBa5Ae699F5",
    "transactionIndex": 5,
    "gasUsed": "2232466",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x90e10e9fd4922448f88ae2b9559382894625ef7e87b8e428ef02f420a4e0a70c",
    "transactionHash": "0xc85ea929a379fed15367474aeccb1efd203948e665d349429266c7dd0c3b7732",
    "logs": [],
    "blockNumber": 6234664,
    "cumulativeGasUsed": "2518511",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "23b14baf693ec8d2293bc1181475e117",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"rangeName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeSplitsLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"}],\"name\":\"AddedMintingOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"TokenMinted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct feeSplits[]\",\"name\":\"splits\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"visible_\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"nodeAddress_\",\"type\":\"address\"}],\"name\":\"addMintingOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"rangeIndexes\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct feeSplits[]\",\"name\":\"splits\",\"type\":\"tuple[]\"},{\"internalType\":\"bool[]\",\"name\":\"visibility\",\"type\":\"bool[]\"},{\"internalType\":\"address\",\"name\":\"nodeAddress_\",\"type\":\"address\"}],\"name\":\"addMintingOfferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex_\",\"type\":\"uint256\"}],\"name\":\"buyMintingOffer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIndexes\",\"type\":\"uint256[]\"}],\"name\":\"buyMintingOfferBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"}],\"name\":\"getOfferInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct feeSplits[]\",\"name\":\"fees\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"visible\",\"type\":\"bool\"}],\"internalType\":\"struct mintingOffer\",\"name\":\"mintOffer\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rangeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAllowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"rangeName\",\"type\":\"string\"}],\"internalType\":\"struct IRAIR721.range\",\"name\":\"rangeData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"}],\"name\":\"getOfferInfoForAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct feeSplits[]\",\"name\":\"fees\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"visible\",\"type\":\"bool\"}],\"internalType\":\"struct mintingOffer\",\"name\":\"mintOffer\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rangeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAllowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"rangeName\",\"type\":\"string\"}],\"internalType\":\"struct IRAIR721.range\",\"name\":\"rangeData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"}],\"name\":\"getOffersCountForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Marketplace/Facets/MintingOffersFacet.sol\":\"MintingOffersFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/Marketplace/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.11; \\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct feeSplits {\\r\\n\\taddress recipient;\\r\\n\\tuint percentage;\\r\\n}\\r\\n\\r\\nstruct mintingOffer {\\r\\n\\taddress erc721Address;\\r\\n\\taddress nodeAddress;\\r\\n\\tuint rangeIndex;\\r\\n\\tfeeSplits[] fees;\\r\\n\\tbool visible;\\r\\n}\\r\\n\\r\\nstruct RoleData {\\r\\n\\tmapping(address => bool) members;\\r\\n\\tbytes32 adminRole;\\r\\n}\\r\\n\\r\\nstruct AppStorage {\\r\\n\\t// Access Control Enumerable\\r\\n\\tmapping(bytes32 => RoleData) _roles;\\r\\n\\tmapping(bytes32 => EnumerableSet.AddressSet) _roleMembers;\\r\\n\\t// App\\r\\n\\tuint16 decimals;\\r\\n\\tuint decimalPow;\\r\\n\\tuint nodeFee;\\r\\n\\tuint treasuryFee;\\r\\n\\taddress treasuryAddress;\\r\\n\\tmintingOffer[] mintingOffers;\\r\\n\\tmapping(address => mapping(uint => uint)) addressToRangeOffer;\\r\\n\\tmapping(address => uint[]) addressToOffers;\\r\\n\\t// Always add new fields at the end of the struct, that way the structure can be upgraded\\r\\n}\\r\\n\\r\\nlibrary LibAppStorage {\\r\\n\\tfunction diamondStorage() internal pure\\treturns (AppStorage storage ds) {\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tds.slot := 0\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\ncontract AccessControlAppStorageEnumerableMarket is Context {\\r\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\t\\r\\n\\tAppStorage internal s;\\r\\n\\r\\n\\tevent RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\r\\n\\tevent RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    modifier onlyRole(bytes32 role) {\\r\\n        _checkRole(role, _msgSender());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceRole(bytes32 role, address account) public {\\r\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    function grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    function revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    function _checkRole(bytes32 role, address account) internal view {\\r\\n        if (!hasRole(role, account)) {\\r\\n            revert(\\r\\n                string(\\r\\n                    abi.encodePacked(\\r\\n                        \\\"AccessControl: account \\\",\\r\\n                        Strings.toHexString(uint160(account), 20),\\r\\n                        \\\" is missing role \\\",\\r\\n                        Strings.toHexString(uint256(role), 32)\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\tfunction hasRole(bytes32 role, address account) public view returns (bool) {\\r\\n\\t\\treturn s._roles[role].members[account];\\r\\n\\t}\\r\\n\\r\\n\\tfunction getRoleAdmin(bytes32 role) public view returns (bytes32) {\\r\\n\\t\\treturn s._roles[role].adminRole;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\r\\n\\t\\treturn s._roleMembers[role].at(index);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getRoleMemberCount(bytes32 role) public view returns (uint256) {\\r\\n\\t\\treturn s._roleMembers[role].length();\\r\\n\\t}\\r\\n\\r\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\r\\n\\t\\tbytes32 previousAdminRole = getRoleAdmin(role);\\r\\n\\t\\ts._roles[role].adminRole = adminRole;\\r\\n\\t\\temit RoleAdminChanged(role, previousAdminRole, adminRole);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _grantRole(bytes32 role, address account) internal {\\r\\n\\t\\tif (!hasRole(role, account)) {\\r\\n\\t\\t\\ts._roles[role].members[account] = true;\\r\\n\\t\\t\\temit RoleGranted(role, account, _msgSender());\\r\\n\\t\\t\\ts._roleMembers[role].add(account);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _revokeRole(bytes32 role, address account) internal {\\r\\n\\t\\tif (hasRole(role, account)) {\\r\\n\\t\\t\\ts._roles[role].members[account] = false;\\r\\n\\t\\t\\temit RoleRevoked(role, account, _msgSender());\\r\\n\\t\\t\\ts._roleMembers[role].remove(account);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"keccak256\":\"0x805c54a79f89cd673caac9c1c4323513d2d959b432608bd55a482ed993585aee\",\"license\":\"GPL-3.0\"},\"contracts/Marketplace/Facets/MintingOffersFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.11; \\r\\n\\r\\nimport '@openzeppelin/contracts/access/IAccessControl.sol';\\r\\nimport '../AppStorage.sol';\\r\\n\\r\\ninterface IRAIR721 {\\r\\n\\tstruct range {\\r\\n\\t\\tuint rangeStart;\\r\\n\\t\\tuint rangeEnd;\\r\\n\\t\\tuint tokensAllowed;\\r\\n\\t\\tuint mintableTokens;\\r\\n\\t\\tuint lockedTokens;\\r\\n\\t\\tuint rangePrice;\\r\\n\\t\\tstring rangeName;\\r\\n\\t}\\r\\n\\r\\n\\tfunction rangeInfo(uint rangeId) external view returns(range memory data);\\r\\n\\tfunction mintFromRange(address to, uint rangeId, uint indexInRange) external;\\r\\n}\\r\\n\\r\\ncontract MintingOffersFacet is AccessControlAppStorageEnumerableMarket {\\r\\n\\r\\n\\tevent AddedMintingOffer(address erc721Address, uint rangeIndex, string rangeName, uint price, uint feeSplitsLength, uint offerIndex);\\r\\n\\tevent TokenMinted(address erc721Address, uint rangeIndex, uint tokenIndex, address buyer);\\r\\n\\r\\n\\tmodifier checkCreatorRole(address erc721Address) {\\r\\n\\t\\trequire(IAccessControl(erc721Address).hasRole(bytes32(keccak256(\\\"CREATOR\\\")), address(msg.sender)), \\\"Minter Marketplace: Sender isn't the creator of the contract!\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier checkMinterRole(address erc721Address) {\\r\\n\\t\\trequire(hasMinterRole(erc721Address), \\\"Minter Marketplace: This Marketplace isn't a Minter!\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier mintingOfferExists(uint rangeIndex_) {\\r\\n\\t\\trequire(s.mintingOffers.length > rangeIndex_, \\\"Minting Marketplace: Minting Offer doesn't exist\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier offerDoesntExist(address erc721Address, uint rangeIndex) {\\r\\n\\t\\trequire(s.addressToRangeOffer[erc721Address][rangeIndex] == 0, \\\"Minter Marketplace: Range already has an offer\\\");\\r\\n\\t\\tif (s.addressToRangeOffer[erc721Address][rangeIndex] == 0 && s.mintingOffers.length > 0) {\\r\\n\\t\\t\\trequire(s.mintingOffers[0].erc721Address != erc721Address ||\\r\\n\\t\\t\\t\\t\\t\\ts.mintingOffers[0].rangeIndex != rangeIndex,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\\"Minter Marketplace: Range already has an offer\\\");\\r\\n\\t\\t}\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction hasMinterRole(address erc721Address) internal view returns (bool) {\\r\\n\\t\\treturn IAccessControl(erc721Address).hasRole(bytes32(keccak256(\\\"MINTER\\\")), address(this));\\r\\n\\t}\\r\\n\\r\\n\\tfunction getOffersCountForAddress(address erc721Address) public view returns (uint) {\\r\\n\\t\\treturn s.addressToOffers[erc721Address].length;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getOfferInfoForAddress(address erc721Address, uint rangeIndex) public view returns (mintingOffer memory mintOffer, IRAIR721.range memory rangeData) {\\r\\n\\t\\tmintingOffer memory selectedOffer = s.mintingOffers[s.addressToOffers[erc721Address][rangeIndex]];\\r\\n\\t\\treturn (selectedOffer, IRAIR721(selectedOffer.erc721Address).rangeInfo(selectedOffer.rangeIndex));\\r\\n\\t}\\r\\n\\r\\n\\tfunction getOfferInfo(uint offerIndex) public view returns (mintingOffer memory mintOffer, IRAIR721.range memory rangeData) {\\r\\n\\t\\tmintingOffer memory selectedOffer = s.mintingOffers[offerIndex];\\r\\n\\t\\treturn (selectedOffer, IRAIR721(selectedOffer.erc721Address).rangeInfo(selectedOffer.rangeIndex));\\r\\n\\t}\\r\\n\\r\\n\\tfunction addMintingOffer(\\r\\n\\t\\taddress erc721Address_,\\r\\n\\t\\tuint rangeIndex_,\\r\\n\\t\\tfeeSplits[] calldata splits,\\r\\n\\t\\tbool visible_,\\r\\n\\t\\taddress nodeAddress_\\r\\n\\t) external {\\r\\n\\t\\t_addMintingOffer(erc721Address_, rangeIndex_, splits, visible_, nodeAddress_);\\r\\n\\t}\\r\\n\\r\\n\\tfunction addMintingOfferBatch(\\r\\n\\t\\taddress erc721Address_,\\r\\n\\t\\tuint[] calldata rangeIndexes,\\r\\n\\t\\tfeeSplits[] calldata splits,\\r\\n\\t\\tbool[] calldata visibility,\\r\\n\\t\\taddress nodeAddress_\\r\\n\\t) external {\\r\\n\\t\\trequire(rangeIndexes.length == visibility.length, \\\"Minter Marketplace: Arrays should have the same length\\\");\\r\\n\\t\\tfor (uint i = 0; i < rangeIndexes.length; i++) {\\r\\n\\t\\t\\t_addMintingOffer(erc721Address_, rangeIndexes[i], splits, visibility[i], nodeAddress_);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _addMintingOffer(\\r\\n\\t\\taddress erc721Address_,\\r\\n\\t\\tuint rangeIndex_,\\r\\n\\t\\tfeeSplits[] memory splits,\\r\\n\\t\\tbool visible_,\\r\\n\\t\\taddress nodeAddress_\\r\\n\\t) internal checkCreatorRole(erc721Address_) checkMinterRole(erc721Address_) offerDoesntExist(erc721Address_, rangeIndex_) {\\r\\n\\t\\tmintingOffer storage newOffer = s.mintingOffers.push();\\r\\n\\t\\tIRAIR721.range memory rangeData = IRAIR721(erc721Address_).rangeInfo(rangeIndex_);\\r\\n\\t\\trequire(rangeData.mintableTokens > 0, \\\"Minter Marketplace: Offer doesn't have tokens available!\\\");\\r\\n\\t\\tnewOffer.erc721Address = erc721Address_;\\r\\n\\t\\tnewOffer.nodeAddress = nodeAddress_;\\r\\n\\t\\tnewOffer.rangeIndex = rangeIndex_;\\r\\n\\t\\tnewOffer.visible = visible_;\\r\\n\\t\\tuint totalPercentage = s.nodeFee + s.treasuryFee;\\r\\n\\t\\tfor (uint i = 0; i < splits.length; i++) {\\r\\n\\t\\t\\ttotalPercentage += splits[i].percentage;\\r\\n\\t\\t\\tnewOffer.fees.push(splits[i]);\\r\\n\\t\\t}\\r\\n\\t\\trequire(totalPercentage == (100 * s.decimalPow), \\\"Minter Marketplace: Fees don't add up to 100%\\\");\\r\\n\\t\\ts.addressToOffers[erc721Address_].push(s.mintingOffers.length - 1);\\r\\n\\t\\ts.addressToRangeOffer[erc721Address_][rangeIndex_] = s.mintingOffers.length - 1;\\r\\n\\t\\temit AddedMintingOffer(erc721Address_, rangeIndex_, rangeData.rangeName, rangeData.rangePrice, splits.length, s.mintingOffers.length - 1);\\r\\n\\t}\\r\\n\\r\\n\\tfunction buyMintingOffer(uint offerIndex_, uint tokenIndex_) public mintingOfferExists(offerIndex_) payable {\\r\\n\\t\\tmintingOffer storage selectedOffer = s.mintingOffers[offerIndex_];\\r\\n\\t\\trequire(selectedOffer.visible, \\\"Minter Marketplace: This offer is not ready to be sold!\\\");\\r\\n\\t\\trequire(hasMinterRole(selectedOffer.erc721Address), \\\"Minter Marketplace: This Marketplace isn't a Minter!\\\");\\r\\n\\t\\tIRAIR721.range memory rangeData = IRAIR721(selectedOffer.erc721Address).rangeInfo(selectedOffer.rangeIndex);\\r\\n\\t\\trequire(rangeData.rangePrice <= msg.value, \\\"Minter Marketplace: Insufficient funds!\\\");\\r\\n\\t\\tif (msg.value - rangeData.rangePrice > 0) {\\r\\n\\t\\t\\tpayable(msg.sender).transfer(msg.value - rangeData.rangePrice);\\r\\n\\t\\t}\\r\\n\\t\\tuint totalTransferred = rangeData.rangePrice * (s.nodeFee + s.treasuryFee) / (100 * s.decimalPow);\\r\\n\\t\\tpayable(selectedOffer.nodeAddress).transfer(rangeData.rangePrice * s.nodeFee / (100 * s.decimalPow));\\r\\n\\t\\tpayable(s.treasuryAddress).transfer(rangeData.rangePrice * s.treasuryFee / (100 * s.decimalPow));\\r\\n\\t\\tuint auxMoneyToBeSent;\\r\\n\\t\\tfor (uint i = 0; i < selectedOffer.fees.length; i++) {\\r\\n\\t\\t\\tauxMoneyToBeSent = rangeData.rangePrice * selectedOffer.fees[i].percentage / (100 * s.decimalPow);\\r\\n\\t\\t\\ttotalTransferred += auxMoneyToBeSent;\\r\\n\\t\\t\\tpayable(selectedOffer.fees[i].recipient).transfer(auxMoneyToBeSent);\\r\\n\\t\\t}\\r\\n\\t\\trequire(totalTransferred == rangeData.rangePrice, \\\"Minter Marketplace: Error transferring funds!\\\");\\r\\n\\t\\t_buyMintingOffer(selectedOffer.erc721Address, selectedOffer.rangeIndex, tokenIndex_);\\r\\n\\t}\\r\\n\\r\\n\\tfunction buyMintingOfferBatch(uint offerIndex_, uint[] calldata tokenIndexes) external mintingOfferExists(offerIndex_) payable {\\r\\n\\t\\tmintingOffer storage selectedOffer = s.mintingOffers[offerIndex_];\\r\\n\\t\\trequire(selectedOffer.visible, \\\"Minter Marketplace: This offer is not ready to be sold!\\\");\\r\\n\\t\\trequire(hasMinterRole(selectedOffer.erc721Address), \\\"Minter Marketplace: This Marketplace isn't a Minter!\\\");\\r\\n\\t\\tIRAIR721.range memory rangeData = IRAIR721(selectedOffer.erc721Address).rangeInfo(selectedOffer.rangeIndex);\\r\\n\\t\\trequire((rangeData.rangePrice * tokenIndexes.length) <= msg.value, \\\"Minter Marketplace: Insufficient funds!\\\");\\r\\n\\t\\tif (msg.value - (rangeData.rangePrice * tokenIndexes.length) > 0) {\\r\\n\\t\\t\\tpayable(msg.sender).transfer(msg.value - (rangeData.rangePrice * tokenIndexes.length));\\r\\n\\t\\t}\\r\\n\\t\\tuint totalTransferred = (rangeData.rangePrice * tokenIndexes.length) * (s.nodeFee + s.treasuryFee) / (100 * s.decimalPow);\\r\\n\\t\\tpayable(selectedOffer.nodeAddress).transfer((rangeData.rangePrice * tokenIndexes.length) * s.nodeFee / (100 * s.decimalPow));\\r\\n\\t\\tpayable(s.treasuryAddress).transfer((rangeData.rangePrice * tokenIndexes.length) * s.treasuryFee / (100 * s.decimalPow));\\r\\n\\t\\tuint auxMoneyToBeSent;\\r\\n\\t\\tuint i;\\r\\n\\t\\tfor (i = 0; i < selectedOffer.fees.length; i++) {\\r\\n\\t\\t\\tauxMoneyToBeSent = (rangeData.rangePrice * tokenIndexes.length) * selectedOffer.fees[i].percentage / (100 * s.decimalPow);\\r\\n\\t\\t\\ttotalTransferred += auxMoneyToBeSent;\\r\\n\\t\\t\\tpayable(selectedOffer.fees[i].recipient).transfer(auxMoneyToBeSent);\\r\\n\\t\\t}\\r\\n\\t\\trequire(totalTransferred == (rangeData.rangePrice * tokenIndexes.length), \\\"Minter Marketplace: Error transferring funds!\\\");\\r\\n\\t\\tfor (i = 0; i < tokenIndexes.length; i++) {\\r\\n\\t\\t\\t_buyMintingOffer(selectedOffer.erc721Address, selectedOffer.rangeIndex, tokenIndexes[i]);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _buyMintingOffer(address erc721Address, uint rangeIndex, uint tokenIndex) internal {\\r\\n\\t\\tIRAIR721(erc721Address).mintFromRange(msg.sender, rangeIndex, tokenIndex);\\r\\n\\t\\temit TokenMinted(erc721Address, rangeIndex, tokenIndex, msg.sender);\\r\\n\\t}\\r\\n}\",\"keccak256\":\"0x50122cee57e0f53dee4f8d27c398868e1db203ffe814bd4e4b745d56a121942b\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c80639010d07c1161007f578063ba68c57b11610059578063ba68c57b14610263578063ca15c87314610283578063d547741f146102a3578063df275c6a146102c357600080fd5b80639010d07c146101db57806391d14854146102135780639c3ac84b1461024357600080fd5b80632f2ff15d116100bb5780632f2ff15d1461016857806336568abe1461018857806382ec0663146101a85780638b0e2e13146101bb57600080fd5b806308db7184146100e2578063248a9ca3146100f75780632a1da9821461013a575b600080fd5b6100f56100f0366004611d9d565b6102f9565b005b34801561010357600080fd5b50610127610112366004611de9565b60009081526020819052604090206001015490565b6040519081526020015b60405180910390f35b34801561014657600080fd5b5061015a610155366004611de9565b610755565b604051610131929190611eb7565b34801561017457600080fd5b506100f5610183366004611f81565b610918565b34801561019457600080fd5b506100f56101a3366004611f81565b610943565b6100f56101b6366004611fad565b6109c1565b3480156101c757600080fd5b5061015a6101d6366004611fcf565b610d80565b3480156101e757600080fd5b506101fb6101f6366004611fad565b610f78565b6040516001600160a01b039091168152602001610131565b34801561021f57600080fd5b5061023361022e366004611f81565b610f99565b6040519015158152602001610131565b34801561024f57600080fd5b506100f561025e36600461204f565b610fc2565b34801561026f57600080fd5b506100f561027e3660046120ce565b611029565b34801561028f57600080fd5b5061012761029e366004611de9565b611151565b3480156102af57600080fd5b506100f56102be366004611f81565b611168565b3480156102cf57600080fd5b506101276102de366004612189565b6001600160a01b031660009081526009602052604090205490565b600754839081106103255760405162461bcd60e51b815260040161031c906121a4565b60405180910390fd5b600080600701858154811061033c5761033c6121f4565b60009182526020909120600590910201600481015490915060ff166103735760405162461bcd60e51b815260040161031c9061220a565b8054610387906001600160a01b031661118e565b6103a35760405162461bcd60e51b815260040161031c90612267565b805460028201546040516364cc98df60e11b815260048101919091526000916001600160a01b03169063c99931be90602401600060405180830381865afa1580156103f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261041a9190810190612382565b60a0810151909150349061042f908690612441565b111561044d5760405162461bcd60e51b815260040161031c90612460565b60a0810151600090610460908690612441565b61046a90346124a7565b11156104ba5760a081015133906108fc90610486908790612441565b61049090346124a7565b6040518115909202916000818181858888f193505050501580156104b8573d6000803e3d6000fd5b505b6003546000906104cb906064612441565b6005546004546104db91906124be565b60a08401516104eb908890612441565b6104f59190612441565b6104ff91906124d6565b60018401546003549192506001600160a01b0316906108fc90610523906064612441565b60045460a0860151610536908a90612441565b6105409190612441565b61054a91906124d6565b6040518115909202916000818181858888f19350505050158015610572573d6000803e3d6000fd5b506006546003546001600160a01b03909116906108fc90610594906064612441565b60055460a08601516105a7908a90612441565b6105b19190612441565b6105bb91906124d6565b6040518115909202916000818181858888f193505050501580156105e3573d6000803e3d6000fd5b506000805b60038501548110156106cb57600354610602906064612441565b856003018281548110610617576106176121f4565b906000526020600020906002020160010154898990508660a0015161063c9190612441565b6106469190612441565b61065091906124d6565b915061065c82846124be565b9250846003018181548110610673576106736121f4565b600091825260208220600290910201546040516001600160a01b039091169184156108fc02918591818181858888f193505050501580156106b8573d6000803e3d6000fd5b50806106c3816124f8565b9150506105e8565b60a08401516106db908890612441565b83146106f95760405162461bcd60e51b815260040161031c90612513565b5060005b8681101561074a5784546002860154610738916001600160a01b0316908a8a8581811061072c5761072c6121f4565b9050602002013561121f565b80610742816124f8565b9150506106fd565b505050505050505050565b6040805160a08101825260008082526020820181905291810182905260608082015260808101919091526107bf6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b60008060070184815481106107d6576107d66121f4565b600091825260208083206040805160a081018252600590940290910180546001600160a01b039081168552600182015416848401526002810154848301526003810180548351818602810186019094528084529495919460608701949192909184015b82821015610881576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101610839565b5050509082525060049182015460ff161515602090910152815160408084015190516364cc98df60e11b81529283015291925082916001600160a01b03169063c99931be90602401600060405180830381865afa1580156108e6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261090e9190810190612382565b9250925050915091565b60008281526020819052604090206001015461093481336112dc565b61093e8383611340565b505050565b6001600160a01b03811633146109b35760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161031c565b6109bd82826113d8565b5050565b600754829081106109e45760405162461bcd60e51b815260040161031c906121a4565b60008060070184815481106109fb576109fb6121f4565b60009182526020909120600590910201600481015490915060ff16610a325760405162461bcd60e51b815260040161031c9061220a565b8054610a46906001600160a01b031661118e565b610a625760405162461bcd60e51b815260040161031c90612267565b805460028201546040516364cc98df60e11b815260048101919091526000916001600160a01b03169063c99931be90602401600060405180830381865afa158015610ab1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ad99190810190612382565b9050348160a001511115610aff5760405162461bcd60e51b815260040161031c90612460565b60008160a0015134610b1191906124a7565b1115610b565760a081015133906108fc90610b2c90346124a7565b6040518115909202916000818181858888f19350505050158015610b54573d6000803e3d6000fd5b505b600354600090610b67906064612441565b600554600454610b7791906124be565b8360a00151610b869190612441565b610b9091906124d6565b60018401546003549192506001600160a01b0316906108fc90610bb4906064612441565b60045460a0860151610bc69190612441565b610bd091906124d6565b6040518115909202916000818181858888f19350505050158015610bf8573d6000803e3d6000fd5b506006546003546001600160a01b03909116906108fc90610c1a906064612441565b60055460a0860151610c2c9190612441565b610c3691906124d6565b6040518115909202916000818181858888f19350505050158015610c5e573d6000803e3d6000fd5b506000805b6003850154811015610d3857600354610c7d906064612441565b856003018281548110610c9257610c926121f4565b9060005260206000209060020201600101548560a00151610cb39190612441565b610cbd91906124d6565b9150610cc982846124be565b9250846003018181548110610ce057610ce06121f4565b600091825260208220600290910201546040516001600160a01b039091169184156108fc02918591818181858888f19350505050158015610d25573d6000803e3d6000fd5b5080610d30816124f8565b915050610c63565b508260a001518214610d5c5760405162461bcd60e51b815260040161031c90612513565b83546002850154610d77916001600160a01b0316908861121f565b50505050505050565b6040805160a0810182526000808252602082018190529181018290526060808201526080810191909152610dea6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b6001600160a01b038416600090815260096020526040812080546007919086908110610e1857610e186121f4565b906000526020600020015481548110610e3357610e336121f4565b600091825260208083206040805160a081018252600590940290910180546001600160a01b039081168552600182015416848401526002810154848301526003810180548351818602810186019094528084529495919460608701949192909184015b82821015610ede576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101610e96565b5050509082525060049182015460ff161515602090910152815160408084015190516364cc98df60e11b81529283015291925082916001600160a01b03169063c99931be90602401600060405180830381865afa158015610f43573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f6b9190810190612382565b92509250505b9250929050565b6000828152600160205260408120610f909083611451565b90505b92915050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61102186868686808060200260200160405190810160405280939291908181526020016000905b828210156110155761100660408302860136819003810190612560565b81526020019060010190610fe9565b5050505050858561145d565b505050505050565b8582146110975760405162461bcd60e51b815260206004820152603660248201527f4d696e746572204d61726b6574706c6163653a204172726179732073686f756c6044820152750c840d0c2ecca40e8d0ca40e6c2daca40d8cadccee8d60531b606482015260840161031c565b60005b8681101561074a5761113f898989848181106110b8576110b86121f4565b905060200201358888808060200260200160405190810160405280939291908181526020016000905b8282101561110d576110fe60408302860136819003810190612560565b815260200190600101906110e1565b5050505050878786818110611124576111246121f4565b905060200201602081019061113991906125b7565b8661145d565b80611149816124f8565b91505061109a565b6000818152600160205260408120610f9390611a1c565b60008281526020819052604090206001015461118481336112dc565b61093e83836113d8565b604051632474521560e21b81527ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc960048201523060248201526000906001600160a01b038316906391d1485490604401602060405180830381865afa1580156111fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9391906125d4565b60405163e766224360e01b815233600482015260248101839052604481018290526001600160a01b0384169063e766224390606401600060405180830381600087803b15801561126e57600080fd5b505af1158015611282573d6000803e3d6000fd5b5050604080516001600160a01b0387168152602081018690529081018490523360608201527f6a1a369ef3c3eebe428c993f6eb79fb1438544741070bc7a4388c801fa08463d9250608001905060405180910390a1505050565b6112e68282610f99565b6109bd576112fe816001600160a01b03166014611a26565b611309836020611a26565b60405160200161131a9291906125f1565b60408051601f198184030181529082905262461bcd60e51b825261031c91600401612666565b61134a8282610f99565b6109bd576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556113803390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600082815260016020526040902061093e9082611bc2565b6113e28282610f99565b156109bd576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4600082815260016020526040902061093e9082611bd7565b6000610f908383611bec565b604051632474521560e21b81527f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db6600482015233602482015285906001600160a01b038216906391d1485490604401602060405180830381865afa1580156114c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ed91906125d4565b61155f5760405162461bcd60e51b815260206004820152603d60248201527f4d696e746572204d61726b6574706c6163653a2053656e6465722069736e277460448201527f207468652063726561746f72206f662074686520636f6e747261637421000000606482015260840161031c565b856115698161118e565b6115855760405162461bcd60e51b815260040161031c90612267565b6001600160a01b038716600090815260086020908152604080832089845290915290205487908790156115ca5760405162461bcd60e51b815260040161031c90612679565b6001600160a01b03821660009081526008602090815260408083208484529091529020541580156115fc575060075415155b1561168d57816001600160a01b03166000600701600081548110611622576116226121f4565b60009182526020909120600590910201546001600160a01b0316141580611671575080600060070160008154811061165c5761165c6121f4565b90600052602060002090600502016002015414155b61168d5760405162461bcd60e51b815260040161031c90612679565b6007805460018101825560009182526040516364cc98df60e11b815260059091027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880191906001600160a01b038c169063c99931be906116f5908d9060040190815260200190565b600060405180830381865afa158015611712573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261173a9190810190612382565b905060008160600151116117b65760405162461bcd60e51b815260206004820152603860248201527f4d696e746572204d61726b6574706c6163653a204f6666657220646f65736e2760448201527f74206861766520746f6b656e7320617661696c61626c65210000000000000000606482015260840161031c565b81546001600160a01b03808d166001600160a01b0319928316178455600184018054918a1691909216179055600282018a9055600480830180548a151560ff19909116179055600554905460009161180d916124be565b905060005b8a518110156118b7578a818151811061182d5761182d6121f4565b6020026020010151602001518261184491906124be565b9150836003018b828151811061185c5761185c6121f4565b602090810291909101810151825460018082018555600094855293839020825160029092020180546001600160a01b0319166001600160a01b03909216919091178155910151910155806118af816124f8565b915050611812565b506003546118c6906064612441565b811461192a5760405162461bcd60e51b815260206004820152602d60248201527f4d696e746572204d61726b6574706c6163653a204665657320646f6e2774206160448201526c646420757020746f203130302560981b606482015260840161031c565b6001600160a01b038c166000908152600960205260409020600754611951906001906124a7565b81546001818101845560009384526020909320015560075461197391906124a7565b600060080160008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d8152602001908152602001600020819055507f26d54df15e8a0d68fa0ae9702cf190da88a0e1d48b0ed4c6b1099610b292f5f78c8c8460c001518560a001518e5160016000600701805490506119f491906124a7565b604051611a06969594939291906126c7565b60405180910390a1505050505050505050505050565b6000610f93825490565b60606000611a35836002612441565b611a409060026124be565b67ffffffffffffffff811115611a5857611a586122bb565b6040519080825280601f01601f191660200182016040528015611a82576020820181803683370190505b509050600360fc1b81600081518110611a9d57611a9d6121f4565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611acc57611acc6121f4565b60200101906001600160f81b031916908160001a9053506000611af0846002612441565b611afb9060016124be565b90505b6001811115611b73576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611b2f57611b2f6121f4565b1a60f81b828281518110611b4557611b456121f4565b60200101906001600160f81b031916908160001a90535060049490941c93611b6c8161270c565b9050611afe565b508315610f905760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161031c565b6000610f90836001600160a01b038416611c16565b6000610f90836001600160a01b038416611c65565b6000826000018281548110611c0357611c036121f4565b9060005260206000200154905092915050565b6000818152600183016020526040812054611c5d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610f93565b506000610f93565b60008181526001830160205260408120548015611d4e576000611c896001836124a7565b8554909150600090611c9d906001906124a7565b9050818114611d02576000866000018281548110611cbd57611cbd6121f4565b9060005260206000200154905080876000018481548110611ce057611ce06121f4565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611d1357611d13612723565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610f93565b6000915050610f93565b60008083601f840112611d6a57600080fd5b50813567ffffffffffffffff811115611d8257600080fd5b6020830191508360208260051b8501011115610f7157600080fd5b600080600060408486031215611db257600080fd5b83359250602084013567ffffffffffffffff811115611dd057600080fd5b611ddc86828701611d58565b9497909650939450505050565b600060208284031215611dfb57600080fd5b5035919050565b60005b83811015611e1d578181015183820152602001611e05565b83811115611e2c576000848401525b50505050565b60008151808452611e4a816020860160208601611e02565b601f01601f19169290920160200192915050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a0830152600060c082015160e060c0850152611eaf60e0850182611e32565b949350505050565b604080825283516001600160a01b0390811683830152602080860151821660608086019190915286840151608086015286015160a080860152805160e0860181905260009493918301929085906101008801905b80831015611f3657855180518616835284015184830152948301946001929092019190860190611f0b565b5060808a015180151560c08a0152955087810383890152611f57818a611e5e565b9a9950505050505050505050565b80356001600160a01b0381168114611f7c57600080fd5b919050565b60008060408385031215611f9457600080fd5b82359150611fa460208401611f65565b90509250929050565b60008060408385031215611fc057600080fd5b50508035926020909101359150565b60008060408385031215611fe257600080fd5b611feb83611f65565b946020939093013593505050565b60008083601f84011261200b57600080fd5b50813567ffffffffffffffff81111561202357600080fd5b6020830191508360208260061b8501011115610f7157600080fd5b801515811461204c57600080fd5b50565b60008060008060008060a0878903121561206857600080fd5b61207187611f65565b955060208701359450604087013567ffffffffffffffff81111561209457600080fd5b6120a089828a01611ff9565b90955093505060608701356120b48161203e565b91506120c260808801611f65565b90509295509295509295565b60008060008060008060008060a0898b0312156120ea57600080fd5b6120f389611f65565b9750602089013567ffffffffffffffff8082111561211057600080fd5b61211c8c838d01611d58565b909950975060408b013591508082111561213557600080fd5b6121418c838d01611ff9565b909750955060608b013591508082111561215a57600080fd5b506121678b828c01611d58565b909450925061217a905060808a01611f65565b90509295985092959890939650565b60006020828403121561219b57600080fd5b610f9082611f65565b60208082526030908201527f4d696e74696e67204d61726b6574706c6163653a204d696e74696e67204f666660408201526f195c88191bd95cdb89dd08195e1a5cdd60821b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60208082526037908201527f4d696e746572204d61726b6574706c6163653a2054686973206f66666572206960408201527f73206e6f7420726561647920746f20626520736f6c6421000000000000000000606082015260800190565b60208082526034908201527f4d696e746572204d61726b6574706c6163653a2054686973204d61726b6574706040820152736c6163652069736e27742061204d696e7465722160601b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156122f4576122f46122bb565b60405290565b600082601f83011261230b57600080fd5b815167ffffffffffffffff80821115612326576123266122bb565b604051601f8301601f19908116603f0116810190828211818310171561234e5761234e6122bb565b8160405283815286602085880101111561236757600080fd5b612378846020830160208901611e02565b9695505050505050565b60006020828403121561239457600080fd5b815167ffffffffffffffff808211156123ac57600080fd5b9083019060e082860312156123c057600080fd5b6123c86122d1565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c08301518281111561241057600080fd5b61241c878286016122fa565b60c08301525095945050505050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561245b5761245b61242b565b500290565b60208082526027908201527f4d696e746572204d61726b6574706c6163653a20496e73756666696369656e746040820152662066756e64732160c81b606082015260800190565b6000828210156124b9576124b961242b565b500390565b600082198211156124d1576124d161242b565b500190565b6000826124f357634e487b7160e01b600052601260045260246000fd5b500490565b600060001982141561250c5761250c61242b565b5060010190565b6020808252602d908201527f4d696e746572204d61726b6574706c6163653a204572726f72207472616e736660408201526c657272696e672066756e64732160981b606082015260800190565b60006040828403121561257257600080fd5b6040516040810181811067ffffffffffffffff82111715612595576125956122bb565b6040526125a183611f65565b8152602083013560208201528091505092915050565b6000602082840312156125c957600080fd5b8135610f908161203e565b6000602082840312156125e657600080fd5b8151610f908161203e565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612629816017850160208801611e02565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161265a816028840160208801611e02565b01602801949350505050565b602081526000610f906020830184611e32565b6020808252602e908201527f4d696e746572204d61726b6574706c6163653a2052616e676520616c7265616460408201526d3c903430b99030b71037b33332b960911b606082015260800190565b60018060a01b038716815285602082015260c0604082015260006126ee60c0830187611e32565b606083019590955250608081019290925260a0909101529392505050565b60008161271b5761271b61242b565b506000190190565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220ce3f1738349faa271a9d123aacd3ae41d96aae6a90d831bb56295bffe9bee89e64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3551,
        "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)3533_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(feeSplits)3477_storage)dyn_storage": {
        "base": "t_struct(feeSplits)3477_storage",
        "encoding": "dynamic_array",
        "label": "struct feeSplits[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(mintingOffer)3490_storage)dyn_storage": {
        "base": "t_struct(mintingOffer)3490_storage",
        "encoding": "dynamic_array",
        "label": "struct mintingOffer[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2428_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2428_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)3497_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)3497_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2428_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2427,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2127_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AppStorage)3533_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 3502,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "_roles",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)3497_storage)"
          },
          {
            "astId": 3507,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "_roleMembers",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2428_storage)"
          },
          {
            "astId": 3509,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "decimals",
            "offset": 0,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 3511,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "decimalPow",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3513,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "nodeFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3515,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "treasuryFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3517,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 3521,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "mintingOffers",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(mintingOffer)3490_storage)dyn_storage"
          },
          {
            "astId": 3527,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "addressToRangeOffer",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 3532,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "addressToOffers",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(RoleData)3497_storage": {
        "encoding": "inplace",
        "label": "struct RoleData",
        "members": [
          {
            "astId": 3494,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 3496,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2127_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2122,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2126,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(feeSplits)3477_storage": {
        "encoding": "inplace",
        "label": "struct feeSplits",
        "members": [
          {
            "astId": 3474,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3476,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "percentage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(mintingOffer)3490_storage": {
        "encoding": "inplace",
        "label": "struct mintingOffer",
        "members": [
          {
            "astId": 3479,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "erc721Address",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3481,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "nodeAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3483,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "rangeIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3487,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "fees",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_struct(feeSplits)3477_storage)dyn_storage"
          },
          {
            "astId": 3489,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "visible",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}