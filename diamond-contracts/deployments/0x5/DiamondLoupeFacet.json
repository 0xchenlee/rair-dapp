{
  "address": "0xeef47E293D01Ce29E91707ED2fe8E9b8e3fe75D1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_functionSelector",
          "type": "bytes4"
        }
      ],
      "name": "facetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "facetAddress_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facetAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "facetAddresses_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_facet",
          "type": "address"
        }
      ],
      "name": "facetFunctionSelectors",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "_facetFunctionSelectors",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondLoupe.Facet[]",
          "name": "facets_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2f2b63070ca1c29f075f55d89c6a1561a9fb2046888bf99a8f8cd354a5f2aba7",
  "receipt": {
    "to": null,
    "from": "0xEC30759D0A3F3CE0A730920DC29d74e441f492C3",
    "contractAddress": "0xeef47E293D01Ce29E91707ED2fe8E9b8e3fe75D1",
    "transactionIndex": 2,
    "gasUsed": "674650",
    "logsBloom": "0x
    "blockHash": "0x0f72f437e60576cd847f0be9eb071d046762038dffc54a36907e2878ae430e98",
    "transactionHash": "0x2f2b63070ca1c29f075f55d89c6a1561a9fb2046888bf99a8f8cd354a5f2aba7",
    "logs": [],
    "blockNumber": 6194032,
    "cumulativeGasUsed": "5929633",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8e65d135f0f1a9a15bd5e211a01c65ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facetAddress_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"facetAddresses_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"_facetFunctionSelectors\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondLoupe.Facet[]\",\"name\":\"facets_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"facetAddress(bytes4)\":{\"details\":\"If facet is not found return address(0).\",\"params\":{\"_functionSelector\":\"The function selector.\"},\"returns\":{\"facetAddress_\":\"The facet address.\"}},\"facetAddresses()\":{\"returns\":{\"facetAddresses_\":\"facetAddresses_\"}},\"facetFunctionSelectors(address)\":{\"params\":{\"_facet\":\"The facet address.\"},\"returns\":{\"_facetFunctionSelectors\":\"The selectors associated with a facet address.\"}},\"facets()\":{\"returns\":{\"facets_\":\"Facet\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"facetAddress(bytes4)\":{\"notice\":\"Gets the facet that supports the given selector.\"},\"facetAddresses()\":{\"notice\":\"Get all the facet addresses used by a diamond.\"},\"facetFunctionSelectors(address)\":{\"notice\":\"Gets all the function selectors supported by a specific facet.\"},\"facets()\":{\"notice\":\"Gets all facets and their selectors.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/diamondStandard/facets/DiamondLoupeFacet.sol\":\"DiamondLoupeFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/diamondStandard/facets/DiamondLoupeFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\nimport { LibDiamond } from  \\\"../libraries/LibDiamond.sol\\\";\\r\\nimport { IDiamondLoupe } from \\\"../interfaces/IDiamondLoupe.sol\\\";\\r\\nimport { IERC165 } from \\\"../interfaces/IERC165.sol\\\";\\r\\n\\r\\ncontract DiamondLoupeFacet is IDiamondLoupe, IERC165 {\\r\\n    // Diamond Loupe Functions\\r\\n    ////////////////////////////////////////////////////////////////////\\r\\n    /// These functions are expected to be called frequently by tools.\\r\\n    //\\r\\n    // struct Facet {\\r\\n    //     address facetAddress;\\r\\n    //     bytes4[] functionSelectors;\\r\\n    // }\\r\\n    /// @notice Gets all facets and their selectors.\\r\\n    /// @return facets_ Facet\\r\\n    function facets() external override view returns (Facet[] memory facets_) {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        facets_ = new Facet[](ds.selectorCount);\\r\\n        uint8[] memory numFacetSelectors = new uint8[](ds.selectorCount);\\r\\n        uint256 numFacets;\\r\\n        uint256 selectorIndex;\\r\\n        // loop through function selectors\\r\\n        for (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\r\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\r\\n            for (uint256 selectorSlotIndex; selectorSlotIndex < 8; selectorSlotIndex++) {\\r\\n                selectorIndex++;\\r\\n                if (selectorIndex > ds.selectorCount) {\\r\\n                    break;\\r\\n                }\\r\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\r\\n                address facetAddress_ = address(bytes20(ds.facets[selector]));\\r\\n                bool continueLoop = false;\\r\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\r\\n                    if (facets_[facetIndex].facetAddress == facetAddress_) {\\r\\n                        facets_[facetIndex].functionSelectors[numFacetSelectors[facetIndex]] = selector;\\r\\n                        // probably will never have more than 256 functions from one facet contract\\r\\n                        require(numFacetSelectors[facetIndex] < 255);\\r\\n                        numFacetSelectors[facetIndex]++;\\r\\n                        continueLoop = true;\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n                if (continueLoop) {\\r\\n                    continueLoop = false;\\r\\n                    continue;\\r\\n                }\\r\\n                facets_[numFacets].facetAddress = facetAddress_;\\r\\n                facets_[numFacets].functionSelectors = new bytes4[](ds.selectorCount);\\r\\n                facets_[numFacets].functionSelectors[0] = selector;\\r\\n                numFacetSelectors[numFacets] = 1;\\r\\n                numFacets++;\\r\\n            }\\r\\n        }\\r\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\r\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\r\\n            bytes4[] memory selectors = facets_[facetIndex].functionSelectors;\\r\\n            // setting the number of selectors\\r\\n            assembly {\\r\\n                mstore(selectors, numSelectors)\\r\\n            }\\r\\n        }\\r\\n        // setting the number of facets\\r\\n        assembly {\\r\\n            mstore(facets_, numFacets)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Gets all the function selectors supported by a specific facet.\\r\\n    /// @param _facet The facet address.\\r\\n    /// @return _facetFunctionSelectors The selectors associated with a facet address.\\r\\n    function facetFunctionSelectors(address _facet) external override view returns (bytes4[] memory _facetFunctionSelectors) {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        uint256 numSelectors;\\r\\n        _facetFunctionSelectors = new bytes4[](ds.selectorCount);\\r\\n        uint256 selectorIndex;\\r\\n        // loop through function selectors\\r\\n        for (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\r\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\r\\n            for (uint256 selectorSlotIndex; selectorSlotIndex < 8; selectorSlotIndex++) {\\r\\n                selectorIndex++;\\r\\n                if (selectorIndex > ds.selectorCount) {\\r\\n                    break;\\r\\n                }\\r\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\r\\n                address facet = address(bytes20(ds.facets[selector]));\\r\\n                if (_facet == facet) {\\r\\n                    _facetFunctionSelectors[numSelectors] = selector;\\r\\n                    numSelectors++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // Set the number of selectors in the array\\r\\n        assembly {\\r\\n            mstore(_facetFunctionSelectors, numSelectors)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Get all the facet addresses used by a diamond.\\r\\n    /// @return facetAddresses_\\r\\n    function facetAddresses() external override view returns (address[] memory facetAddresses_) {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        facetAddresses_ = new address[](ds.selectorCount);\\r\\n        uint256 numFacets;\\r\\n        uint256 selectorIndex;\\r\\n        // loop through function selectors\\r\\n        for (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\r\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\r\\n            for (uint256 selectorSlotIndex; selectorSlotIndex < 8; selectorSlotIndex++) {\\r\\n                selectorIndex++;\\r\\n                if (selectorIndex > ds.selectorCount) {\\r\\n                    break;\\r\\n                }\\r\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\r\\n                address facetAddress_ = address(bytes20(ds.facets[selector]));\\r\\n                bool continueLoop = false;\\r\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\r\\n                    if (facetAddress_ == facetAddresses_[facetIndex]) {\\r\\n                        continueLoop = true;\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n                if (continueLoop) {\\r\\n                    continueLoop = false;\\r\\n                    continue;\\r\\n                }\\r\\n                facetAddresses_[numFacets] = facetAddress_;\\r\\n                numFacets++;\\r\\n            }\\r\\n        }\\r\\n        // Set the number of facet addresses in the array\\r\\n        assembly {\\r\\n            mstore(facetAddresses_, numFacets)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the facet that supports the given selector.\\r\\n    /// @dev If facet is not found return address(0).\\r\\n    /// @param _functionSelector The function selector.\\r\\n    /// @return facetAddress_ The facet address.\\r\\n    function facetAddress(bytes4 _functionSelector) external override view returns (address facetAddress_) {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        facetAddress_ = address(bytes20(ds.facets[_functionSelector]));\\r\\n    }\\r\\n\\r\\n    // This implements ERC-165.\\r\\n    function supportsInterface(bytes4 _interfaceId) external override view returns (bool) {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        return ds.supportedInterfaces[_interfaceId];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9cd0fee4489a8efd88f9a1f3032364aee4f6f5089e602c8df2ed15354a03cd3f\",\"license\":\"MIT\"},\"contracts/diamondStandard/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n}\\r\\n\",\"keccak256\":\"0x9875549c8bbc63ea8fcd713805d48fa78762f7d90ba524a44b389ff4a1704ed2\",\"license\":\"MIT\"},\"contracts/diamondStandard/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\n// A loupe is a small magnifying glass used to look at diamonds.\\r\\n// These functions look at diamonds\\r\\ninterface IDiamondLoupe {\\r\\n    /// These functions are expected to be called frequently\\r\\n    /// by tools.\\r\\n\\r\\n    struct Facet {\\r\\n        address facetAddress;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\r\\n    /// @return facets_ Facet\\r\\n    function facets() external view returns (Facet[] memory facets_);\\r\\n\\r\\n    /// @notice Gets all the function selectors supported by a specific facet.\\r\\n    /// @param _facet The facet address.\\r\\n    /// @return facetFunctionSelectors_\\r\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\r\\n\\r\\n    /// @notice Get all the facet addresses used by a diamond.\\r\\n    /// @return facetAddresses_\\r\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\r\\n\\r\\n    /// @notice Gets the facet that supports the given selector.\\r\\n    /// @dev If facet is not found return address(0).\\r\\n    /// @param _functionSelector The function selector.\\r\\n    /// @return facetAddress_ The facet address.\\r\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\r\\n}\\r\\n\",\"keccak256\":\"0x2e3699584683471d7411a5986ab204dfdb9754c6c9fb5e5716d0831a8b7c0060\",\"license\":\"MIT\"},\"contracts/diamondStandard/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC165 {\\r\\n    /// @notice Query if a contract implements an interface\\r\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\r\\n    /// @dev Interface identification is specified in ERC-165. This function\\r\\n    ///  uses less than 30,000 gas.\\r\\n    /// @return `true` if the contract implements `interfaceID` and\\r\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x2deeed007d7ea76735bf06eefa327e2a2a37c3b2690619d57a91401f3382300b\",\"license\":\"MIT\"},\"contracts/diamondStandard/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\r\\n\\r\\nlibrary LibDiamond {\\r\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\r\\n\\r\\n    struct DiamondStorage {\\r\\n        // maps function selectors to the facets that execute the functions.\\r\\n        // and maps the selectors to their position in the selectorSlots array.\\r\\n        // func selector => address facet, selector position\\r\\n        mapping(bytes4 => bytes32) facets;\\r\\n        // array of slots of function selectors.\\r\\n        // each slot holds 8 function selectors.\\r\\n        mapping(uint256 => bytes32) selectorSlots;\\r\\n        // The number of function selectors in selectorSlots\\r\\n        uint16 selectorCount;\\r\\n        // Used to query if a contract implements an interface.\\r\\n        // Used to implement ERC-165.\\r\\n        mapping(bytes4 => bool) supportedInterfaces;\\r\\n        // owner of the contract\\r\\n        address contractOwner;\\r\\n    }\\r\\n\\r\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    function setContractOwner(address _newOwner) internal {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        address previousOwner = ds.contractOwner;\\r\\n        ds.contractOwner = _newOwner;\\r\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\r\\n    }\\r\\n\\r\\n    function contractOwner() internal view returns (address contractOwner_) {\\r\\n        contractOwner_ = diamondStorage().contractOwner;\\r\\n    }\\r\\n\\r\\n    function enforceIsContractOwner() internal view {\\r\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\r\\n    }\\r\\n\\r\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n\\r\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\r\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\r\\n\\r\\n    // Internal function version of diamondCut\\r\\n    // This code is almost the same as the external diamondCut,\\r\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\r\\n    // 'Facet[] calldata _diamondCut'.\\r\\n    // The code is duplicated to prevent copying calldata to memory which\\r\\n    // causes an error for a two dimensional array.\\r\\n    function diamondCut(\\r\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\r\\n        address _init,\\r\\n        bytes memory _calldata\\r\\n    ) internal {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        uint256 originalSelectorCount = ds.selectorCount;\\r\\n        uint256 selectorCount = originalSelectorCount;\\r\\n        bytes32 selectorSlot;\\r\\n        // Check if last selector slot is not full\\r\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\r\\n        if (selectorCount & 7 > 0) {\\r\\n            // get last selectorSlot\\r\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\r\\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\\r\\n        }\\r\\n        // loop through diamond cut\\r\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\r\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\r\\n                selectorCount,\\r\\n                selectorSlot,\\r\\n                _diamondCut[facetIndex].facetAddress,\\r\\n                _diamondCut[facetIndex].action,\\r\\n                _diamondCut[facetIndex].functionSelectors\\r\\n            );\\r\\n        }\\r\\n        if (selectorCount != originalSelectorCount) {\\r\\n            ds.selectorCount = uint16(selectorCount);\\r\\n        }\\r\\n        // If last selector slot is not full\\r\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\r\\n        if (selectorCount & 7 > 0) {\\r\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\r\\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\r\\n        }\\r\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\r\\n        initializeDiamondCut(_init, _calldata);\\r\\n    }\\r\\n\\r\\n    function addReplaceRemoveFacetSelectors(\\r\\n        uint256 _selectorCount,\\r\\n        bytes32 _selectorSlot,\\r\\n        address _newFacetAddress,\\r\\n        IDiamondCut.FacetCutAction _action,\\r\\n        bytes4[] memory _selectors\\r\\n    ) internal returns (uint256, bytes32) {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\r\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\r\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\r\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\r\\n                bytes4 selector = _selectors[selectorIndex];\\r\\n                bytes32 oldFacet = ds.facets[selector];\\r\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\r\\n                // add facet for selector\\r\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\r\\n                // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\r\\n                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\r\\n                // clear selector position in slot and add selector\\r\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\r\\n                // if slot is full then write it to storage\\r\\n                if (selectorInSlotPosition == 224) {\\r\\n                    // \\\"_selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"_selectorSlot / 8\\\"\\r\\n                    ds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\r\\n                    _selectorSlot = 0;\\r\\n                }\\r\\n                _selectorCount++;\\r\\n            }\\r\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\r\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\r\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\r\\n                bytes4 selector = _selectors[selectorIndex];\\r\\n                bytes32 oldFacet = ds.facets[selector];\\r\\n                address oldFacetAddress = address(bytes20(oldFacet));\\r\\n                // only useful if immutable functions exist\\r\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\r\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\r\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\r\\n                // replace old facet address\\r\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\r\\n            }\\r\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\r\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\r\\n            // \\\"_selectorCount >> 3\\\" is a gas efficient division by 8 \\\"_selectorCount / 8\\\"\\r\\n            uint256 selectorSlotCount = _selectorCount >> 3;\\r\\n            // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\r\\n            uint256 selectorInSlotIndex = _selectorCount & 7;\\r\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\r\\n                if (_selectorSlot == 0) {\\r\\n                    // get last selectorSlot\\r\\n                    selectorSlotCount--;\\r\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\r\\n                    selectorInSlotIndex = 7;\\r\\n                } else {\\r\\n                    selectorInSlotIndex--;\\r\\n                }\\r\\n                bytes4 lastSelector;\\r\\n                uint256 oldSelectorsSlotCount;\\r\\n                uint256 oldSelectorInSlotPosition;\\r\\n                // adding a block here prevents stack too deep error\\r\\n                {\\r\\n                    bytes4 selector = _selectors[selectorIndex];\\r\\n                    bytes32 oldFacet = ds.facets[selector];\\r\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\r\\n                    // only useful if immutable functions exist\\r\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\r\\n                    // replace selector with last selector in ds.facets\\r\\n                    // gets the last selector\\r\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\r\\n                    if (lastSelector != selector) {\\r\\n                        // update last selector slot position info\\r\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\r\\n                    }\\r\\n                    delete ds.facets[selector];\\r\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\r\\n                    // \\\"oldSelectorCount >> 3\\\" is a gas efficient division by 8 \\\"oldSelectorCount / 8\\\"\\r\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\r\\n                    // \\\"oldSelectorCount & 7\\\" is a gas efficient modulo by eight \\\"oldSelectorCount % 8\\\" \\r\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\r\\n                }\\r\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\r\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\r\\n                    // clears the selector we are deleting and puts the last selector in its place.\\r\\n                    oldSelectorSlot =\\r\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\r\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\r\\n                    // update storage with the modified slot\\r\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\r\\n                } else {\\r\\n                    // clears the selector we are deleting and puts the last selector in its place.\\r\\n                    _selectorSlot =\\r\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\r\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\r\\n                }\\r\\n                if (selectorInSlotIndex == 0) {\\r\\n                    delete ds.selectorSlots[selectorSlotCount];\\r\\n                    _selectorSlot = 0;\\r\\n                }\\r\\n            }\\r\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\r\\n        } else {\\r\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\r\\n        }\\r\\n        return (_selectorCount, _selectorSlot);\\r\\n    }\\r\\n\\r\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\r\\n        if (_init == address(0)) {\\r\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\r\\n        } else {\\r\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\r\\n            if (_init != address(this)) {\\r\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\r\\n            }\\r\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\r\\n            if (!success) {\\r\\n                if (error.length > 0) {\\r\\n                    // bubble up the error\\r\\n                    revert(string(error));\\r\\n                } else {\\r\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\r\\n        uint256 contractSize;\\r\\n        assembly {\\r\\n            contractSize := extcodesize(_contract)\\r\\n        }\\r\\n        require(contractSize > 0, _errorMessage);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe677edcb97d8b558e0d27ac4f6b3723688180455abb3f6ac6dc0deb250f69b41\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610b3d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806301ffc9a71461005c57806352ef6b2c146100bd5780637a0ed627146100d2578063adfca15e146100e7578063cdffacc614610107575b600080fd5b6100a861006a3660046108ee565b6001600160e01b03191660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100c5610159565b6040516100b4919061091f565b6100da610325565b6040516100b491906109b1565b6100fa6100f5366004610a2e565b610776565b6040516100b49190610a57565b6101416101153660046108ee565b6001600160e01b0319166000908152600080516020610ae8833981519152602052604090205460601c90565b6040516001600160a01b0390911681526020016100b4565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e54606090600080516020610ae88339815191529061ffff1667ffffffffffffffff8111156101aa576101aa610a6a565b6040519080825280602002602001820160405280156101d3578160200160208202803683370190505b50915060008060005b600284015461ffff1682101561031d576000818152600185016020526040812054905b6008811015610308578361021281610a96565b600288015490955061ffff16851115905061022c57610308565b600581901b82901b6001600160e01b0319811660009081526020889052604081205460601c90805b888110156102aa578a818151811061026e5761026e610ab1565b60200260200101516001600160a01b0316836001600160a01b0316141561029857600191506102aa565b806102a281610a96565b915050610254565b5080156102ba57506102f6915050565b818a89815181106102cd576102cd610ab1565b6001600160a01b0390921660209283029190910190910152876102ef81610a96565b9850505050505b8061030081610a96565b9150506101ff565b5050808061031590610a96565b9150506101dc565b505082525090565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e54606090600080516020610ae88339815191529061ffff1667ffffffffffffffff81111561037657610376610a6a565b6040519080825280602002602001820160405280156103bc57816020015b6040805180820190915260008152606060208201528152602001906001900390816103945790505b50600282015490925060009061ffff1667ffffffffffffffff8111156103e4576103e4610a6a565b60405190808252806020026020018201604052801561040d578160200160208202803683370190505b50905060008060005b600285015461ffff16821015610704576000818152600186016020526040812054905b60088110156106ef578361044c81610a96565b600289015490955061ffff168511159050610466576106ef565b600581901b82901b6001600160e01b0319811660009081526020899052604081205460601c90805b888110156105ac57826001600160a01b03168c82815181106104b2576104b2610ab1565b6020026020010151600001516001600160a01b0316141561059a57838c82815181106104e0576104e0610ab1565b6020026020010151602001518b83815181106104fe576104fe610ab1565b602002602001015160ff168151811061051957610519610ab1565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060ff8a828151811061054f5761054f610ab1565b602002602001015160ff161061056457600080fd5b89818151811061057657610576610ab1565b60200260200101805180919061058b90610ac7565b60ff16905250600191506105ac565b806105a481610a96565b91505061048e565b5080156105bc57506106dd915050565b818b89815181106105cf576105cf610ab1565b60209081029190910101516001600160a01b03909116905260028a015461ffff1667ffffffffffffffff81111561060857610608610a6a565b604051908082528060200260200182016040528015610631578160200160208202803683370190505b508b898151811061064457610644610ab1565b602002602001015160200181905250828b898151811061066657610666610ab1565b60200260200101516020015160008151811061068457610684610ab1565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060018989815181106106ba576106ba610ab1565b60ff90921660209283029190910190910152876106d681610a96565b9850505050505b806106e781610a96565b915050610439565b505080806106fc90610a96565b915050610416565b5060005b8281101561076b57600084828151811061072457610724610ab1565b602002602001015160ff169050600087838151811061074557610745610ab1565b60200260200101516020015190508181525050808061076390610a96565b915050610708565b508185525050505090565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e54606090600080516020610ae88339815191529060009061ffff1667ffffffffffffffff8111156107ca576107ca610a6a565b6040519080825280602002602001820160405280156107f3578160200160208202803683370190505b5092506000805b600284015461ffff168210156108e4576000818152600185016020526040812054905b60088110156108cf578361083081610a96565b600288015490955061ffff16851115905061084a576108cf565b600581901b82901b6001600160e01b0319811660009081526020889052604090205460601c6001600160a01b038a168114156108ba578189888151811061089357610893610ab1565b6001600160e01b031990921660209283029190910190910152866108b681610a96565b9750505b505080806108c790610a96565b91505061081d565b505080806108dc90610a96565b9150506107fa565b5050825250919050565b60006020828403121561090057600080fd5b81356001600160e01b03198116811461091857600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156109605783516001600160a01b03168352928401929184019160010161093b565b50909695505050505050565b600081518084526020808501945080840160005b838110156109a65781516001600160e01b03191687529582019590820190600101610980565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610a2057888303603f19018552815180516001600160a01b03168452870151878401879052610a0d8785018261096c565b95880195935050908601906001016109d8565b509098975050505050505050565b600060208284031215610a4057600080fd5b81356001600160a01b038116811461091857600080fd5b602081526000610918602083018461096c565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610aaa57610aaa610a80565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff811415610ade57610ade610a80565b6001019291505056fec8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131ca264697066735822122068a94b6531fc30b49922cb9dee9d3ac1a77de2bde4100e4fbe33c35c35f8aff364736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806301ffc9a71461005c57806352ef6b2c146100bd5780637a0ed627146100d2578063adfca15e146100e7578063cdffacc614610107575b600080fd5b6100a861006a3660046108ee565b6001600160e01b03191660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100c5610159565b6040516100b4919061091f565b6100da610325565b6040516100b491906109b1565b6100fa6100f5366004610a2e565b610776565b6040516100b49190610a57565b6101416101153660046108ee565b6001600160e01b0319166000908152600080516020610ae8833981519152602052604090205460601c90565b6040516001600160a01b0390911681526020016100b4565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e54606090600080516020610ae88339815191529061ffff1667ffffffffffffffff8111156101aa576101aa610a6a565b6040519080825280602002602001820160405280156101d3578160200160208202803683370190505b50915060008060005b600284015461ffff1682101561031d576000818152600185016020526040812054905b6008811015610308578361021281610a96565b600288015490955061ffff16851115905061022c57610308565b600581901b82901b6001600160e01b0319811660009081526020889052604081205460601c90805b888110156102aa578a818151811061026e5761026e610ab1565b60200260200101516001600160a01b0316836001600160a01b0316141561029857600191506102aa565b806102a281610a96565b915050610254565b5080156102ba57506102f6915050565b818a89815181106102cd576102cd610ab1565b6001600160a01b0390921660209283029190910190910152876102ef81610a96565b9850505050505b8061030081610a96565b9150506101ff565b5050808061031590610a96565b9150506101dc565b505082525090565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e54606090600080516020610ae88339815191529061ffff1667ffffffffffffffff81111561037657610376610a6a565b6040519080825280602002602001820160405280156103bc57816020015b6040805180820190915260008152606060208201528152602001906001900390816103945790505b50600282015490925060009061ffff1667ffffffffffffffff8111156103e4576103e4610a6a565b60405190808252806020026020018201604052801561040d578160200160208202803683370190505b50905060008060005b600285015461ffff16821015610704576000818152600186016020526040812054905b60088110156106ef578361044c81610a96565b600289015490955061ffff168511159050610466576106ef565b600581901b82901b6001600160e01b0319811660009081526020899052604081205460601c90805b888110156105ac57826001600160a01b03168c82815181106104b2576104b2610ab1565b6020026020010151600001516001600160a01b0316141561059a57838c82815181106104e0576104e0610ab1565b6020026020010151602001518b83815181106104fe576104fe610ab1565b602002602001015160ff168151811061051957610519610ab1565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060ff8a828151811061054f5761054f610ab1565b602002602001015160ff161061056457600080fd5b89818151811061057657610576610ab1565b60200260200101805180919061058b90610ac7565b60ff16905250600191506105ac565b806105a481610a96565b91505061048e565b5080156105bc57506106dd915050565b818b89815181106105cf576105cf610ab1565b60209081029190910101516001600160a01b03909116905260028a015461ffff1667ffffffffffffffff81111561060857610608610a6a565b604051908082528060200260200182016040528015610631578160200160208202803683370190505b508b898151811061064457610644610ab1565b602002602001015160200181905250828b898151811061066657610666610ab1565b60200260200101516020015160008151811061068457610684610ab1565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060018989815181106106ba576106ba610ab1565b60ff90921660209283029190910190910152876106d681610a96565b9850505050505b806106e781610a96565b915050610439565b505080806106fc90610a96565b915050610416565b5060005b8281101561076b57600084828151811061072457610724610ab1565b602002602001015160ff169050600087838151811061074557610745610ab1565b60200260200101516020015190508181525050808061076390610a96565b915050610708565b508185525050505090565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e54606090600080516020610ae88339815191529060009061ffff1667ffffffffffffffff8111156107ca576107ca610a6a565b6040519080825280602002602001820160405280156107f3578160200160208202803683370190505b5092506000805b600284015461ffff168210156108e4576000818152600185016020526040812054905b60088110156108cf578361083081610a96565b600288015490955061ffff16851115905061084a576108cf565b600581901b82901b6001600160e01b0319811660009081526020889052604090205460601c6001600160a01b038a168114156108ba578189888151811061089357610893610ab1565b6001600160e01b031990921660209283029190910190910152866108b681610a96565b9750505b505080806108c790610a96565b91505061081d565b505080806108dc90610a96565b9150506107fa565b5050825250919050565b60006020828403121561090057600080fd5b81356001600160e01b03198116811461091857600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156109605783516001600160a01b03168352928401929184019160010161093b565b50909695505050505050565b600081518084526020808501945080840160005b838110156109a65781516001600160e01b03191687529582019590820190600101610980565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610a2057888303603f19018552815180516001600160a01b03168452870151878401879052610a0d8785018261096c565b95880195935050908601906001016109d8565b509098975050505050505050565b600060208284031215610a4057600080fd5b81356001600160a01b038116811461091857600080fd5b602081526000610918602083018461096c565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610aaa57610aaa610a80565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff811415610ade57610ade610a80565b6001019291505056fec8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131ca264697066735822122068a94b6531fc30b49922cb9dee9d3ac1a77de2bde4100e4fbe33c35c35f8aff364736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "facetAddress(bytes4)": {
        "details": "If facet is not found return address(0).",
        "params": {
          "_functionSelector": "The function selector."
        },
        "returns": {
          "facetAddress_": "The facet address."
        }
      },
      "facetAddresses()": {
        "returns": {
          "facetAddresses_": "facetAddresses_"
        }
      },
      "facetFunctionSelectors(address)": {
        "params": {
          "_facet": "The facet address."
        },
        "returns": {
          "_facetFunctionSelectors": "The selectors associated with a facet address."
        }
      },
      "facets()": {
        "returns": {
          "facets_": "Facet"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "facetAddress(bytes4)": {
        "notice": "Gets the facet that supports the given selector."
      },
      "facetAddresses()": {
        "notice": "Get all the facet addresses used by a diamond."
      },
      "facetFunctionSelectors(address)": {
        "notice": "Gets all the function selectors supported by a specific facet."
      },
      "facets()": {
        "notice": "Gets all facets and their selectors."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}