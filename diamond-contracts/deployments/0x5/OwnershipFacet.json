{
  "address": "0x494847fbD0F22a063f6e5C9e959772BDc96E4a2c",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2e174ed5580e08bad664ec890b15b347b20347618c15fd8d5a68ae0b4eba1d51",
  "receipt": {
    "to": null,
    "from": "0xEC30759D0A3F3CE0A730920DC29d74e441f492C3",
    "contractAddress": "0x494847fbD0F22a063f6e5C9e959772BDc96E4a2c",
    "transactionIndex": 3,
    "gasUsed": "179473",
    "logsBloom": "0x
    "blockHash": "0xbbca1369e804dddbe32ee767d5e8557d4b7d93ba0b147f25330ce1bbce28ae36",
    "transactionHash": "0x2e174ed5580e08bad664ec890b15b347b20347618c15fd8d5a68ae0b4eba1d51",
    "logs": [],
    "blockNumber": 6194036,
    "cumulativeGasUsed": "461592",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8e65d135f0f1a9a15bd5e211a01c65ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"owner_\":\"The address of the owner.\"}},\"transferOwnership(address)\":{\"details\":\"Set _newOwner to address(0) to renounce any ownership.\",\"params\":{\"_newOwner\":\"The address of the new owner of the contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Get the address of the owner\"},\"transferOwnership(address)\":{\"notice\":\"Set the address of the new owner of the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/diamondStandard/facets/OwnershipFacet.sol\":\"OwnershipFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/diamondStandard/facets/OwnershipFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { LibDiamond } from \\\"../libraries/LibDiamond.sol\\\";\\r\\nimport { IERC173 } from \\\"../interfaces/IERC173.sol\\\";\\r\\n\\r\\ncontract OwnershipFacet is IERC173 {\\r\\n    function transferOwnership(address _newOwner) external override {\\r\\n        LibDiamond.enforceIsContractOwner();\\r\\n        LibDiamond.setContractOwner(_newOwner);\\r\\n    }\\r\\n\\r\\n    function owner() external override view returns (address owner_) {\\r\\n        owner_ = LibDiamond.contractOwner();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x85142bcb3bae531dc7ef29a93144bd62dee1090163cfca0060248c6a16cfb37b\",\"license\":\"MIT\"},\"contracts/diamondStandard/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n}\\r\\n\",\"keccak256\":\"0x9875549c8bbc63ea8fcd713805d48fa78762f7d90ba524a44b389ff4a1704ed2\",\"license\":\"MIT\"},\"contracts/diamondStandard/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title ERC-173 Contract Ownership Standard\\r\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\r\\n/* is ERC165 */\\r\\ninterface IERC173 {\\r\\n    /// @dev This emits when ownership of a contract changes.\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /// @notice Get the address of the owner\\r\\n    /// @return owner_ The address of the owner.\\r\\n    function owner() external view returns (address owner_);\\r\\n\\r\\n    /// @notice Set the address of the new owner of the contract\\r\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\r\\n    /// @param _newOwner The address of the new owner of the contract\\r\\n    function transferOwnership(address _newOwner) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x0617cc298103723214d1987960e4a4f7482dd327362cb9a9d3dc6d69e42bb7dc\",\"license\":\"MIT\"},\"contracts/diamondStandard/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\r\\n\\r\\nlibrary LibDiamond {\\r\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\r\\n\\r\\n    struct DiamondStorage {\\r\\n        // maps function selectors to the facets that execute the functions.\\r\\n        // and maps the selectors to their position in the selectorSlots array.\\r\\n        // func selector => address facet, selector position\\r\\n        mapping(bytes4 => bytes32) facets;\\r\\n        // array of slots of function selectors.\\r\\n        // each slot holds 8 function selectors.\\r\\n        mapping(uint256 => bytes32) selectorSlots;\\r\\n        // The number of function selectors in selectorSlots\\r\\n        uint16 selectorCount;\\r\\n        // Used to query if a contract implements an interface.\\r\\n        // Used to implement ERC-165.\\r\\n        mapping(bytes4 => bool) supportedInterfaces;\\r\\n        // owner of the contract\\r\\n        address contractOwner;\\r\\n    }\\r\\n\\r\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    function setContractOwner(address _newOwner) internal {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        address previousOwner = ds.contractOwner;\\r\\n        ds.contractOwner = _newOwner;\\r\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\r\\n    }\\r\\n\\r\\n    function contractOwner() internal view returns (address contractOwner_) {\\r\\n        contractOwner_ = diamondStorage().contractOwner;\\r\\n    }\\r\\n\\r\\n    function enforceIsContractOwner() internal view {\\r\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\r\\n    }\\r\\n\\r\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n\\r\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\r\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\r\\n\\r\\n    // Internal function version of diamondCut\\r\\n    // This code is almost the same as the external diamondCut,\\r\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\r\\n    // 'Facet[] calldata _diamondCut'.\\r\\n    // The code is duplicated to prevent copying calldata to memory which\\r\\n    // causes an error for a two dimensional array.\\r\\n    function diamondCut(\\r\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\r\\n        address _init,\\r\\n        bytes memory _calldata\\r\\n    ) internal {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        uint256 originalSelectorCount = ds.selectorCount;\\r\\n        uint256 selectorCount = originalSelectorCount;\\r\\n        bytes32 selectorSlot;\\r\\n        // Check if last selector slot is not full\\r\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\r\\n        if (selectorCount & 7 > 0) {\\r\\n            // get last selectorSlot\\r\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\r\\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\\r\\n        }\\r\\n        // loop through diamond cut\\r\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\r\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\r\\n                selectorCount,\\r\\n                selectorSlot,\\r\\n                _diamondCut[facetIndex].facetAddress,\\r\\n                _diamondCut[facetIndex].action,\\r\\n                _diamondCut[facetIndex].functionSelectors\\r\\n            );\\r\\n        }\\r\\n        if (selectorCount != originalSelectorCount) {\\r\\n            ds.selectorCount = uint16(selectorCount);\\r\\n        }\\r\\n        // If last selector slot is not full\\r\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\r\\n        if (selectorCount & 7 > 0) {\\r\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\r\\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\r\\n        }\\r\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\r\\n        initializeDiamondCut(_init, _calldata);\\r\\n    }\\r\\n\\r\\n    function addReplaceRemoveFacetSelectors(\\r\\n        uint256 _selectorCount,\\r\\n        bytes32 _selectorSlot,\\r\\n        address _newFacetAddress,\\r\\n        IDiamondCut.FacetCutAction _action,\\r\\n        bytes4[] memory _selectors\\r\\n    ) internal returns (uint256, bytes32) {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\r\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\r\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\r\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\r\\n                bytes4 selector = _selectors[selectorIndex];\\r\\n                bytes32 oldFacet = ds.facets[selector];\\r\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\r\\n                // add facet for selector\\r\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\r\\n                // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\r\\n                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\r\\n                // clear selector position in slot and add selector\\r\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\r\\n                // if slot is full then write it to storage\\r\\n                if (selectorInSlotPosition == 224) {\\r\\n                    // \\\"_selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"_selectorSlot / 8\\\"\\r\\n                    ds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\r\\n                    _selectorSlot = 0;\\r\\n                }\\r\\n                _selectorCount++;\\r\\n            }\\r\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\r\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\r\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\r\\n                bytes4 selector = _selectors[selectorIndex];\\r\\n                bytes32 oldFacet = ds.facets[selector];\\r\\n                address oldFacetAddress = address(bytes20(oldFacet));\\r\\n                // only useful if immutable functions exist\\r\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\r\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\r\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\r\\n                // replace old facet address\\r\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\r\\n            }\\r\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\r\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\r\\n            // \\\"_selectorCount >> 3\\\" is a gas efficient division by 8 \\\"_selectorCount / 8\\\"\\r\\n            uint256 selectorSlotCount = _selectorCount >> 3;\\r\\n            // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\r\\n            uint256 selectorInSlotIndex = _selectorCount & 7;\\r\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\r\\n                if (_selectorSlot == 0) {\\r\\n                    // get last selectorSlot\\r\\n                    selectorSlotCount--;\\r\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\r\\n                    selectorInSlotIndex = 7;\\r\\n                } else {\\r\\n                    selectorInSlotIndex--;\\r\\n                }\\r\\n                bytes4 lastSelector;\\r\\n                uint256 oldSelectorsSlotCount;\\r\\n                uint256 oldSelectorInSlotPosition;\\r\\n                // adding a block here prevents stack too deep error\\r\\n                {\\r\\n                    bytes4 selector = _selectors[selectorIndex];\\r\\n                    bytes32 oldFacet = ds.facets[selector];\\r\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\r\\n                    // only useful if immutable functions exist\\r\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\r\\n                    // replace selector with last selector in ds.facets\\r\\n                    // gets the last selector\\r\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\r\\n                    if (lastSelector != selector) {\\r\\n                        // update last selector slot position info\\r\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\r\\n                    }\\r\\n                    delete ds.facets[selector];\\r\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\r\\n                    // \\\"oldSelectorCount >> 3\\\" is a gas efficient division by 8 \\\"oldSelectorCount / 8\\\"\\r\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\r\\n                    // \\\"oldSelectorCount & 7\\\" is a gas efficient modulo by eight \\\"oldSelectorCount % 8\\\" \\r\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\r\\n                }\\r\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\r\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\r\\n                    // clears the selector we are deleting and puts the last selector in its place.\\r\\n                    oldSelectorSlot =\\r\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\r\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\r\\n                    // update storage with the modified slot\\r\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\r\\n                } else {\\r\\n                    // clears the selector we are deleting and puts the last selector in its place.\\r\\n                    _selectorSlot =\\r\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\r\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\r\\n                }\\r\\n                if (selectorInSlotIndex == 0) {\\r\\n                    delete ds.selectorSlots[selectorSlotCount];\\r\\n                    _selectorSlot = 0;\\r\\n                }\\r\\n            }\\r\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\r\\n        } else {\\r\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\r\\n        }\\r\\n        return (_selectorCount, _selectorSlot);\\r\\n    }\\r\\n\\r\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\r\\n        if (_init == address(0)) {\\r\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\r\\n        } else {\\r\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\r\\n            if (_init != address(this)) {\\r\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\r\\n            }\\r\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\r\\n            if (!success) {\\r\\n                if (error.length > 0) {\\r\\n                    // bubble up the error\\r\\n                    revert(string(error));\\r\\n                } else {\\r\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\r\\n        uint256 contractSize;\\r\\n        assembly {\\r\\n            contractSize := extcodesize(_contract)\\r\\n        }\\r\\n        require(contractSize > 0, _errorMessage);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe677edcb97d8b558e0d27ac4f6b3723688180455abb3f6ac6dc0deb250f69b41\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610248806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638da5cb5b1461003b578063f2fde38b1461005f575b600080fd5b610043610074565b6040516001600160a01b03909116815260200160405180910390f35b61007261006d3660046101e2565b6100ac565b005b60006100a77fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b031690565b905090565b6100b46100c0565b6100bd8161014d565b50565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b0316331461014b5760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b606482015260840160405180910390fd5b565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c132080546001600160a01b031981166001600160a01b038481169182179093556040517fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c939092169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6000602082840312156101f457600080fd5b81356001600160a01b038116811461020b57600080fd5b939250505056fea26469706673582212208a5ffd6e3f690676cafb74588267b1911fb76c9b0e9ad35fb2e968a0d27174e564736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80638da5cb5b1461003b578063f2fde38b1461005f575b600080fd5b610043610074565b6040516001600160a01b03909116815260200160405180910390f35b61007261006d3660046101e2565b6100ac565b005b60006100a77fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b031690565b905090565b6100b46100c0565b6100bd8161014d565b50565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b0316331461014b5760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b606482015260840160405180910390fd5b565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c132080546001600160a01b031981166001600160a01b038481169182179093556040517fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c939092169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6000602082840312156101f457600080fd5b81356001600160a01b038116811461020b57600080fd5b939250505056fea26469706673582212208a5ffd6e3f690676cafb74588267b1911fb76c9b0e9ad35fb2e968a0d27174e564736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "returns": {
          "owner_": "The address of the owner."
        }
      },
      "transferOwnership(address)": {
        "details": "Set _newOwner to address(0) to renounce any ownership.",
        "params": {
          "_newOwner": "The address of the new owner of the contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "owner()": {
        "notice": "Get the address of the owner"
      },
      "transferOwnership(address)": {
        "notice": "Set the address of the new owner of the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}