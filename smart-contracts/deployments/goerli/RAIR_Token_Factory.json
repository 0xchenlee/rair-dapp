{
  "address": "0x2b1FE33Cb7264dBa6331F54012f04133395fDe44",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "NewContractDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc777",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceForNFT",
          "type": "uint256"
        }
      ],
      "name": "NewTokensAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc777",
          "type": "address"
        }
      ],
      "name": "TokenNoLongerAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc777",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensWithdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ERC777",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc777Address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pricePerToken",
          "type": "uint256"
        }
      ],
      "name": "add777Token",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "contractToOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "creators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deploymentCostForERC777",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getContractCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        }
      ],
      "name": "getContractCountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCreatorsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pricePerToken",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_rairAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerToContracts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc777Address",
          "type": "address"
        }
      ],
      "name": "remove777Token",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "tokensReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc777",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc3c918ecbfa6cf3bc84a2cd45d66dbf7537931f25e749f37c4c6ce6a77094d61",
  "receipt": {
    "to": null,
    "from": "0xEC30759D0A3F3CE0A730920DC29d74e441f492C3",
    "contractAddress": "0x2b1FE33Cb7264dBa6331F54012f04133395fDe44",
    "transactionIndex": 2,
    "gasUsed": "5265460",
    "logsBloom": "0x
    "blockHash": "0x1c5917b2ed294be5d672d74a2218ac4f874b77ef3085b4f5b3e0ab6bb0148b03",
    "transactionHash": "0xc3c918ecbfa6cf3bc84a2cd45d66dbf7537931f25e749f37c4c6ce6a77094d61",
    "logs": [],
    "blockNumber": 5301519,
    "cumulativeGasUsed": "5368658",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "91dcddf814585a037744fb2aef7e154c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"NewContractDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc777\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceForNFT\",\"type\":\"uint256\"}],\"name\":\"NewTokensAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc777\",\"type\":\"address\"}],\"name\":\"TokenNoLongerAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc777\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC777\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc777Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerToken\",\"type\":\"uint256\"}],\"name\":\"add777Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractToOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deploymentCostForERC777\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getContractCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"getContractCountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreatorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rairAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerToContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc777Address\",\"type\":\"address\"}],\"name\":\"remove777Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc777\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Juan M. Sanchez M.\",\"details\":\"Uses AccessControl for the reception of ERC777 tokens!\",\"kind\":\"dev\",\"methods\":{\"add777Token(address,uint256)\":{\"params\":{\"_erc777Address\":\"Address of the new Token\"}},\"getContractCount(address)\":{\"details\":\"Use alongside ownerToContracts for the full list of tokens \",\"params\":{\"_owner\":\"Wallet address to query\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(uint256,address)\":{\"params\":{\"_pricePerToken\":\"Fee given to the node on every sale\"}},\"remove777Token(address)\":{\"params\":{\"_erc777Address\":\"Address of the Token\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"details\":\"This is our deployment mechanism for ERC721 contracts!\",\"params\":{\"amount\":\"The number of tokens sent\",\"from\":\"The owner of the tokens\",\"operator\":\"The ERC777 operator calling the send() function\",\"operatorData\":\"bytes sent from the operator\",\"to\":\"The recipient of the tokens\",\"userData\":\"bytes sent from the send call\"}},\"withdrawTokens(address,uint256)\":{\"details\":\"If the contract has less than the amount, the ERC777 contract will revertAccessControl makes sure only an OWNER can withdraw\",\"params\":{\"amount\":\"Amount of tokens to withdraw\",\"erc777\":\"Address of the ERC777 contract\"}}},\"title\":\"RAIR ERC721 Factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"add777Token(address,uint256)\":{\"notice\":\"Adds an address to the list of allowed minters\"},\"getContractCount(address)\":{\"notice\":\"Returns the number of contracts deployed by an address\"},\"getContractCountOf(address)\":{\"notice\":\"Returns the number of contracts deployed by an address\"},\"getCreatorsCount()\":{\"notice\":\"Returns the number of addresses that have deployed a contract\"},\"initialize(uint256,address)\":{\"notice\":\"Factory Constructor\"},\"remove777Token(address)\":{\"notice\":\"Removes an address from the list of allowed minters\"},\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"notice\":\"Function called by an ERC777 when they send tokens\"},\"withdrawTokens(address,uint256)\":{\"notice\":\"Transfers tokens from the factory to any of the OWNER addresses\"}},\"notice\":\"Handles the deployment of ERC721 RAIR Tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RAIR-ERC721_Factory.sol\":\"RAIR_Token_Factory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable {\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal initializer {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf8210b83516a66b0d6e0faefa7b27eb208729a173ef8888aed9e4fbcaeb242e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa51e24ce76a2fe7a63627bb0a11e23ab04ccc6a1bb1dd3e1a61ffbe3e419de7c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC777/IERC777RecipientUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777RecipientUpgradeable {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9c1c6857c157616771c0f370bbd3075e8daad642bf1d8d7f796bbfacecc7173a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC777/IERC777Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\",\"keccak256\":\"0x043c4bf4f430252f4821d2bdbf9b68f3857293a817e0be782a11f89705e7f9a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820RegistryUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820RegistryUpgradeable {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(\\n        address account,\\n        bytes32 _interfaceHash,\\n        address implementer\\n    ) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     * @param account Address of the contract for which to update the cache.\\n     * @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not.\\n     * If the result is not cached a direct lookup on the contract address is performed.\\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     * {updateERC165Cache} with the contract address.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\",\"keccak256\":\"0x8cc0dcc7ba852d024d7be1590059e1ec2bd9fa9725c75f993191575263791216\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xa8eded8062871a4b146c437c8e0e5ba96b1fec87c9f303a461a727b3fd5856d9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                Strings.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                Strings.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98fac37221212c8f126f198d262a4df86394bd1a9969f61e40739fe8ac013dd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable {\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping (bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\",\"keccak256\":\"0x0d616363c1a1e6f9f489303f94df0cbe606826ab4944d315c3801a07f9b8d4ee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x2d9f9af8b84d252e0e7ee716e4cb3ad1b58f3ec6619e4f54f40d4b5e28f75eb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x3dce5847e70c056ef0f7cf91cb9a0067cf90784794017a45c1211cde7ed1c08c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xccb7e6475afcb1c5cb13b3fbf1329c10b93620a9b66393388066683915271a78\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x4878ef6c288f4cef3c2a288d32cc548c648831cc55503ad3d9a581ed3b93aad9\",\"license\":\"MIT\"},\"contracts/RAIR-ERC721_Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6; \\n\\n// Interfaces\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820RegistryUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC777/IERC777Upgradeable.sol\\\";\\n\\n// Parent classes\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC777/IERC777RecipientUpgradeable.sol\\\";\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\\n\\nimport './Tokens/RAIR-ERC721.sol';\\n\\n/// @title  RAIR ERC721 Factory\\n/// @notice Handles the deployment of ERC721 RAIR Tokens\\n/// @author Juan M. Sanchez M.\\n/// @dev \\tUses AccessControl for the reception of ERC777 tokens!\\ncontract RAIR_Token_Factory is IERC777RecipientUpgradeable, AccessControlEnumerableUpgradeable {\\n\\tIERC1820RegistryUpgradeable internal constant _ERC1820_REGISTRY = IERC1820RegistryUpgradeable(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\t\\n\\tbytes32 public constant OWNER = keccak256(\\\"OWNER\\\");\\n\\tbytes32 public constant ERC777 = keccak256(\\\"ERC777\\\");\\n\\n\\tmapping(address => address[]) public ownerToContracts;\\n\\tmapping(address => address) public contractToOwner;\\n\\n\\tmapping(address => uint) public deploymentCostForERC777;\\n\\n\\taddress[] public creators;\\n\\n\\tevent NewTokensAccepted(address erc777, uint priceForNFT);\\n\\tevent TokenNoLongerAccepted(address erc777);\\n\\tevent NewContractDeployed(address owner, uint id, address token);\\n\\tevent TokensWithdrawn(address recipient, address erc777, uint amount);\\n\\n\\t/// @notice Factory Constructor\\n\\t/// @param  _pricePerToken    Fee given to the node on every sale\\n\\tfunction initialize(uint _pricePerToken, address _rairAddress) public initializer {\\n\\t\\t_ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC777TokensRecipient\\\"), address(this));\\n\\t\\t_setRoleAdmin(ERC777, OWNER);\\n\\t\\t_setupRole(OWNER, msg.sender);\\n\\t\\t_setupRole(ERC777, _rairAddress);\\n\\t\\tdeploymentCostForERC777[_rairAddress] = _pricePerToken;\\n\\t\\temit NewTokensAccepted(_rairAddress, _pricePerToken);\\n\\t}\\n\\n\\t/// @notice Returns the number of addresses that have deployed a contract\\n\\tfunction getCreatorsCount() public view returns(uint count) {\\n\\t\\treturn creators.length;\\n\\t}\\n\\n\\t/// @notice Returns the number of contracts deployed by an address\\n\\tfunction getContractCountOf(address deployer) public view returns(uint count) {\\n\\t\\treturn ownerToContracts[deployer].length;\\n\\t}\\n\\n\\t/// @notice Transfers tokens from the factory to any of the OWNER addresses\\n\\t/// @dev \\tIf the contract has less than the amount, the ERC777 contract will revert\\n\\t/// @dev \\tAccessControl makes sure only an OWNER can withdraw\\n\\t/// @param \\terc777\\tAddress of the ERC777 contract\\n\\t/// @param \\tamount\\tAmount of tokens to withdraw\\n\\tfunction withdrawTokens(address erc777, uint amount) public onlyRole(OWNER) {\\n\\t\\trequire(hasRole(ERC777, erc777), \\\"RAIR Factory: Specified contract isn't an approved erc777 contract\\\");\\n\\t\\tIERC777Upgradeable(erc777).send(msg.sender, amount, \\\"Factory Withdraw\\\");\\n\\t\\temit TokensWithdrawn(msg.sender, erc777, amount);\\n\\t}\\n\\n\\t/// @notice\\tAdds an address to the list of allowed minters\\n\\t/// @param\\t_erc777Address\\tAddress of the new Token\\n\\tfunction add777Token(address _erc777Address, uint _pricePerToken) public onlyRole(OWNER) {\\n\\t\\tgrantRole(ERC777, _erc777Address);\\n\\t\\tdeploymentCostForERC777[_erc777Address] = _pricePerToken;\\n\\t\\temit NewTokensAccepted(_erc777Address, _pricePerToken);\\n\\t}\\n\\n\\t/// @notice\\tRemoves an address from the list of allowed minters\\n\\t/// @param\\t_erc777Address\\tAddress of the Token\\n\\tfunction remove777Token(address _erc777Address) public onlyRole(OWNER) {\\n\\t\\trevokeRole(ERC777, _erc777Address);\\n\\t\\tdeploymentCostForERC777[_erc777Address] = 0;\\n\\t\\temit TokenNoLongerAccepted(_erc777Address);\\n\\t}\\n\\n\\t/// @notice\\tReturns the number of contracts deployed by an address\\n\\t/// @dev\\tUse alongside ownerToContracts for the full list of tokens \\n\\t/// @param\\t_owner\\tWallet address to query\\n\\tfunction getContractCount(address _owner) public view returns (uint count) {\\n\\t\\treturn ownerToContracts[_owner].length;\\n\\t}\\n\\n\\t/// @notice Function called by an ERC777 when they send tokens\\n\\t/// @dev    This is our deployment mechanism for ERC721 contracts!\\n\\t/// @param operator\\t\\tThe ERC777 operator calling the send() function\\n\\t/// @param from\\t\\t\\tThe owner of the tokens\\n\\t/// @param to\\t\\t\\tThe recipient of the tokens\\n\\t/// @param amount\\t\\tThe number of tokens sent\\n\\t/// @param userData\\t\\tbytes sent from the send call\\n\\t/// @param operatorData\\tbytes sent from the operator\\n\\tfunction tokensReceived(address operator, address from, address to, uint256 amount, bytes calldata userData, bytes calldata operatorData) external onlyRole(ERC777) override {\\n\\t\\trequire(amount >= deploymentCostForERC777[msg.sender], 'RAIR Factory: not enough RAIR tokens to deploy a contract');\\n\\t\\tuint tokensBought = uint((amount / deploymentCostForERC777[msg.sender]));\\n\\t\\tif (amount - (deploymentCostForERC777[msg.sender] * tokensBought) > 0) {\\n\\t\\t\\tIERC777Upgradeable(msg.sender).send(from, amount - (deploymentCostForERC777[msg.sender] * tokensBought), userData);\\n\\t\\t}\\n\\n\\t\\taddress[] storage tokensFromOwner = ownerToContracts[from];\\n\\t\\t\\n\\t\\tif (tokensFromOwner.length == 0) {\\n\\t\\t\\tcreators.push(from);\\n\\t\\t}\\n\\n\\t\\tfor (uint i = 0; i < tokensBought; i++) {\\n\\t\\t\\tRAIR_ERC721 newToken = new RAIR_ERC721(string(userData), from, 30000);\\n\\t\\t\\ttokensFromOwner.push(address(newToken));\\n\\t\\t\\tcontractToOwner[address(newToken)] = from;\\n\\t\\t\\temit NewContractDeployed(from, tokensFromOwner.length, address(newToken));\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0x04af878a25309555bf20a10e58633db695d5fbbbc13dd99d6a32d88b65dfc295\",\"license\":\"GPL-3.0\"},\"contracts/Tokens/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.4; \\n\\ninterface IERC2981 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256,bytes)\\\")) == 0xc155531d\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0xc155531d;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _value - the sale price of the NFT asset specified by _tokenId\\n    /// @param _data - information used by extensions of this ERC.\\n    ///                Must not to be used by implementers of EIP-2981 \\n    ///                alone.\\n    /// @return _receiver - address of who should be sent the royalty payment\\n    /// @return _royaltyAmount - the royalty payment amount for _value sale price\\n    /// @return _royaltyPaymentData - information used by extensions of this ERC.\\n    ///                               Must not to be used by implementers of\\n    ///                               EIP-2981 alone.\\n    function royaltyInfo(\\n    \\tuint256 _tokenId,\\n    \\tuint256 _value,\\n    \\tbytes calldata _data)\\n    external returns (\\n    \\taddress _receiver,\\n    \\tuint256 _royaltyAmount,\\n    \\tbytes memory _royaltyPaymentData);\\n\\n    /// @notice Informs callers that this contract supports ERC2981\\n    /// @dev If `_registerInterface(_INTERFACE_ID_ERC2981)` is called\\n    ///      in the initializer, this should be automatic\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @return `true` if the contract implements\\n    ///         `_INTERFACE_ID_ERC2981` and `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\",\"keccak256\":\"0x8f3369e221ab1ae54eb41ca8930062b11fc6ed96ae15b19e01d8c6d63a1257ec\",\"license\":\"GPL-3.0\"},\"contracts/Tokens/IRAIR-ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6; \\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\ninterface IRAIR_ERC721 is IERC721 {\\n\\n\\tevent CollectionCreated(uint indexed id, string name, uint length);\\n\\tevent RangeLocked(uint collectionIndex, uint startingToken, uint endingToken, uint tokensLocked, string collectionName);\\n\\tevent CollectionCompleted(uint indexed id, string name);\\n\\tevent RangeUnlocked(uint collectionID, uint startingToken, uint endingToken);\\n\\n\\t// Get the total number of collections in the contract\\n\\tfunction getCollectionCount() external view returns(uint);\\n\\n\\t// Get a specific collection in the contract\\n\\tfunction getCollection(uint index) external view returns(uint startingToken, uint endingToken, uint mintableTokensLeft, string memory collectionName, uint[] memory locks);\\n\\t\\n\\t// Mint a token inside a collection\\n\\tfunction mint(address to, uint collectionID, uint index) external;\\n\\n\\t// Ask for the royalty info of the creator\\n\\t// Value is the price for the token, so if token #1 is being sold for 100 ETH and the creator fee is 30%, you-ll get as a result 30 in _royaltyAmount\\n\\tfunction royaltyInfo(uint256 _tokenId, uint256 _value,\\tbytes calldata _data)\\n\\t\\texternal view returns (address _receiver, uint256 _royaltyAmount, bytes memory _royaltyPaymentData);\\n}\",\"keccak256\":\"0x8064508a722211ffa485f9630a65ec9ccee316ee6c1de0a2ef07d45215c4aa48\",\"license\":\"GPL-3.0\"},\"contracts/Tokens/RAIR-ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\nimport '@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./IERC2981.sol\\\";\\nimport \\\"./IRAIR-ERC721.sol\\\";\\n\\n//import \\\"hardhat/console.sol\\\";\\n\\n/// @title  Extended ERC721Enumerable contract for the RAIR system\\n/// @notice Uses ERC2981 and ERC165 for standard royalty info\\n/// @notice Uses AccessControl for the minting mechanisms\\n/// @author Juan M. Sanchez M.\\n/// @dev    Ideally generated by a RAIR Token Factory\\ncontract RAIR_ERC721 is IERC2981, ERC165, IRAIR_ERC721, ERC721Enumerable, AccessControlEnumerable {\\n\\tstruct lockedRange {\\n\\t\\tuint startingToken;\\n\\t\\tuint endingToken;\\n\\t\\tuint lockCountdown;\\n\\t\\tuint collectionIndex;\\n\\t}\\n\\n\\tstruct collection {\\n\\t\\tuint startingToken;\\n\\t\\tuint endingToken;\\n\\t\\tuint mintableTokens;\\n\\t\\tstring name;\\n\\t\\tuint[] locks;\\n\\t}\\n\\n\\tmapping(uint => uint) private tokenToLock;\\n\\tlockedRange[] private _lockedRange;\\n\\tcollection[] private _collections;\\n\\n\\tbytes32 public constant CREATOR = keccak256(\\\"CREATOR\\\");\\n\\tbytes32 public constant MINTER = keccak256(\\\"MINTER\\\");\\n\\tbytes32 public constant TRADER = keccak256(\\\"TRADER\\\");\\n\\n\\tmapping(uint => uint) public tokenToCollection;\\n\\n\\taddress private _factory;\\n\\tuint16 private _royaltyFee;\\n\\n\\t/// @notice\\tToken's constructor\\n\\t/// @dev\\tRAIR is still the ERC721's symbol\\n\\t/// @param\\t_creatorAddress\\tAddress of the media's creator\\n\\t/// @param\\t_creatorRoyalty\\tFee given to the creator on every sale\\n\\tconstructor(\\n\\t\\tstring memory _contractName,\\n\\t\\taddress _creatorAddress,\\n\\t\\tuint16 _creatorRoyalty\\n\\t) ERC721(_contractName, \\\"RAIR\\\") {\\n\\t\\t_factory = msg.sender;\\n\\t\\t_royaltyFee = _creatorRoyalty;\\n\\t\\t_setRoleAdmin(MINTER, CREATOR);\\n\\t\\t_setRoleAdmin(TRADER, CREATOR);\\n\\t\\t_setupRole(CREATOR, _creatorAddress);\\n\\t\\t_setupRole(MINTER, _creatorAddress);\\n\\t\\t_setupRole(TRADER, _creatorAddress);\\n\\t}\\n\\n\\tmodifier collectionExists(uint collectionID) {\\n\\t\\trequire(_collections.length > collectionID, \\\"RAIR ERC721: Collection does not exist\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction canCreateLock(uint productIndex, uint startingToken, uint endingToken) public view returns (bool canCreate) {\\n\\t\\tcollection storage selectedCollection =  _collections[productIndex];\\n\\t\\tif (startingToken > selectedCollection.endingToken - selectedCollection.startingToken ||\\n\\t\\t\\t\\tendingToken > selectedCollection.endingToken - selectedCollection.startingToken) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\tfor (uint i = 0; i < selectedCollection.locks.length; i++) {\\n\\t\\t\\tif ((_lockedRange[selectedCollection.locks[i]].startingToken <= selectedCollection.startingToken + startingToken &&\\n\\t\\t\\t\\t\\t_lockedRange[selectedCollection.locks[i]].endingToken >= selectedCollection.startingToken + startingToken) ||\\n\\t\\t\\t\\t\\t\\t(_lockedRange[selectedCollection.locks[i]].startingToken <= selectedCollection.startingToken + endingToken &&\\n\\t\\t\\t\\t\\t\\t\\t\\t_lockedRange[selectedCollection.locks[i]].endingToken >= selectedCollection.startingToken + endingToken)) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn true;\\n\\t} \\n\\n\\t/// @notice\\tLocks transfers for tokens within a specific range\\n\\t/// @dev\\tThe minter pays for the locking as well\\n\\t/// @param\\tcollectionIndex Index of the collection on the contract\\n\\t/// @param\\t_startingToken Initial token locked\\n\\t/// @param\\t_endingToken Last token locked\\n\\t/// @param\\t_lockedTokens Number of tokens that have to be minted in order to unlock the full range\\n\\tfunction createRangeLock(uint collectionIndex, uint _startingToken, uint _endingToken, uint _lockedTokens) public onlyRole(CREATOR) collectionExists(collectionIndex) {\\n\\t\\tcollection storage selectedCollection =  _collections[collectionIndex];\\n\\n\\t\\trequire(selectedCollection.startingToken + _endingToken <= selectedCollection.endingToken, 'RAIR ERC721: Invalid ending token');\\n\\t\\trequire(_endingToken - _startingToken <= selectedCollection.endingToken - selectedCollection.startingToken, 'RAIR ERC721: Invalid token limits');\\n\\t\\trequire((_endingToken - _startingToken + 1) >= _lockedTokens, 'RAIR ERC721: Invalid number of tokens to lock');\\n\\n\\t\\trequire(canCreateLock(collectionIndex, _startingToken, _endingToken), \\\"RAIR ERC721: Cannot create lock\\\");\\n\\n\\t\\tlockedRange storage newRange = _lockedRange.push();\\n\\t\\tnewRange.startingToken = selectedCollection.startingToken + _startingToken;\\n\\t\\tnewRange.endingToken = selectedCollection.startingToken + _endingToken;\\n\\t\\tnewRange.lockCountdown = _lockedTokens;\\n\\t\\tnewRange.collectionIndex = collectionIndex;\\n\\t\\tselectedCollection.locks.push(_lockedRange.length - 1);\\n\\t\\temit RangeLocked(collectionIndex, selectedCollection.startingToken + _startingToken, selectedCollection.startingToken + _endingToken, _lockedTokens, selectedCollection.name);\\n\\t}\\n\\n\\t/// @notice\\tCreates a collection\\n\\t/// @dev\\tOnly a CREATOR can call this function\\n\\t/// @param\\t_collectionName Name of the collection\\n\\t/// @param\\t_copies\\t\\t\\tAmount of tokens inside the collection\\n\\tfunction createCollection(string memory _collectionName, uint _copies) public onlyRole(CREATOR) {\\n\\t\\tuint lastToken;\\n\\t\\tlastToken = _collections.length == 0 ? 0 : _collections[_collections.length - 1].endingToken + 1;\\n\\t\\t\\n\\t\\tcollection storage newCollection = _collections.push();\\n\\n\\t\\tnewCollection.startingToken = lastToken;\\n\\t\\tnewCollection.endingToken = newCollection.startingToken + _copies - 1;\\n\\t\\tnewCollection.name = string(_collectionName);\\n\\t\\tnewCollection.mintableTokens = _copies;\\n\\t\\t\\n\\t\\temit CollectionCreated(_collections.length - 1, _collectionName, _copies);\\n\\t}\\n\\n\\t/// @notice\\tReturns the number of collections on the contract\\n\\t/// @dev\\tUse with get collection to list all of the collections\\n\\tfunction getCollectionCount() external view override(IRAIR_ERC721) returns(uint) {\\n\\t\\treturn _collections.length;\\n\\t}\\n\\n\\t/// @notice\\tReturns information about a collection\\n\\t/// @param\\tindex\\tIndex of the collection\\n\\tfunction getCollection(uint index) external override(IRAIR_ERC721) view returns(uint startingToken, uint endingToken, uint mintableTokensLeft, string memory collectionName, uint[] memory locks) {\\n\\t\\tcollection memory selectedCollection =  _collections[index];\\n\\t\\treturn (\\n\\t\\t\\tselectedCollection.startingToken,\\n\\t\\t\\tselectedCollection.endingToken,\\n\\t\\t\\tselectedCollection.mintableTokens,\\n\\t\\t\\tselectedCollection.name,\\n\\t\\t\\tselectedCollection.locks\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice\\tVery inefficient way of verifying if an user owns a token within a collection\\n\\t/// @param\\towner\\t\\t\\tUser to search\\n\\t/// @param\\tcollectionIndex\\tCollection to search\\n\\tfunction hasTokenInCollection(address owner, uint collectionIndex) public view returns (bool) {\\n\\t\\tfor (uint i = 0; i < balanceOf(owner); i++) {\\n\\t\\t\\tif (tokenToCollection[tokenOfOwnerByIndex(owner, i)] == collectionIndex) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\t/// @notice\\tReturns the token index inside the collection\\n\\t/// @param\\ttoken\\tToken ID to find\\n\\tfunction tokenToCollectionIndex(uint token) public view returns (uint tokenIndex) {\\n\\t\\treturn token - _collections[tokenToCollection[token]].startingToken;\\n\\t} \\n\\n\\t/// @notice\\tLoops through a range of tokens inside a collection and returns the first token without an owner\\n\\t/// @dev\\tUses a loop, do not call this from a non-view function!\\n\\t/// @param\\tcollectionID\\tIndex of the collection to search\\n\\t/// @param\\tstartingIndex\\tIndex of the collection to search\\n\\t/// @param\\tendingIndex\\t\\tIndex of the collection to search\\n\\tfunction getNextSequentialIndex(uint collectionID, uint startingIndex, uint endingIndex) public view collectionExists(collectionID) returns(uint nextIndex) {\\n\\t\\tcollection memory currentCollection = _collections[collectionID];\\n\\t\\tfor (uint i = currentCollection.startingToken + startingIndex; i <= currentCollection.startingToken + endingIndex; i++) {\\n\\t\\t\\tif (!_exists(i)) {\\n\\t\\t\\t\\treturn i - currentCollection.startingToken;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\trequire(false, \\\"RAIR ERC721: There are no available tokens in this range.\\\");\\n\\t}\\n\\n\\tfunction getLockedRange(uint index) public view returns (uint startingToken, uint endingToken, uint countToUnlock, uint collectionIndex) {\\n\\t\\tlockedRange memory currentLock = _lockedRange[index];\\n\\t\\tcollection memory currentCollection = _collections[currentLock.collectionIndex];\\n\\t\\treturn (\\n\\t\\t\\tcurrentLock.startingToken - currentCollection.startingToken,\\n\\t\\t\\tcurrentLock.endingToken - currentCollection.startingToken,\\n\\t\\t\\tcurrentLock.lockCountdown,\\n\\t\\t\\tcurrentLock.collectionIndex\\n\\t\\t);\\n\\t}\\n\\n\\tfunction isTokenLocked(uint256 _tokenId) public view returns (bool) {\\n\\t\\treturn _lockedRange[tokenToLock[_tokenId]].collectionIndex == tokenToCollection[_tokenId] && _lockedRange[tokenToLock[_tokenId]].lockCountdown > 0;\\n\\t}\\n\\n\\t/// @notice\\tMints a specific token within a collection\\n\\t/// @dev\\tHas to be used alongside getNextSequentialIndex to simulate a sequential minting\\n\\t/// @dev\\tAnyone that wants a specific token just has to call this\\n\\t/// @param\\tto\\t\\t\\t\\t\\tAddress of the new token's owner\\n\\t/// @param\\tcollectionID\\t\\tCollection to mint from\\n\\t/// @param\\tindexInCollection\\tInternal index of the token\\n\\tfunction mint(address to, uint collectionID, uint indexInCollection) external override(IRAIR_ERC721) onlyRole(MINTER) collectionExists(collectionID) {\\n\\t\\tcollection storage currentCollection = _collections[collectionID];\\n\\t\\t\\n\\t\\trequire(indexInCollection <= currentCollection.endingToken - currentCollection.startingToken, \\\"RAIR ERC721: Invalid token index\\\");\\n\\n\\t\\t_safeMint(to, currentCollection.startingToken + indexInCollection);\\n\\n\\t\\ttokenToCollection[currentCollection.startingToken + indexInCollection] = collectionID;\\n\\t\\tcurrentCollection.mintableTokens--;\\n\\n\\t\\tlockedRange storage lock;\\n\\t\\tfor (uint i = 0; i < currentCollection.locks.length; i++) {\\n\\t\\t\\tif (_lockedRange[currentCollection.locks[i]].startingToken <= currentCollection.startingToken + indexInCollection &&\\n\\t\\t\\t\\t\\t_lockedRange[currentCollection.locks[i]].endingToken >= currentCollection.startingToken + indexInCollection) {\\n\\t\\t\\t\\tlock = _lockedRange[currentCollection.locks[i]];\\n\\t\\t\\t\\ttokenToLock[currentCollection.startingToken + indexInCollection] = currentCollection.locks[i];\\n\\t\\t\\t\\tif (lock.lockCountdown > 0) {\\n\\t\\t\\t\\t\\tlock.lockCountdown--;\\n\\t\\t\\t\\t\\tif (lock.lockCountdown == 0) {\\n\\t\\t\\t\\t\\t\\temit RangeUnlocked(collectionID, lock.startingToken, lock.endingToken);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (currentCollection.mintableTokens == 0) {\\n\\t\\t\\temit CollectionCompleted(collectionID, currentCollection.name);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Returns the fee for the NFT sale\\n\\t/// @param _tokenId - the NFT asset queried for royalty information\\n\\t/// @param _value - the sale price of the NFT asset specified by _tokenId\\n\\t/// @param _data - information used by extensions of this ERC.\\n\\t///                Must not to be used by implementers of EIP-2981 \\n\\t///                alone.\\n\\t/// @return _receiver - address of who should be sent the royalty payment\\n\\t/// @return _royaltyAmount - the royalty payment amount for _value sale price\\n\\t/// @return _royaltyPaymentData - information used by extensions of this ERC.\\n\\t///                               Must not to be used by implementers of\\n\\t///                               EIP-2981 alone.\\n\\tfunction royaltyInfo(uint256 _tokenId, uint256 _value, bytes calldata _data)\\n\\t\\texternal view override(IRAIR_ERC721, IERC2981) returns (address _receiver, uint256 _royaltyAmount, bytes memory _royaltyPaymentData) {\\n\\t\\treturn (getRoleMember(CREATOR, 0), (_value * _royaltyFee) / 100000, abi.encodePacked(_tokenId));\\n\\t}\\n\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165, AccessControlEnumerable, ERC721Enumerable, IERC2981) returns (bool) {\\n\\t\\treturn interfaceId == type(IERC2981).interfaceId\\n\\t\\t\\t|| super.supportsInterface(interfaceId);\\n\\t}\\n\\n\\t/// @notice Queries if an operator can act on behalf of an owner on all of their tokens\\n\\t/// @dev Overrides the OpenZeppelin standard by allowing anyone with the TRADER role to transfer tokens\\n\\t/// @param owner \\t\\tOwner of the tokens.\\n\\t/// @param operator \\tOperator of the tokens.\\n\\tfunction isApprovedForAll(address owner, address operator) public view virtual override(ERC721, IERC721) returns (bool) {\\n        return (hasRole(TRADER, operator) || super.isApprovedForAll(owner, operator));\\n    }\\n\\n\\t/// @notice Hook being called before every transfer\\n\\t/// @dev\\tTransfer locking happens here!\\n\\t/// @param\\t_from\\t\\tToken's original owner\\n\\t/// @param\\t_to\\t\\t\\tToken's new owner\\n\\t/// @param\\t_tokenId\\tToken's ID\\n\\tfunction _beforeTokenTransfer(address _from, address _to, uint256 _tokenId) internal virtual override(ERC721Enumerable) {\\n\\n\\t\\tif (_from != address(0) && _to != address(0)) {\\n\\t\\t\\tif (_lockedRange[tokenToLock[_tokenId]].collectionIndex == tokenToCollection[_tokenId]) {\\n\\t\\t\\t\\trequire(_lockedRange[tokenToLock[_tokenId]].lockCountdown == 0, \\\"RAIR ERC721: Transfers for this range are currently locked\\\");\\n\\t\\t\\t}\\n\\t\\t\\t_checkRole(TRADER, msg.sender);\\n\\t\\t} \\n\\t\\t//require(hasRole(TRADER, _from), 'RAIR ERC721: Transfers cannot be made outside RAIR marketplaces!');\\n\\t\\tsuper._beforeTokenTransfer(_from, _to, _tokenId);\\n\\t}\\n}\",\"keccak256\":\"0xab4d456e2fefb04e5dfeecbd6d4069c1cc0ca9a6ab225531b9833c6dd0c6966c\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615e97806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620001ac5760003560e01c8063871797f711620000f5578063ca15c8731162000097578063da35a26f116200006e578063da35a26f1462000400578063dbdda1a11462000417578063f42512ce146200042e57600080fd5b8063ca15c87314620003bb578063cd53d08e14620003d2578063d547741f14620003e957600080fd5b8063956f903811620000cc578063956f903814620002d7578063a217fddf14620003a9578063aa55ecbc14620003b257600080fd5b8063871797f714620003335780639010d07c146200035657806391d14854146200036d57600080fd5b8063248a9ca3116200015f578063543a16b11162000136578063543a16b114620002af57806366cdbf8614620002d75780636a1972bd146200030357600080fd5b8063248a9ca3146200025b5780632f2ff15d146200028157806336568abe146200029857600080fd5b806306b091f9116200019457806306b091f914620001f6578063117803e3146200020d5780631c6ee6a2146200024457600080fd5b806223de2914620001b157806301ffc9a714620001ca575b600080fd5b620001c8620001c2366004620016a1565b6200045a565b005b620001e1620001db366004620017f2565b620007d3565b60405190151581526020015b60405180910390f35b620001c86200020736600462001759565b6200081a565b620002357f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b81565b604051908152602001620001ed565b620001c86200025536600462001759565b62000a1b565b620002356200026c36600462001786565b60009081526065602052604090206001015490565b620001c862000292366004620017a0565b62000ac6565b620001c8620002a9366004620017a0565b62000af1565b620002357fe33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c14723081565b62000235620002e836600462001683565b6001600160a01b0316600090815260c9602052604090205490565b6200031a6200031436600462001759565b62000b17565b6040516001600160a01b039091168152602001620001ed565b620002356200034436600462001683565b60cb6020526000908152604090205481565b6200031a62000367366004620017cf565b62000b50565b620001e16200037e366004620017a0565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b62000235600081565b60cc5462000235565b62000235620003cc36600462001786565b62000b71565b6200031a620003e336600462001786565b62000b8a565b620001c8620003fa366004620017a0565b62000bb5565b620001c862000411366004620017a0565b62000bc1565b620001c86200042836600462001683565b62000e2d565b6200031a6200043f36600462001683565b60ca602052600090815260409020546001600160a01b031681565b7fe33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c14723062000487813362000ed9565b33600090815260cb6020526040902054861015620005125760405162461bcd60e51b815260206004820152603960248201527f5241495220466163746f72793a206e6f7420656e6f756768205241495220746f60448201527f6b656e7320746f206465706c6f79206120636f6e74726163740000000000000060648201526084015b60405180910390fd5b33600090815260cb60205260408120546200052e90886200198b565b33600090815260cb6020526040812054919250906200054f908390620019ae565b6200055b9089620019d0565b1115620005eb5733600081815260cb6020526040902054639bd9bbc6908b9062000587908590620019ae565b62000593908b620019d0565b89896040518563ffffffff1660e01b8152600401620005b69493929190620018cc565b600060405180830381600087803b158015620005d157600080fd5b505af1158015620005e6573d6000803e3d6000fd5b505050505b6001600160a01b038916600090815260c96020526040902080546200066e5760cc80546001810182556000919091527f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038c161790555b60005b82811015620007c557600088888d61753060405162000690906200160c565b6200069f949392919062001901565b604051809103906000f080158015620006bc573d6000803e3d6000fd5b50905082819080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b031602179055508b60ca6000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f8541d3f155d1d78bb99039323325761c94686b6f359d2ab4f5c645551f55fa118c848054905083604051620007a7939291906001600160a01b0393841681526020810192909252909116604082015260600190565b60405180910390a15080620007bc8162001a37565b91505062000671565b505050505050505050505050565b60006001600160e01b031982167f5a05180f000000000000000000000000000000000000000000000000000000001480620008145750620008148262000f66565b92915050565b7f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b62000847813362000ed9565b6001600160a01b03831660009081527fb5704d40d816f89c7ed881fad8dc86d867ee17f23bd4491183613bf1becdc1e8602052604090205460ff166200091c5760405162461bcd60e51b815260206004820152604260248201527f5241495220466163746f72793a2053706563696669656420636f6e747261637460448201527f2069736e277420616e20617070726f7665642065726337373720636f6e74726160648201527f6374000000000000000000000000000000000000000000000000000000000000608482015260a40162000509565b6040517f9bd9bbc60000000000000000000000000000000000000000000000000000000081523360048201526024810183905260606044820152601060648201527f466163746f72792057697468647261770000000000000000000000000000000060848201526001600160a01b03841690639bd9bbc69060a401600060405180830381600087803b158015620009b257600080fd5b505af1158015620009c7573d6000803e3d6000fd5b5050604080513381526001600160a01b03871660208201529081018590527f6337ed398c0e8467698c581374fdce4db14922df487b5a39483079f5f59b60a4925060600190505b60405180910390a1505050565b7f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b62000a48813362000ed9565b62000a747fe33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c1472308462000ac6565b6001600160a01b038316600081815260cb6020908152604091829020859055815192835282018490527f3229ffedb9ac4c1136e523cacfdab8c7621a1f1394161e5fa51850fbf4b4079b910162000a0e565b62000ad2828262000fcf565b600082815260976020526040902062000aec908262000ff9565b505050565b62000afd828262001010565b600082815260976020526040902062000aec90826200109c565b60c9602052816000526040600020818154811062000b3457600080fd5b6000918252602090912001546001600160a01b03169150829050565b600082815260976020526040812062000b6a9083620010b3565b9392505050565b60008181526097602052604081206200081490620010c1565b60cc818154811062000b9b57600080fd5b6000918252602090912001546001600160a01b0316905081565b62000afd8282620010cc565b600054610100900460ff168062000bdb575060005460ff16155b62000c4f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840162000509565b600054610100900460ff1615801562000c72576000805461ffff19166101011790555b6040517f29965a1d00000000000000000000000000000000000000000000000000000000815230600482018190527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b15801562000d0557600080fd5b505af115801562000d1a573d6000803e3d6000fd5b5050505062000d6a7fe33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c1472307f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b620010f6565b62000d967f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b336200114a565b62000dc27fe33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c147230836200114a565b6001600160a01b038216600081815260cb6020908152604091829020869055815192835282018590527f3229ffedb9ac4c1136e523cacfdab8c7621a1f1394161e5fa51850fbf4b4079b910160405180910390a1801562000aec576000805461ff0019169055505050565b7f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b62000e5a813362000ed9565b62000e867fe33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c1472308362000bb5565b6001600160a01b038216600081815260cb602090815260408083209290925590519182527ffae0368e2524d44fb9cd4e3d7b3c3ef4c00778a55c6121e48e49d11fb38c7e38910160405180910390a15050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff1662000f625762000f1a816001600160a01b0316601462001156565b62000f2783602062001156565b60405160200162000f3a92919062001847565b60408051601f198184030181529082905262461bcd60e51b825262000509916004016200193b565b5050565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806200081457507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161462000814565b60008281526065602052604090206001015462000fed813362000ed9565b62000aec838362001355565b600062000b6a836001600160a01b038416620013f9565b6001600160a01b0381163314620010905760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c660000000000000000000000000000000000606482015260840162000509565b62000f6282826200144b565b600062000b6a836001600160a01b038416620014cf565b600062000b6a8383620015d3565b600062000814825490565b600082815260656020526040902060010154620010ea813362000ed9565b62000aec83836200144b565b600082815260656020526040902060010154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a460009182526065602052604090912060010155565b62000ad2828262001600565b6060600062001167836002620019ae565b6200117490600262001970565b67ffffffffffffffff8111156200118f576200118f62001a97565b6040519080825280601f01601f191660200182016040528015620011ba576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110620011f457620011f462001a81565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811062001242576200124262001a81565b60200101906001600160f81b031916908160001a905350600062001268846002620019ae565b6200127590600162001970565b90505b600181111562001304577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110620012ba57620012ba62001a81565b1a60f81b828281518110620012d357620012d362001a81565b60200101906001600160f81b031916908160001a90535060049490941c93620012fc8162001a1d565b905062001278565b50831562000b6a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000509565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff1662000f625760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620013b53390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000818152600183016020526040812054620014425750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000814565b50600062000814565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff161562000f625760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015620015c8576000620014f6600183620019d0565b85549091506000906200150c90600190620019d0565b90508181146200157857600086600001828154811062001530576200153062001a81565b906000526020600020015490508087600001848154811062001556576200155662001a81565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806200158c576200158c62001a6b565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505062000814565b600091505062000814565b6000826000018281548110620015ed57620015ed62001a81565b9060005260206000200154905092915050565b62000f62828262001355565b6143b48062001aae83390190565b80356001600160a01b03811681146200163257600080fd5b919050565b60008083601f8401126200164a57600080fd5b50813567ffffffffffffffff8111156200166357600080fd5b6020830191508360208285010111156200167c57600080fd5b9250929050565b6000602082840312156200169657600080fd5b62000b6a826200161a565b60008060008060008060008060c0898b031215620016be57600080fd5b620016c9896200161a565b9750620016d960208a016200161a565b9650620016e960408a016200161a565b955060608901359450608089013567ffffffffffffffff808211156200170e57600080fd5b6200171c8c838d0162001637565b909650945060a08b01359150808211156200173657600080fd5b50620017458b828c0162001637565b999c989b5096995094979396929594505050565b600080604083850312156200176d57600080fd5b62001778836200161a565b946020939093013593505050565b6000602082840312156200179957600080fd5b5035919050565b60008060408385031215620017b457600080fd5b82359150620017c6602084016200161a565b90509250929050565b60008060408385031215620017e357600080fd5b50508035926020909101359150565b6000602082840312156200180557600080fd5b81356001600160e01b03198116811462000b6a57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835162001881816017850160208801620019ea565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351620018c0816028840160208801620019ea565b01602801949350505050565b6001600160a01b0385168152836020820152606060408201526000620018f76060830184866200181e565b9695505050505050565b606081526000620019176060830186886200181e565b90506001600160a01b038416602083015261ffff8316604083015295945050505050565b60208152600082518060208401526200195c816040850160208701620019ea565b601f01601f19169190910160400192915050565b6000821982111562001986576200198662001a55565b500190565b600082620019a957634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615620019cb57620019cb62001a55565b500290565b600082821015620019e557620019e562001a55565b500390565b60005b8381101562001a07578181015183820152602001620019ed565b8381111562001a17576000848401525b50505050565b60008162001a2f5762001a2f62001a55565b506000190190565b600060001982141562001a4e5762001a4e62001a55565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe60806040523480156200001157600080fd5b50604051620043b4380380620043b48339810160408190526200003491620003ea565b82604051806040016040528060048152602001632920a4a960e11b81525081600090805190602001906200006a92919062000314565b5080516200008090600190602084019062000314565b5050601080546001600160b01b0319163361ffff60a01b191617600160a01b61ffff85160217905550620000d3600080516020620043748339815191526000805160206200435483398151915262000157565b620000fd600080516020620043948339815191526000805160206200435483398151915262000157565b620001186000805160206200435483398151915283620001ab565b620001336000805160206200437483398151915283620001ab565b6200014e6000805160206200439483398151915283620001ab565b50505062000540565b6000828152600a6020526040902060010154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a46000918252600a602052604090912060010155565b620001c28282620001ee60201b6200217e1760201c565b6000828152600b60209081526040909120620001e99183906200218c620001fe821b17901c565b505050565b620001fa82826200021e565b5050565b600062000215836001600160a01b038416620002c2565b90505b92915050565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff16620001fa576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff191660011790556200027e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008181526001830160205260408120546200030b5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000218565b50600062000218565b8280546200032290620004ed565b90600052602060002090601f01602090048101928262000346576000855562000391565b82601f106200036157805160ff191683800117855562000391565b8280016001018555821562000391579182015b828111156200039157825182559160200191906001019062000374565b506200039f929150620003a3565b5090565b5b808211156200039f5760008155600101620003a4565b80516001600160a01b0381168114620003d257600080fd5b919050565b805161ffff81168114620003d257600080fd5b6000806000606084860312156200040057600080fd5b83516001600160401b03808211156200041857600080fd5b818601915086601f8301126200042d57600080fd5b8151818111156200044257620004426200052a565b604051601f8201601f19908116603f011681019083821181831017156200046d576200046d6200052a565b816040528281526020935089848487010111156200048a57600080fd5b600091505b82821015620004ae57848201840151818301850152908301906200048f565b82821115620004c05760008484830101525b9650620004d2915050868201620003ba565b93505050620004e460408501620003d7565b90509250925092565b600181811c908216806200050257607f821691505b602082108114156200052457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b613e0480620005506000396000f3fe608060405234801561001057600080fd5b50600436106102c85760003560e01c80636352211e1161017b578063ab9aae35116100d8578063ca15c8731161008c578063e4fbb60911610071578063e4fbb60914610636578063e985e9c51461065d578063fe6d81241461067057600080fd5b8063ca15c87314610610578063d547741f1461062357600080fd5b8063bda5ec33116100bd578063bda5ec33146105c8578063c155531d146105db578063c87b56dd146105fd57600080fd5b8063ab9aae35146105a2578063b88d4fde146105b557600080fd5b806391d148541161012f57806397099fb21161011457806397099fb214610574578063a217fddf14610587578063a22cb4651461058f57600080fd5b806391d148541461053357806395d89b411461056c57600080fd5b806370a082311161016057806370a08231146104da578063876654a0146104ed5780639010d07c1461052057600080fd5b80636352211e146104b457806364d54151146104c757600080fd5b806323b872dd1161022957806336568abe116101dd57806342842e0e116101c257806342842e0e1461046a5780634f6ccce71461047d5780635a1f3c281461049057600080fd5b806336568abe146104445780633d42f2061461045757600080fd5b8063276a28a31161020e578063276a28a31461040b5780632f2ff15d1461041e5780632f745c591461043157600080fd5b806323b872dd146103d5578063248a9ca3146103e857600080fd5b806315a182411161028057806318160ddd1161026557806318160ddd146103a5578063195f78ae146103ad5780631c10106f146103cd57600080fd5b806315a182411461035d578063175c4ef81461037057600080fd5b8063081812fc116102b1578063081812fc1461030a578063095ea7b314610335578063156e29f61461034a57600080fd5b806301ffc9a7146102cd57806306fdde03146102f5575b600080fd5b6102e06102db3660046137f7565b610697565b60405190151581526020015b60405180910390f35b6102fd6106db565b6040516102ec9190613b51565b61031d610318366004613799565b61076d565b6040516001600160a01b0390911681526020016102ec565b61034861034336600461373c565b610807565b005b610348610358366004613766565b610939565b61034861036b366004613936565b610cca565b6103977f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce81565b6040519081526020016102ec565b600854610397565b6103976103bb366004613799565b600f6020526000908152604090205481565b600e54610397565b6103486103e3366004613648565b61106d565b6103976103f6366004613799565b6000908152600a602052604090206001015490565b6102e0610419366004613799565b6110f4565b61034861042c3660046137b2565b61117a565b61039761043f36600461373c565b61119c565b6103486104523660046137b2565b611244565b6102e061046536600461390a565b611266565b610348610478366004613648565b61146c565b61039761048b366004613799565b611487565b6104a361049e366004613799565b61152b565b6040516102ec959493929190613b99565b61031d6104c2366004613799565b611694565b6103486104d5366004613831565b61171f565b6103976104e83660046135fa565b61185c565b6105006104fb366004613799565b6118f6565b6040805194855260208501939093529183015260608201526080016102ec565b61031d61052e3660046137d5565b611acd565b6102e06105413660046137b2565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6102fd611ae5565b6102e061058236600461373c565b611af4565b610397600081565b61034861059d366004613700565b611b52565b6103976105b0366004613799565b611c17565b6103486105c3366004613684565b611c58565b6103976105d636600461390a565b611ce6565b6105ee6105e936600461388a565b611f66565b6040516102ec93929190613b20565b6102fd61060b366004613799565b611ff9565b61039761061e366004613799565b6120ee565b6103486106313660046137b2565b612105565b6103977f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db681565b6102e061066b366004613615565b61210f565b6103977ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b60006001600160e01b031982167fc0aa9aba0000000000000000000000000000000000000000000000000000000014806106d557506106d5826121a1565b92915050565b6060600080546106ea90613cdd565b80601f016020809104026020016040519081016040528092919081815260200182805461071690613cdd565b80156107635780601f1061073857610100808354040283529160200191610763565b820191906000526020600020905b81548152906001019060200180831161074657829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166107eb5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061081282611694565b9050806001600160a01b0316836001600160a01b0316141561089c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016107e2565b336001600160a01b03821614806108b857506108b8813361210f565b61092a5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016107e2565b61093483836121df565b505050565b7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9610964813361225a565b600e54839081106109c65760405162461bcd60e51b815260206004820152602660248201527f52414952204552433732313a20436f6c6c656374696f6e20646f6573206e6f7460448201526508195e1a5cdd60d21b60648201526084016107e2565b6000600e85815481106109db576109db613d89565b90600052602060002090600502019050806000015481600101546109ff9190613c83565b841115610a4e5760405162461bcd60e51b815260206004820181905260248201527f52414952204552433732313a20496e76616c696420746f6b656e20696e64657860448201526064016107e2565b610a6786858360000154610a629190613c38565b6122da565b84600f6000868460000154610a7c9190613c38565b815260200190815260200160002081905550806002016000815480929190610aa390613cc6565b9091555060009050805b6004830154811015610c7b578254610ac6908790613c38565b600d846004018381548110610add57610add613d89565b906000526020600020015481548110610af857610af8613d89565b90600052602060002090600402016000015411158015610b6757508254610b20908790613c38565b600d846004018381548110610b3757610b37613d89565b906000526020600020015481548110610b5257610b52613d89565b90600052602060002090600402016001015410155b15610c6957600d836004018281548110610b8357610b83613d89565b906000526020600020015481548110610b9e57610b9e613d89565b90600052602060002090600402019150826004018181548110610bc357610bc3613d89565b9060005260206000200154600c6000888660000154610be29190613c38565b8152602081019190915260400160002055600282015415610c6457600282018054906000610c0f83613cc6565b90915550506002820154610c645781546001830154604080518a815260208101939093528201527fd3edbeb94dfb8eadcd8c291774b9ac3cc9b06af829273e295bf3197849934b889060600160405180910390a15b610c7b565b80610c7381613d18565b915050610aad565b506002820154610cc157857f3ab828a3fee3d542c87fb145e900664325100c3c0b2e2a2cca38685b6de1b27183600301604051610cb89190613b86565b60405180910390a25b50505050505050565b7f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db6610cf5813361225a565b600e5485908110610d575760405162461bcd60e51b815260206004820152602660248201527f52414952204552433732313a20436f6c6c656374696f6e20646f6573206e6f7460448201526508195e1a5cdd60d21b60648201526084016107e2565b6000600e8781548110610d6c57610d6c613d89565b906000526020600020906005020190508060010154858260000154610d919190613c38565b1115610e055760405162461bcd60e51b815260206004820152602160248201527f52414952204552433732313a20496e76616c696420656e64696e6720746f6b6560448201527f6e0000000000000000000000000000000000000000000000000000000000000060648201526084016107e2565b80546001820154610e169190613c83565b610e208787613c83565b1115610e945760405162461bcd60e51b815260206004820152602160248201527f52414952204552433732313a20496e76616c696420746f6b656e206c696d697460448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016107e2565b83610e9f8787613c83565b610eaa906001613c38565b1015610f1e5760405162461bcd60e51b815260206004820152602d60248201527f52414952204552433732313a20496e76616c6964206e756d626572206f66207460448201527f6f6b656e7320746f206c6f636b0000000000000000000000000000000000000060648201526084016107e2565b610f29878787611266565b610f755760405162461bcd60e51b815260206004820152601f60248201527f52414952204552433732313a2043616e6e6f7420637265617465206c6f636b0060448201526064016107e2565b600d8054600181018255600091909152815460049091027fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50190610fba908890613c38565b81558154610fc9908790613c38565b6001808301919091556002820186905560038201899055600d546004840191610ff191613c83565b8154600181018355600092835260209092209091015581547f0b8fece546364ce1dcadcf45028659aff64e7a166d735eb32da27050fd520f69908990611038908a90613c38565b8454611045908a90613c38565b888660030160405161105b959493929190613c02565b60405180910390a15050505050505050565b61107733826122f4565b6110e95760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016107e2565b6109348383836123cb565b6000818152600f6020908152604080832054600c909252822054600d8054909190811061112357611123613d89565b9060005260206000209060040201600301541480156106d557506000828152600c6020526040812054600d8054909190811061116157611161613d89565b9060005260206000209060040201600201541192915050565b61118482826125b0565b6000828152600b60205260409020610934908261218c565b60006111a78361185c565b821061121b5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084016107e2565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61124e82826125d6565b6000828152600b60205260409020610934908261265e565b600080600e858154811061127c5761127c613d89565b90600052602060002090600502019050806000015481600101546112a09190613c83565b8411806112bc5750805460018201546112b99190613c83565b83115b156112cb576000915050611465565b60005b600482015481101561145e5781546112e7908690613c38565b600d8360040183815481106112fe576112fe613d89565b90600052602060002001548154811061131957611319613d89565b9060005260206000209060040201600001541115801561138857508154611341908690613c38565b600d83600401838154811061135857611358613d89565b90600052602060002001548154811061137357611373613d89565b90600052602060002090600402016001015410155b8061143c5750815461139b908590613c38565b600d8360040183815481106113b2576113b2613d89565b9060005260206000200154815481106113cd576113cd613d89565b9060005260206000209060040201600001541115801561143c575081546113f5908590613c38565b600d83600401838154811061140c5761140c613d89565b90600052602060002001548154811061142757611427613d89565b90600052602060002090600402016001015410155b1561144c57600092505050611465565b8061145681613d18565b9150506112ce565b5060019150505b9392505050565b61093483838360405180602001604052806000815250611c58565b600061149260085490565b82106115065760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016107e2565b6008828154811061151957611519613d89565b90600052602060002001549050919050565b60008060006060806000600e878154811061154857611548613d89565b90600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201805461158f90613cdd565b80601f01602080910402602001604051908101604052809291908181526020018280546115bb90613cdd565b80156116085780601f106115dd57610100808354040283529160200191611608565b820191906000526020600020905b8154815290600101906020018083116115eb57829003601f168201915b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561166057602002820191906000526020600020905b81548152602001906001019080831161164c575b5050509190925250508151602083015160408401516060850151608090950151929c919b5099509297509550909350505050565b6000818152600260205260408120546001600160a01b0316806106d55760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016107e2565b7f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db661174a813361225a565b600e546000901561179857600e805461176590600190613c83565b8154811061177557611775613d89565b90600052602060002090600502016001015460016117939190613c38565b61179b565b60005b600e8054600181810183556000929092526005027fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd018281559192506117e18584613c38565b6117eb9190613c83565b6001820155845161180590600383019060208801906134cf565b5060028101849055600e5461181c90600190613c83565b7f9ae7dd5dbfc3938737af70872685a3fb26f364d20134cd30be25108122626a17868660405161184d929190613b64565b60405180910390a25050505050565b60006001600160a01b0382166118da5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f20616464726573730000000000000000000000000000000000000000000060648201526084016107e2565b506001600160a01b031660009081526003602052604090205490565b6000806000806000600d868154811061191157611911613d89565b906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090506000600e82606001518154811061196d5761196d613d89565b90600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820180546119b490613cdd565b80601f01602080910402602001604051908101604052809291908181526020018280546119e090613cdd565b8015611a2d5780601f10611a0257610100808354040283529160200191611a2d565b820191906000526020600020905b815481529060010190602001808311611a1057829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611a8557602002820191906000526020600020905b815481526020019060010190808311611a71575b50505091909252505081518451929350611aa192909150613c83565b81516020840151611ab29190613c83565b83604001518460600151955095509550955050509193509193565b6000828152600b602052604081206114659083612673565b6060600180546106ea90613cdd565b6000805b611b018461185c565b811015611b485782600f6000611b17878561119c565b8152602001908152602001600020541415611b365760019150506106d5565b80611b4081613d18565b915050611af8565b5060009392505050565b6001600160a01b038216331415611bab5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107e2565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000818152600f6020526040812054600e80549091908110611c3b57611c3b613d89565b906000526020600020906005020160000154826106d59190613c83565b611c6233836122f4565b611cd45760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016107e2565b611ce08484848461267f565b50505050565b60008380600e8054905011611d4c5760405162461bcd60e51b815260206004820152602660248201527f52414952204552433732313a20436f6c6c656374696f6e20646f6573206e6f7460448201526508195e1a5cdd60d21b60648201526084016107e2565b6000600e8681548110611d6157611d61613d89565b90600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382018054611da890613cdd565b80601f0160208091040260200160405190810160405280929190818152602001828054611dd490613cdd565b8015611e215780601f10611df657610100808354040283529160200191611e21565b820191906000526020600020905b815481529060010190602001808311611e0457829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611e7957602002820191906000526020600020905b815481526020019060010190808311611e65575b50505050508152505090506000858260000151611e969190613c38565b90505b8151611ea6908690613c38565b8111611eef576000818152600260205260409020546001600160a01b0316611edd578151611ed49082613c83565b93505050611f5e565b80611ee781613d18565b915050611e99565b5060405162461bcd60e51b815260206004820152603960248201527f52414952204552433732313a20546865726520617265206e6f20617661696c6160448201527f626c6520746f6b656e7320696e20746869732072616e67652e0000000000000060648201526084016107e2565b509392505050565b6000806060611f967f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db66000611acd565b601054620186a090611fc49074010000000000000000000000000000000000000000900461ffff1689613c64565b611fce9190613c50565b60408051602081018b9052016040516020818303038152906040529250925092509450945094915050565b6000818152600260205260409020546060906001600160a01b03166120865760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e000000000000000000000000000000000060648201526084016107e2565b600061209d60408051602081019091526000815290565b905060008151116120bd5760405180602001604052806000815250611465565b806120c7846126fd565b6040516020016120d8929190613a34565b6040516020818303038152906040529392505050565b6000818152600b602052604081206106d5906127fb565b61124e8282612805565b6001600160a01b03811660009081527f4e6e614aa308bd78bac28541285c453cfb7abbecc03cb60a1e70ec8347070f98602052604081205460ff168061146557506001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff16611465565b612188828261282b565b5050565b6000611465836001600160a01b0384166128cd565b60006001600160e01b031982167f5a05180f0000000000000000000000000000000000000000000000000000000014806106d557506106d58261291c565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416908117909155819061222182611694565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff1661218857612298816001600160a01b0316601461295a565b6122a383602061295a565b6040516020016122b4929190613a63565b60408051601f198184030181529082905262461bcd60e51b82526107e291600401613b51565b612188828260405180602001604052806000815250612b1f565b6000818152600260205260408120546001600160a01b031661236d5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016107e2565b600061237883611694565b9050806001600160a01b0316846001600160a01b031614806123b35750836001600160a01b03166123a88461076d565b6001600160a01b0316145b806123c357506123c3818561210f565b949350505050565b826001600160a01b03166123de82611694565b6001600160a01b03161461245a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e000000000000000000000000000000000000000000000060648201526084016107e2565b6001600160a01b0382166124d55760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016107e2565b6124e0838383612b9d565b6124eb6000826121df565b6001600160a01b0383166000908152600360205260408120805460019290612514908490613c83565b90915550506001600160a01b0382166000908152600360205260408120805460019290612542908490613c38565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000828152600a60205260409020600101546125cc813361225a565b610934838361282b565b6001600160a01b03811633146126545760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016107e2565b6121888282612cea565b6000611465836001600160a01b038416612d6d565b60006114658383612e5a565b61268a8484846123cb565b61269684848484612efb565b611ce05760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016107e2565b6060816127215750506040805180820190915260018152600360fc1b602082015290565b8160005b811561274b578061273581613d18565b91506127449050600a83613c50565b9150612725565b60008167ffffffffffffffff81111561276657612766613d9f565b6040519080825280601f01601f191660200182016040528015612790576020820181803683370190505b5090505b84156123c3576127a5600183613c83565b91506127b2600a86613d33565b6127bd906030613c38565b60f81b8183815181106127d2576127d2613d89565b60200101906001600160f81b031916908160001a9053506127f4600a86613c50565b9450612794565b60006106d5825490565b6000828152600a6020526040902060010154612821813361225a565b6109348383612cea565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff16612188576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff191660011790556128893390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000818152600183016020526040812054612914575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106d5565b5060006106d5565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806106d557506106d582613053565b60606000612969836002613c64565b612974906002613c38565b67ffffffffffffffff81111561298c5761298c613d9f565b6040519080825280601f01601f1916602001820160405280156129b6576020820181803683370190505b509050600360fc1b816000815181106129d1576129d1613d89565b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612a1c57612a1c613d89565b60200101906001600160f81b031916908160001a9053506000612a40846002613c64565b612a4b906001613c38565b90505b6001811115612ad0577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612a8c57612a8c613d89565b1a60f81b828281518110612aa257612aa2613d89565b60200101906001600160f81b031916908160001a90535060049490941c93612ac981613cc6565b9050612a4e565b5083156114655760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107e2565b612b298383613091565b612b366000848484612efb565b6109345760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016107e2565b6001600160a01b03831615801590612bbd57506001600160a01b03821615155b15612cdf576000818152600f6020908152604080832054600c90925290912054600d80549091908110612bf257612bf2613d89565b9060005260206000209060040201600301541415612cb5576000818152600c6020526040902054600d80549091908110612c2e57612c2e613d89565b906000526020600020906004020160020154600014612cb55760405162461bcd60e51b815260206004820152603a60248201527f52414952204552433732313a205472616e736665727320666f7220746869732060448201527f72616e6765206172652063757272656e746c79206c6f636b656400000000000060648201526084016107e2565b612cdf7f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce3361225a565b6109348383836131ec565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff1615612188576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015612e50576000612d91600183613c83565b8554909150600090612da590600190613c83565b90506000866000018281548110612dbe57612dbe613d89565b9060005260206000200154905080876000018481548110612de157612de1613d89565b600091825260208083209091019290925582815260018901909152604090208490558654879080612e1457612e14613d73565b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506106d5565b60009150506106d5565b81546000908210612ed35760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60448201527f647300000000000000000000000000000000000000000000000000000000000060648201526084016107e2565b826000018281548110612ee857612ee8613d89565b9060005260206000200154905092915050565b60006001600160a01b0384163b1561304857604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612f3f903390899088908890600401613ae4565b602060405180830381600087803b158015612f5957600080fd5b505af1925050508015612f89575060408051601f3d908101601f19168201909252612f8691810190613814565b60015b61302e573d808015612fb7576040519150601f19603f3d011682016040523d82523d6000602084013e612fbc565b606091505b5080516130265760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016107e2565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506123c3565b506001949350505050565b60006001600160e01b031982167f780e9d630000000000000000000000000000000000000000000000000000000014806106d557506106d5826132a4565b6001600160a01b0382166130e75760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107e2565b6000818152600260205260409020546001600160a01b03161561314c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107e2565b61315860008383612b9d565b6001600160a01b0382166000908152600360205260408120805460019290613181908490613c38565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b0383166132475761324281600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61326a565b816001600160a01b0316836001600160a01b03161461326a5761326a838261333f565b6001600160a01b03821661328157610934816133dc565b826001600160a01b0316826001600160a01b03161461093457610934828261348b565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061330757506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806106d557507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146106d5565b6000600161334c8461185c565b6133569190613c83565b6000838152600760205260409020549091508082146133a9576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906133ee90600190613c83565b6000838152600960205260408120546008805493945090928490811061341657613416613d89565b90600052602060002001549050806008838154811061343757613437613d89565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061346f5761346f613d73565b6001900381819060005260206000200160009055905550505050565b60006134968361185c565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b8280546134db90613cdd565b90600052602060002090601f0160209004810192826134fd5760008555613543565b82601f1061351657805160ff1916838001178555613543565b82800160010185558215613543579182015b82811115613543578251825591602001919060010190613528565b5061354f929150613553565b5090565b5b8082111561354f5760008155600101613554565b600067ffffffffffffffff8084111561358357613583613d9f565b604051601f8501601f19908116603f011681019082821181831017156135ab576135ab613d9f565b816040528093508581528686860111156135c457600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146135f557600080fd5b919050565b60006020828403121561360c57600080fd5b611465826135de565b6000806040838503121561362857600080fd5b613631836135de565b915061363f602084016135de565b90509250929050565b60008060006060848603121561365d57600080fd5b613666846135de565b9250613674602085016135de565b9150604084013590509250925092565b6000806000806080858703121561369a57600080fd5b6136a3856135de565b93506136b1602086016135de565b925060408501359150606085013567ffffffffffffffff8111156136d457600080fd5b8501601f810187136136e557600080fd5b6136f487823560208401613568565b91505092959194509250565b6000806040838503121561371357600080fd5b61371c836135de565b91506020830135801515811461373157600080fd5b809150509250929050565b6000806040838503121561374f57600080fd5b613758836135de565b946020939093013593505050565b60008060006060848603121561377b57600080fd5b613784846135de565b95602085013595506040909401359392505050565b6000602082840312156137ab57600080fd5b5035919050565b600080604083850312156137c557600080fd5b8235915061363f602084016135de565b600080604083850312156137e857600080fd5b50508035926020909101359150565b60006020828403121561380957600080fd5b813561146581613db5565b60006020828403121561382657600080fd5b815161146581613db5565b6000806040838503121561384457600080fd5b823567ffffffffffffffff81111561385b57600080fd5b8301601f8101851361386c57600080fd5b61387b85823560208401613568565b95602094909401359450505050565b600080600080606085870312156138a057600080fd5b8435935060208501359250604085013567ffffffffffffffff808211156138c657600080fd5b818701915087601f8301126138da57600080fd5b8135818111156138e957600080fd5b8860208285010111156138fb57600080fd5b95989497505060200194505050565b60008060006060848603121561391f57600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561394c57600080fd5b5050823594602084013594506040840135936060013592509050565b60008151808452613980816020860160208601613c9a565b601f01601f19169290920160200192915050565b8054600090600181811c90808316806139ae57607f831692505b60208084108214156139d057634e487b7160e01b600052602260045260246000fd5b838852602088018280156139eb57600181146139fc57613a27565b60ff19871682528282019750613a27565b60008981526020902060005b87811015613a2157815484820152908601908401613a08565b83019850505b5050505050505092915050565b60008351613a46818460208801613c9a565b835190830190613a5a818360208801613c9a565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613a9b816017850160208801613c9a565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613ad8816028840160208801613c9a565b01602801949350505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152613b166080830184613968565b9695505050505050565b6001600160a01b0384168152826020820152606060408201526000613b486060830184613968565b95945050505050565b6020815260006114656020830184613968565b604081526000613b776040830185613968565b90508260208301529392505050565b6020815260006114656020830184613994565b85815260006020868184015285604084015260a06060840152613bbf60a0840186613968565b838103608085015284518082528286019183019060005b81811015613bf257835183529284019291840191600101613bd6565b50909a9950505050505050505050565b85815284602082015283604082015282606082015260a060808201526000613c2d60a0830184613994565b979650505050505050565b60008219821115613c4b57613c4b613d47565b500190565b600082613c5f57613c5f613d5d565b500490565b6000816000190483118215151615613c7e57613c7e613d47565b500290565b600082821015613c9557613c95613d47565b500390565b60005b83811015613cb5578181015183820152602001613c9d565b83811115611ce05750506000910152565b600081613cd557613cd5613d47565b506000190190565b600181811c90821680613cf157607f821691505b60208210811415613d1257634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613d2c57613d2c613d47565b5060010190565b600082613d4257613d42613d5d565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114613dcb57600080fd5b5056fea2646970667358221220bea9992b0ec65cb917ceccd55d54c388a410b7ce1469659536648dfa65f85dc264736f6c634300080600333c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db6f0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fcea2646970667358221220910a422a9bacc9e9c6f5511299e66febbf314c486d532e8c9ab937722941843364736f6c63430008060033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001ac5760003560e01c8063871797f711620000f5578063ca15c8731162000097578063da35a26f116200006e578063da35a26f1462000400578063dbdda1a11462000417578063f42512ce146200042e57600080fd5b8063ca15c87314620003bb578063cd53d08e14620003d2578063d547741f14620003e957600080fd5b8063956f903811620000cc578063956f903814620002d7578063a217fddf14620003a9578063aa55ecbc14620003b257600080fd5b8063871797f714620003335780639010d07c146200035657806391d14854146200036d57600080fd5b8063248a9ca3116200015f578063543a16b11162000136578063543a16b114620002af57806366cdbf8614620002d75780636a1972bd146200030357600080fd5b8063248a9ca3146200025b5780632f2ff15d146200028157806336568abe146200029857600080fd5b806306b091f9116200019457806306b091f914620001f6578063117803e3146200020d5780631c6ee6a2146200024457600080fd5b806223de2914620001b157806301ffc9a714620001ca575b600080fd5b620001c8620001c2366004620016a1565b6200045a565b005b620001e1620001db366004620017f2565b620007d3565b60405190151581526020015b60405180910390f35b620001c86200020736600462001759565b6200081a565b620002357f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b81565b604051908152602001620001ed565b620001c86200025536600462001759565b62000a1b565b620002356200026c36600462001786565b60009081526065602052604090206001015490565b620001c862000292366004620017a0565b62000ac6565b620001c8620002a9366004620017a0565b62000af1565b620002357fe33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c14723081565b62000235620002e836600462001683565b6001600160a01b0316600090815260c9602052604090205490565b6200031a6200031436600462001759565b62000b17565b6040516001600160a01b039091168152602001620001ed565b620002356200034436600462001683565b60cb6020526000908152604090205481565b6200031a62000367366004620017cf565b62000b50565b620001e16200037e366004620017a0565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b62000235600081565b60cc5462000235565b62000235620003cc36600462001786565b62000b71565b6200031a620003e336600462001786565b62000b8a565b620001c8620003fa366004620017a0565b62000bb5565b620001c862000411366004620017a0565b62000bc1565b620001c86200042836600462001683565b62000e2d565b6200031a6200043f36600462001683565b60ca602052600090815260409020546001600160a01b031681565b7fe33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c14723062000487813362000ed9565b33600090815260cb6020526040902054861015620005125760405162461bcd60e51b815260206004820152603960248201527f5241495220466163746f72793a206e6f7420656e6f756768205241495220746f60448201527f6b656e7320746f206465706c6f79206120636f6e74726163740000000000000060648201526084015b60405180910390fd5b33600090815260cb60205260408120546200052e90886200198b565b33600090815260cb6020526040812054919250906200054f908390620019ae565b6200055b9089620019d0565b1115620005eb5733600081815260cb6020526040902054639bd9bbc6908b9062000587908590620019ae565b62000593908b620019d0565b89896040518563ffffffff1660e01b8152600401620005b69493929190620018cc565b600060405180830381600087803b158015620005d157600080fd5b505af1158015620005e6573d6000803e3d6000fd5b505050505b6001600160a01b038916600090815260c96020526040902080546200066e5760cc80546001810182556000919091527f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038c161790555b60005b82811015620007c557600088888d61753060405162000690906200160c565b6200069f949392919062001901565b604051809103906000f080158015620006bc573d6000803e3d6000fd5b50905082819080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b031602179055508b60ca6000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f8541d3f155d1d78bb99039323325761c94686b6f359d2ab4f5c645551f55fa118c848054905083604051620007a7939291906001600160a01b0393841681526020810192909252909116604082015260600190565b60405180910390a15080620007bc8162001a37565b91505062000671565b505050505050505050505050565b60006001600160e01b031982167f5a05180f000000000000000000000000000000000000000000000000000000001480620008145750620008148262000f66565b92915050565b7f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b62000847813362000ed9565b6001600160a01b03831660009081527fb5704d40d816f89c7ed881fad8dc86d867ee17f23bd4491183613bf1becdc1e8602052604090205460ff166200091c5760405162461bcd60e51b815260206004820152604260248201527f5241495220466163746f72793a2053706563696669656420636f6e747261637460448201527f2069736e277420616e20617070726f7665642065726337373720636f6e74726160648201527f6374000000000000000000000000000000000000000000000000000000000000608482015260a40162000509565b6040517f9bd9bbc60000000000000000000000000000000000000000000000000000000081523360048201526024810183905260606044820152601060648201527f466163746f72792057697468647261770000000000000000000000000000000060848201526001600160a01b03841690639bd9bbc69060a401600060405180830381600087803b158015620009b257600080fd5b505af1158015620009c7573d6000803e3d6000fd5b5050604080513381526001600160a01b03871660208201529081018590527f6337ed398c0e8467698c581374fdce4db14922df487b5a39483079f5f59b60a4925060600190505b60405180910390a1505050565b7f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b62000a48813362000ed9565b62000a747fe33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c1472308462000ac6565b6001600160a01b038316600081815260cb6020908152604091829020859055815192835282018490527f3229ffedb9ac4c1136e523cacfdab8c7621a1f1394161e5fa51850fbf4b4079b910162000a0e565b62000ad2828262000fcf565b600082815260976020526040902062000aec908262000ff9565b505050565b62000afd828262001010565b600082815260976020526040902062000aec90826200109c565b60c9602052816000526040600020818154811062000b3457600080fd5b6000918252602090912001546001600160a01b03169150829050565b600082815260976020526040812062000b6a9083620010b3565b9392505050565b60008181526097602052604081206200081490620010c1565b60cc818154811062000b9b57600080fd5b6000918252602090912001546001600160a01b0316905081565b62000afd8282620010cc565b600054610100900460ff168062000bdb575060005460ff16155b62000c4f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840162000509565b600054610100900460ff1615801562000c72576000805461ffff19166101011790555b6040517f29965a1d00000000000000000000000000000000000000000000000000000000815230600482018190527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b15801562000d0557600080fd5b505af115801562000d1a573d6000803e3d6000fd5b5050505062000d6a7fe33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c1472307f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b620010f6565b62000d967f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b336200114a565b62000dc27fe33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c147230836200114a565b6001600160a01b038216600081815260cb6020908152604091829020869055815192835282018590527f3229ffedb9ac4c1136e523cacfdab8c7621a1f1394161e5fa51850fbf4b4079b910160405180910390a1801562000aec576000805461ff0019169055505050565b7f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b62000e5a813362000ed9565b62000e867fe33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c1472308362000bb5565b6001600160a01b038216600081815260cb602090815260408083209290925590519182527ffae0368e2524d44fb9cd4e3d7b3c3ef4c00778a55c6121e48e49d11fb38c7e38910160405180910390a15050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff1662000f625762000f1a816001600160a01b0316601462001156565b62000f2783602062001156565b60405160200162000f3a92919062001847565b60408051601f198184030181529082905262461bcd60e51b825262000509916004016200193b565b5050565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806200081457507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161462000814565b60008281526065602052604090206001015462000fed813362000ed9565b62000aec838362001355565b600062000b6a836001600160a01b038416620013f9565b6001600160a01b0381163314620010905760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c660000000000000000000000000000000000606482015260840162000509565b62000f6282826200144b565b600062000b6a836001600160a01b038416620014cf565b600062000b6a8383620015d3565b600062000814825490565b600082815260656020526040902060010154620010ea813362000ed9565b62000aec83836200144b565b600082815260656020526040902060010154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a460009182526065602052604090912060010155565b62000ad2828262001600565b6060600062001167836002620019ae565b6200117490600262001970565b67ffffffffffffffff8111156200118f576200118f62001a97565b6040519080825280601f01601f191660200182016040528015620011ba576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110620011f457620011f462001a81565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811062001242576200124262001a81565b60200101906001600160f81b031916908160001a905350600062001268846002620019ae565b6200127590600162001970565b90505b600181111562001304577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110620012ba57620012ba62001a81565b1a60f81b828281518110620012d357620012d362001a81565b60200101906001600160f81b031916908160001a90535060049490941c93620012fc8162001a1d565b905062001278565b50831562000b6a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000509565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff1662000f625760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620013b53390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000818152600183016020526040812054620014425750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000814565b50600062000814565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff161562000f625760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015620015c8576000620014f6600183620019d0565b85549091506000906200150c90600190620019d0565b90508181146200157857600086600001828154811062001530576200153062001a81565b906000526020600020015490508087600001848154811062001556576200155662001a81565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806200158c576200158c62001a6b565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505062000814565b600091505062000814565b6000826000018281548110620015ed57620015ed62001a81565b9060005260206000200154905092915050565b62000f62828262001355565b6143b48062001aae83390190565b80356001600160a01b03811681146200163257600080fd5b919050565b60008083601f8401126200164a57600080fd5b50813567ffffffffffffffff8111156200166357600080fd5b6020830191508360208285010111156200167c57600080fd5b9250929050565b6000602082840312156200169657600080fd5b62000b6a826200161a565b60008060008060008060008060c0898b031215620016be57600080fd5b620016c9896200161a565b9750620016d960208a016200161a565b9650620016e960408a016200161a565b955060608901359450608089013567ffffffffffffffff808211156200170e57600080fd5b6200171c8c838d0162001637565b909650945060a08b01359150808211156200173657600080fd5b50620017458b828c0162001637565b999c989b5096995094979396929594505050565b600080604083850312156200176d57600080fd5b62001778836200161a565b946020939093013593505050565b6000602082840312156200179957600080fd5b5035919050565b60008060408385031215620017b457600080fd5b82359150620017c6602084016200161a565b90509250929050565b60008060408385031215620017e357600080fd5b50508035926020909101359150565b6000602082840312156200180557600080fd5b81356001600160e01b03198116811462000b6a57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835162001881816017850160208801620019ea565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351620018c0816028840160208801620019ea565b01602801949350505050565b6001600160a01b0385168152836020820152606060408201526000620018f76060830184866200181e565b9695505050505050565b606081526000620019176060830186886200181e565b90506001600160a01b038416602083015261ffff8316604083015295945050505050565b60208152600082518060208401526200195c816040850160208701620019ea565b601f01601f19169190910160400192915050565b6000821982111562001986576200198662001a55565b500190565b600082620019a957634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615620019cb57620019cb62001a55565b500290565b600082821015620019e557620019e562001a55565b500390565b60005b8381101562001a07578181015183820152602001620019ed565b8381111562001a17576000848401525b50505050565b60008162001a2f5762001a2f62001a55565b506000190190565b600060001982141562001a4e5762001a4e62001a55565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe60806040523480156200001157600080fd5b50604051620043b4380380620043b48339810160408190526200003491620003ea565b82604051806040016040528060048152602001632920a4a960e11b81525081600090805190602001906200006a92919062000314565b5080516200008090600190602084019062000314565b5050601080546001600160b01b0319163361ffff60a01b191617600160a01b61ffff85160217905550620000d3600080516020620043748339815191526000805160206200435483398151915262000157565b620000fd600080516020620043948339815191526000805160206200435483398151915262000157565b620001186000805160206200435483398151915283620001ab565b620001336000805160206200437483398151915283620001ab565b6200014e6000805160206200439483398151915283620001ab565b50505062000540565b6000828152600a6020526040902060010154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a46000918252600a602052604090912060010155565b620001c28282620001ee60201b6200217e1760201c565b6000828152600b60209081526040909120620001e99183906200218c620001fe821b17901c565b505050565b620001fa82826200021e565b5050565b600062000215836001600160a01b038416620002c2565b90505b92915050565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff16620001fa576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff191660011790556200027e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008181526001830160205260408120546200030b5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000218565b50600062000218565b8280546200032290620004ed565b90600052602060002090601f01602090048101928262000346576000855562000391565b82601f106200036157805160ff191683800117855562000391565b8280016001018555821562000391579182015b828111156200039157825182559160200191906001019062000374565b506200039f929150620003a3565b5090565b5b808211156200039f5760008155600101620003a4565b80516001600160a01b0381168114620003d257600080fd5b919050565b805161ffff81168114620003d257600080fd5b6000806000606084860312156200040057600080fd5b83516001600160401b03808211156200041857600080fd5b818601915086601f8301126200042d57600080fd5b8151818111156200044257620004426200052a565b604051601f8201601f19908116603f011681019083821181831017156200046d576200046d6200052a565b816040528281526020935089848487010111156200048a57600080fd5b600091505b82821015620004ae57848201840151818301850152908301906200048f565b82821115620004c05760008484830101525b9650620004d2915050868201620003ba565b93505050620004e460408501620003d7565b90509250925092565b600181811c908216806200050257607f821691505b602082108114156200052457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b613e0480620005506000396000f3fe608060405234801561001057600080fd5b50600436106102c85760003560e01c80636352211e1161017b578063ab9aae35116100d8578063ca15c8731161008c578063e4fbb60911610071578063e4fbb60914610636578063e985e9c51461065d578063fe6d81241461067057600080fd5b8063ca15c87314610610578063d547741f1461062357600080fd5b8063bda5ec33116100bd578063bda5ec33146105c8578063c155531d146105db578063c87b56dd146105fd57600080fd5b8063ab9aae35146105a2578063b88d4fde146105b557600080fd5b806391d148541161012f57806397099fb21161011457806397099fb214610574578063a217fddf14610587578063a22cb4651461058f57600080fd5b806391d148541461053357806395d89b411461056c57600080fd5b806370a082311161016057806370a08231146104da578063876654a0146104ed5780639010d07c1461052057600080fd5b80636352211e146104b457806364d54151146104c757600080fd5b806323b872dd1161022957806336568abe116101dd57806342842e0e116101c257806342842e0e1461046a5780634f6ccce71461047d5780635a1f3c281461049057600080fd5b806336568abe146104445780633d42f2061461045757600080fd5b8063276a28a31161020e578063276a28a31461040b5780632f2ff15d1461041e5780632f745c591461043157600080fd5b806323b872dd146103d5578063248a9ca3146103e857600080fd5b806315a182411161028057806318160ddd1161026557806318160ddd146103a5578063195f78ae146103ad5780631c10106f146103cd57600080fd5b806315a182411461035d578063175c4ef81461037057600080fd5b8063081812fc116102b1578063081812fc1461030a578063095ea7b314610335578063156e29f61461034a57600080fd5b806301ffc9a7146102cd57806306fdde03146102f5575b600080fd5b6102e06102db3660046137f7565b610697565b60405190151581526020015b60405180910390f35b6102fd6106db565b6040516102ec9190613b51565b61031d610318366004613799565b61076d565b6040516001600160a01b0390911681526020016102ec565b61034861034336600461373c565b610807565b005b610348610358366004613766565b610939565b61034861036b366004613936565b610cca565b6103977f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce81565b6040519081526020016102ec565b600854610397565b6103976103bb366004613799565b600f6020526000908152604090205481565b600e54610397565b6103486103e3366004613648565b61106d565b6103976103f6366004613799565b6000908152600a602052604090206001015490565b6102e0610419366004613799565b6110f4565b61034861042c3660046137b2565b61117a565b61039761043f36600461373c565b61119c565b6103486104523660046137b2565b611244565b6102e061046536600461390a565b611266565b610348610478366004613648565b61146c565b61039761048b366004613799565b611487565b6104a361049e366004613799565b61152b565b6040516102ec959493929190613b99565b61031d6104c2366004613799565b611694565b6103486104d5366004613831565b61171f565b6103976104e83660046135fa565b61185c565b6105006104fb366004613799565b6118f6565b6040805194855260208501939093529183015260608201526080016102ec565b61031d61052e3660046137d5565b611acd565b6102e06105413660046137b2565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6102fd611ae5565b6102e061058236600461373c565b611af4565b610397600081565b61034861059d366004613700565b611b52565b6103976105b0366004613799565b611c17565b6103486105c3366004613684565b611c58565b6103976105d636600461390a565b611ce6565b6105ee6105e936600461388a565b611f66565b6040516102ec93929190613b20565b6102fd61060b366004613799565b611ff9565b61039761061e366004613799565b6120ee565b6103486106313660046137b2565b612105565b6103977f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db681565b6102e061066b366004613615565b61210f565b6103977ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b60006001600160e01b031982167fc0aa9aba0000000000000000000000000000000000000000000000000000000014806106d557506106d5826121a1565b92915050565b6060600080546106ea90613cdd565b80601f016020809104026020016040519081016040528092919081815260200182805461071690613cdd565b80156107635780601f1061073857610100808354040283529160200191610763565b820191906000526020600020905b81548152906001019060200180831161074657829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166107eb5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061081282611694565b9050806001600160a01b0316836001600160a01b0316141561089c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016107e2565b336001600160a01b03821614806108b857506108b8813361210f565b61092a5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016107e2565b61093483836121df565b505050565b7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9610964813361225a565b600e54839081106109c65760405162461bcd60e51b815260206004820152602660248201527f52414952204552433732313a20436f6c6c656374696f6e20646f6573206e6f7460448201526508195e1a5cdd60d21b60648201526084016107e2565b6000600e85815481106109db576109db613d89565b90600052602060002090600502019050806000015481600101546109ff9190613c83565b841115610a4e5760405162461bcd60e51b815260206004820181905260248201527f52414952204552433732313a20496e76616c696420746f6b656e20696e64657860448201526064016107e2565b610a6786858360000154610a629190613c38565b6122da565b84600f6000868460000154610a7c9190613c38565b815260200190815260200160002081905550806002016000815480929190610aa390613cc6565b9091555060009050805b6004830154811015610c7b578254610ac6908790613c38565b600d846004018381548110610add57610add613d89565b906000526020600020015481548110610af857610af8613d89565b90600052602060002090600402016000015411158015610b6757508254610b20908790613c38565b600d846004018381548110610b3757610b37613d89565b906000526020600020015481548110610b5257610b52613d89565b90600052602060002090600402016001015410155b15610c6957600d836004018281548110610b8357610b83613d89565b906000526020600020015481548110610b9e57610b9e613d89565b90600052602060002090600402019150826004018181548110610bc357610bc3613d89565b9060005260206000200154600c6000888660000154610be29190613c38565b8152602081019190915260400160002055600282015415610c6457600282018054906000610c0f83613cc6565b90915550506002820154610c645781546001830154604080518a815260208101939093528201527fd3edbeb94dfb8eadcd8c291774b9ac3cc9b06af829273e295bf3197849934b889060600160405180910390a15b610c7b565b80610c7381613d18565b915050610aad565b506002820154610cc157857f3ab828a3fee3d542c87fb145e900664325100c3c0b2e2a2cca38685b6de1b27183600301604051610cb89190613b86565b60405180910390a25b50505050505050565b7f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db6610cf5813361225a565b600e5485908110610d575760405162461bcd60e51b815260206004820152602660248201527f52414952204552433732313a20436f6c6c656374696f6e20646f6573206e6f7460448201526508195e1a5cdd60d21b60648201526084016107e2565b6000600e8781548110610d6c57610d6c613d89565b906000526020600020906005020190508060010154858260000154610d919190613c38565b1115610e055760405162461bcd60e51b815260206004820152602160248201527f52414952204552433732313a20496e76616c696420656e64696e6720746f6b6560448201527f6e0000000000000000000000000000000000000000000000000000000000000060648201526084016107e2565b80546001820154610e169190613c83565b610e208787613c83565b1115610e945760405162461bcd60e51b815260206004820152602160248201527f52414952204552433732313a20496e76616c696420746f6b656e206c696d697460448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016107e2565b83610e9f8787613c83565b610eaa906001613c38565b1015610f1e5760405162461bcd60e51b815260206004820152602d60248201527f52414952204552433732313a20496e76616c6964206e756d626572206f66207460448201527f6f6b656e7320746f206c6f636b0000000000000000000000000000000000000060648201526084016107e2565b610f29878787611266565b610f755760405162461bcd60e51b815260206004820152601f60248201527f52414952204552433732313a2043616e6e6f7420637265617465206c6f636b0060448201526064016107e2565b600d8054600181018255600091909152815460049091027fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50190610fba908890613c38565b81558154610fc9908790613c38565b6001808301919091556002820186905560038201899055600d546004840191610ff191613c83565b8154600181018355600092835260209092209091015581547f0b8fece546364ce1dcadcf45028659aff64e7a166d735eb32da27050fd520f69908990611038908a90613c38565b8454611045908a90613c38565b888660030160405161105b959493929190613c02565b60405180910390a15050505050505050565b61107733826122f4565b6110e95760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016107e2565b6109348383836123cb565b6000818152600f6020908152604080832054600c909252822054600d8054909190811061112357611123613d89565b9060005260206000209060040201600301541480156106d557506000828152600c6020526040812054600d8054909190811061116157611161613d89565b9060005260206000209060040201600201541192915050565b61118482826125b0565b6000828152600b60205260409020610934908261218c565b60006111a78361185c565b821061121b5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084016107e2565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61124e82826125d6565b6000828152600b60205260409020610934908261265e565b600080600e858154811061127c5761127c613d89565b90600052602060002090600502019050806000015481600101546112a09190613c83565b8411806112bc5750805460018201546112b99190613c83565b83115b156112cb576000915050611465565b60005b600482015481101561145e5781546112e7908690613c38565b600d8360040183815481106112fe576112fe613d89565b90600052602060002001548154811061131957611319613d89565b9060005260206000209060040201600001541115801561138857508154611341908690613c38565b600d83600401838154811061135857611358613d89565b90600052602060002001548154811061137357611373613d89565b90600052602060002090600402016001015410155b8061143c5750815461139b908590613c38565b600d8360040183815481106113b2576113b2613d89565b9060005260206000200154815481106113cd576113cd613d89565b9060005260206000209060040201600001541115801561143c575081546113f5908590613c38565b600d83600401838154811061140c5761140c613d89565b90600052602060002001548154811061142757611427613d89565b90600052602060002090600402016001015410155b1561144c57600092505050611465565b8061145681613d18565b9150506112ce565b5060019150505b9392505050565b61093483838360405180602001604052806000815250611c58565b600061149260085490565b82106115065760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016107e2565b6008828154811061151957611519613d89565b90600052602060002001549050919050565b60008060006060806000600e878154811061154857611548613d89565b90600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201805461158f90613cdd565b80601f01602080910402602001604051908101604052809291908181526020018280546115bb90613cdd565b80156116085780601f106115dd57610100808354040283529160200191611608565b820191906000526020600020905b8154815290600101906020018083116115eb57829003601f168201915b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561166057602002820191906000526020600020905b81548152602001906001019080831161164c575b5050509190925250508151602083015160408401516060850151608090950151929c919b5099509297509550909350505050565b6000818152600260205260408120546001600160a01b0316806106d55760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016107e2565b7f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db661174a813361225a565b600e546000901561179857600e805461176590600190613c83565b8154811061177557611775613d89565b90600052602060002090600502016001015460016117939190613c38565b61179b565b60005b600e8054600181810183556000929092526005027fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd018281559192506117e18584613c38565b6117eb9190613c83565b6001820155845161180590600383019060208801906134cf565b5060028101849055600e5461181c90600190613c83565b7f9ae7dd5dbfc3938737af70872685a3fb26f364d20134cd30be25108122626a17868660405161184d929190613b64565b60405180910390a25050505050565b60006001600160a01b0382166118da5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f20616464726573730000000000000000000000000000000000000000000060648201526084016107e2565b506001600160a01b031660009081526003602052604090205490565b6000806000806000600d868154811061191157611911613d89565b906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090506000600e82606001518154811061196d5761196d613d89565b90600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820180546119b490613cdd565b80601f01602080910402602001604051908101604052809291908181526020018280546119e090613cdd565b8015611a2d5780601f10611a0257610100808354040283529160200191611a2d565b820191906000526020600020905b815481529060010190602001808311611a1057829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611a8557602002820191906000526020600020905b815481526020019060010190808311611a71575b50505091909252505081518451929350611aa192909150613c83565b81516020840151611ab29190613c83565b83604001518460600151955095509550955050509193509193565b6000828152600b602052604081206114659083612673565b6060600180546106ea90613cdd565b6000805b611b018461185c565b811015611b485782600f6000611b17878561119c565b8152602001908152602001600020541415611b365760019150506106d5565b80611b4081613d18565b915050611af8565b5060009392505050565b6001600160a01b038216331415611bab5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107e2565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000818152600f6020526040812054600e80549091908110611c3b57611c3b613d89565b906000526020600020906005020160000154826106d59190613c83565b611c6233836122f4565b611cd45760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016107e2565b611ce08484848461267f565b50505050565b60008380600e8054905011611d4c5760405162461bcd60e51b815260206004820152602660248201527f52414952204552433732313a20436f6c6c656374696f6e20646f6573206e6f7460448201526508195e1a5cdd60d21b60648201526084016107e2565b6000600e8681548110611d6157611d61613d89565b90600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382018054611da890613cdd565b80601f0160208091040260200160405190810160405280929190818152602001828054611dd490613cdd565b8015611e215780601f10611df657610100808354040283529160200191611e21565b820191906000526020600020905b815481529060010190602001808311611e0457829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611e7957602002820191906000526020600020905b815481526020019060010190808311611e65575b50505050508152505090506000858260000151611e969190613c38565b90505b8151611ea6908690613c38565b8111611eef576000818152600260205260409020546001600160a01b0316611edd578151611ed49082613c83565b93505050611f5e565b80611ee781613d18565b915050611e99565b5060405162461bcd60e51b815260206004820152603960248201527f52414952204552433732313a20546865726520617265206e6f20617661696c6160448201527f626c6520746f6b656e7320696e20746869732072616e67652e0000000000000060648201526084016107e2565b509392505050565b6000806060611f967f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db66000611acd565b601054620186a090611fc49074010000000000000000000000000000000000000000900461ffff1689613c64565b611fce9190613c50565b60408051602081018b9052016040516020818303038152906040529250925092509450945094915050565b6000818152600260205260409020546060906001600160a01b03166120865760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e000000000000000000000000000000000060648201526084016107e2565b600061209d60408051602081019091526000815290565b905060008151116120bd5760405180602001604052806000815250611465565b806120c7846126fd565b6040516020016120d8929190613a34565b6040516020818303038152906040529392505050565b6000818152600b602052604081206106d5906127fb565b61124e8282612805565b6001600160a01b03811660009081527f4e6e614aa308bd78bac28541285c453cfb7abbecc03cb60a1e70ec8347070f98602052604081205460ff168061146557506001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff16611465565b612188828261282b565b5050565b6000611465836001600160a01b0384166128cd565b60006001600160e01b031982167f5a05180f0000000000000000000000000000000000000000000000000000000014806106d557506106d58261291c565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416908117909155819061222182611694565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff1661218857612298816001600160a01b0316601461295a565b6122a383602061295a565b6040516020016122b4929190613a63565b60408051601f198184030181529082905262461bcd60e51b82526107e291600401613b51565b612188828260405180602001604052806000815250612b1f565b6000818152600260205260408120546001600160a01b031661236d5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016107e2565b600061237883611694565b9050806001600160a01b0316846001600160a01b031614806123b35750836001600160a01b03166123a88461076d565b6001600160a01b0316145b806123c357506123c3818561210f565b949350505050565b826001600160a01b03166123de82611694565b6001600160a01b03161461245a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e000000000000000000000000000000000000000000000060648201526084016107e2565b6001600160a01b0382166124d55760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016107e2565b6124e0838383612b9d565b6124eb6000826121df565b6001600160a01b0383166000908152600360205260408120805460019290612514908490613c83565b90915550506001600160a01b0382166000908152600360205260408120805460019290612542908490613c38565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000828152600a60205260409020600101546125cc813361225a565b610934838361282b565b6001600160a01b03811633146126545760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016107e2565b6121888282612cea565b6000611465836001600160a01b038416612d6d565b60006114658383612e5a565b61268a8484846123cb565b61269684848484612efb565b611ce05760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016107e2565b6060816127215750506040805180820190915260018152600360fc1b602082015290565b8160005b811561274b578061273581613d18565b91506127449050600a83613c50565b9150612725565b60008167ffffffffffffffff81111561276657612766613d9f565b6040519080825280601f01601f191660200182016040528015612790576020820181803683370190505b5090505b84156123c3576127a5600183613c83565b91506127b2600a86613d33565b6127bd906030613c38565b60f81b8183815181106127d2576127d2613d89565b60200101906001600160f81b031916908160001a9053506127f4600a86613c50565b9450612794565b60006106d5825490565b6000828152600a6020526040902060010154612821813361225a565b6109348383612cea565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff16612188576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff191660011790556128893390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000818152600183016020526040812054612914575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106d5565b5060006106d5565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806106d557506106d582613053565b60606000612969836002613c64565b612974906002613c38565b67ffffffffffffffff81111561298c5761298c613d9f565b6040519080825280601f01601f1916602001820160405280156129b6576020820181803683370190505b509050600360fc1b816000815181106129d1576129d1613d89565b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612a1c57612a1c613d89565b60200101906001600160f81b031916908160001a9053506000612a40846002613c64565b612a4b906001613c38565b90505b6001811115612ad0577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612a8c57612a8c613d89565b1a60f81b828281518110612aa257612aa2613d89565b60200101906001600160f81b031916908160001a90535060049490941c93612ac981613cc6565b9050612a4e565b5083156114655760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107e2565b612b298383613091565b612b366000848484612efb565b6109345760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016107e2565b6001600160a01b03831615801590612bbd57506001600160a01b03821615155b15612cdf576000818152600f6020908152604080832054600c90925290912054600d80549091908110612bf257612bf2613d89565b9060005260206000209060040201600301541415612cb5576000818152600c6020526040902054600d80549091908110612c2e57612c2e613d89565b906000526020600020906004020160020154600014612cb55760405162461bcd60e51b815260206004820152603a60248201527f52414952204552433732313a205472616e736665727320666f7220746869732060448201527f72616e6765206172652063757272656e746c79206c6f636b656400000000000060648201526084016107e2565b612cdf7f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce3361225a565b6109348383836131ec565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff1615612188576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015612e50576000612d91600183613c83565b8554909150600090612da590600190613c83565b90506000866000018281548110612dbe57612dbe613d89565b9060005260206000200154905080876000018481548110612de157612de1613d89565b600091825260208083209091019290925582815260018901909152604090208490558654879080612e1457612e14613d73565b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506106d5565b60009150506106d5565b81546000908210612ed35760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60448201527f647300000000000000000000000000000000000000000000000000000000000060648201526084016107e2565b826000018281548110612ee857612ee8613d89565b9060005260206000200154905092915050565b60006001600160a01b0384163b1561304857604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612f3f903390899088908890600401613ae4565b602060405180830381600087803b158015612f5957600080fd5b505af1925050508015612f89575060408051601f3d908101601f19168201909252612f8691810190613814565b60015b61302e573d808015612fb7576040519150601f19603f3d011682016040523d82523d6000602084013e612fbc565b606091505b5080516130265760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016107e2565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506123c3565b506001949350505050565b60006001600160e01b031982167f780e9d630000000000000000000000000000000000000000000000000000000014806106d557506106d5826132a4565b6001600160a01b0382166130e75760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107e2565b6000818152600260205260409020546001600160a01b03161561314c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107e2565b61315860008383612b9d565b6001600160a01b0382166000908152600360205260408120805460019290613181908490613c38565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b0383166132475761324281600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61326a565b816001600160a01b0316836001600160a01b03161461326a5761326a838261333f565b6001600160a01b03821661328157610934816133dc565b826001600160a01b0316826001600160a01b03161461093457610934828261348b565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061330757506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806106d557507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146106d5565b6000600161334c8461185c565b6133569190613c83565b6000838152600760205260409020549091508082146133a9576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906133ee90600190613c83565b6000838152600960205260408120546008805493945090928490811061341657613416613d89565b90600052602060002001549050806008838154811061343757613437613d89565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061346f5761346f613d73565b6001900381819060005260206000200160009055905550505050565b60006134968361185c565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b8280546134db90613cdd565b90600052602060002090601f0160209004810192826134fd5760008555613543565b82601f1061351657805160ff1916838001178555613543565b82800160010185558215613543579182015b82811115613543578251825591602001919060010190613528565b5061354f929150613553565b5090565b5b8082111561354f5760008155600101613554565b600067ffffffffffffffff8084111561358357613583613d9f565b604051601f8501601f19908116603f011681019082821181831017156135ab576135ab613d9f565b816040528093508581528686860111156135c457600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146135f557600080fd5b919050565b60006020828403121561360c57600080fd5b611465826135de565b6000806040838503121561362857600080fd5b613631836135de565b915061363f602084016135de565b90509250929050565b60008060006060848603121561365d57600080fd5b613666846135de565b9250613674602085016135de565b9150604084013590509250925092565b6000806000806080858703121561369a57600080fd5b6136a3856135de565b93506136b1602086016135de565b925060408501359150606085013567ffffffffffffffff8111156136d457600080fd5b8501601f810187136136e557600080fd5b6136f487823560208401613568565b91505092959194509250565b6000806040838503121561371357600080fd5b61371c836135de565b91506020830135801515811461373157600080fd5b809150509250929050565b6000806040838503121561374f57600080fd5b613758836135de565b946020939093013593505050565b60008060006060848603121561377b57600080fd5b613784846135de565b95602085013595506040909401359392505050565b6000602082840312156137ab57600080fd5b5035919050565b600080604083850312156137c557600080fd5b8235915061363f602084016135de565b600080604083850312156137e857600080fd5b50508035926020909101359150565b60006020828403121561380957600080fd5b813561146581613db5565b60006020828403121561382657600080fd5b815161146581613db5565b6000806040838503121561384457600080fd5b823567ffffffffffffffff81111561385b57600080fd5b8301601f8101851361386c57600080fd5b61387b85823560208401613568565b95602094909401359450505050565b600080600080606085870312156138a057600080fd5b8435935060208501359250604085013567ffffffffffffffff808211156138c657600080fd5b818701915087601f8301126138da57600080fd5b8135818111156138e957600080fd5b8860208285010111156138fb57600080fd5b95989497505060200194505050565b60008060006060848603121561391f57600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561394c57600080fd5b5050823594602084013594506040840135936060013592509050565b60008151808452613980816020860160208601613c9a565b601f01601f19169290920160200192915050565b8054600090600181811c90808316806139ae57607f831692505b60208084108214156139d057634e487b7160e01b600052602260045260246000fd5b838852602088018280156139eb57600181146139fc57613a27565b60ff19871682528282019750613a27565b60008981526020902060005b87811015613a2157815484820152908601908401613a08565b83019850505b5050505050505092915050565b60008351613a46818460208801613c9a565b835190830190613a5a818360208801613c9a565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613a9b816017850160208801613c9a565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613ad8816028840160208801613c9a565b01602801949350505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152613b166080830184613968565b9695505050505050565b6001600160a01b0384168152826020820152606060408201526000613b486060830184613968565b95945050505050565b6020815260006114656020830184613968565b604081526000613b776040830185613968565b90508260208301529392505050565b6020815260006114656020830184613994565b85815260006020868184015285604084015260a06060840152613bbf60a0840186613968565b838103608085015284518082528286019183019060005b81811015613bf257835183529284019291840191600101613bd6565b50909a9950505050505050505050565b85815284602082015283604082015282606082015260a060808201526000613c2d60a0830184613994565b979650505050505050565b60008219821115613c4b57613c4b613d47565b500190565b600082613c5f57613c5f613d5d565b500490565b6000816000190483118215151615613c7e57613c7e613d47565b500290565b600082821015613c9557613c95613d47565b500390565b60005b83811015613cb5578181015183820152602001613c9d565b83811115611ce05750506000910152565b600081613cd557613cd5613d47565b506000190190565b600181811c90821680613cf157607f821691505b60208210811415613d1257634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613d2c57613d2c613d47565b5060010190565b600082613d4257613d42613d5d565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114613dcb57600080fd5b5056fea2646970667358221220bea9992b0ec65cb917ceccd55d54c388a410b7ce1469659536648dfa65f85dc264736f6c634300080600333c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db6f0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fcea2646970667358221220910a422a9bacc9e9c6f5511299e66febbf314c486d532e8c9ab937722941843364736f6c63430008060033",
  "devdoc": {
    "author": "Juan M. Sanchez M.",
    "details": "Uses AccessControl for the reception of ERC777 tokens!",
    "kind": "dev",
    "methods": {
      "add777Token(address,uint256)": {
        "params": {
          "_erc777Address": "Address of the new Token"
        }
      },
      "getContractCount(address)": {
        "details": "Use alongside ownerToContracts for the full list of tokens ",
        "params": {
          "_owner": "Wallet address to query"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(uint256,address)": {
        "params": {
          "_pricePerToken": "Fee given to the node on every sale"
        }
      },
      "remove777Token(address)": {
        "params": {
          "_erc777Address": "Address of the Token"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "tokensReceived(address,address,address,uint256,bytes,bytes)": {
        "details": "This is our deployment mechanism for ERC721 contracts!",
        "params": {
          "amount": "The number of tokens sent",
          "from": "The owner of the tokens",
          "operator": "The ERC777 operator calling the send() function",
          "operatorData": "bytes sent from the operator",
          "to": "The recipient of the tokens",
          "userData": "bytes sent from the send call"
        }
      },
      "withdrawTokens(address,uint256)": {
        "details": "If the contract has less than the amount, the ERC777 contract will revertAccessControl makes sure only an OWNER can withdraw",
        "params": {
          "amount": "Amount of tokens to withdraw",
          "erc777": "Address of the ERC777 contract"
        }
      }
    },
    "title": "RAIR ERC721 Factory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "add777Token(address,uint256)": {
        "notice": "Adds an address to the list of allowed minters"
      },
      "getContractCount(address)": {
        "notice": "Returns the number of contracts deployed by an address"
      },
      "getContractCountOf(address)": {
        "notice": "Returns the number of contracts deployed by an address"
      },
      "getCreatorsCount()": {
        "notice": "Returns the number of addresses that have deployed a contract"
      },
      "initialize(uint256,address)": {
        "notice": "Factory Constructor"
      },
      "remove777Token(address)": {
        "notice": "Removes an address from the list of allowed minters"
      },
      "tokensReceived(address,address,address,uint256,bytes,bytes)": {
        "notice": "Function called by an ERC777 when they send tokens"
      },
      "withdrawTokens(address,uint256)": {
        "notice": "Transfers tokens from the factory to any of the OWNER addresses"
      }
    },
    "notice": "Handles the deployment of ERC721 RAIR Tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 747,
        "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 750,
        "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1008,
        "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1257,
        "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 307,
        "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)"
      },
      {
        "astId": 615,
        "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 62,
        "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)1642_storage)"
      },
      {
        "astId": 219,
        "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7693,
        "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
        "label": "ownerToContracts",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 7697,
        "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
        "label": "contractToOwner",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 7701,
        "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
        "label": "deploymentCostForERC777",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7704,
        "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
        "label": "creators",
        "offset": 0,
        "slot": "204",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)1642_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)1642_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)302_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1642_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 1641,
            "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1371_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)302_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 299,
            "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 301,
            "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1371_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 1366,
            "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1370,
            "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}