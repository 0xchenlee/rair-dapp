{
  "address": "0x0Ce668D271b8016a785Bf146e58739F432300B12",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rangesCreated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "catalogIndex",
          "type": "uint256"
        }
      ],
      "name": "AddedOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startToken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endToken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "AppendedRange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newNodeFee",
          "type": "uint16"
        }
      ],
      "name": "ChangedNodeFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "ChangedTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newTreasuryFee",
          "type": "uint16"
        }
      ],
      "name": "ChangedTreasuryFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "catalogIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        }
      ],
      "name": "SoldOut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "catalogIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        }
      ],
      "name": "TokenMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "UpdatedOffer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_productIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_rangeStartToken",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rangeEndToken",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rangePrice",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "_rangeName",
          "type": "string[]"
        },
        {
          "internalType": "address",
          "name": "_nodeAddress",
          "type": "address"
        }
      ],
      "name": "addOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "appendOfferRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "startTokens",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "endTokens",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        }
      ],
      "name": "appendOfferRangeBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "catalogIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "internalTokenIndex",
          "type": "uint256"
        }
      ],
      "name": "buyToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc721Address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        }
      ],
      "name": "contractToOfferRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDecimals",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOfferCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getOfferInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nodeAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "availableRanges",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        }
      ],
      "name": "getOfferRangeInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collectionIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokensAllowed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_treasuryFee",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_nodeFee",
          "type": "uint16"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nodeFee",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openSales",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newFee",
          "type": "uint16"
        }
      ],
      "name": "setNodeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newTreasury",
          "type": "address"
        }
      ],
      "name": "setTreasuryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newFee",
          "type": "uint16"
        }
      ],
      "name": "setTreasuryFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryFee",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "updateOfferRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "validateRoles",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canOffer",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x865893ab3fa3599443635d9b29c096ed0991709ca21f6d236ffd5d1f6e3504dd",
  "receipt": {
    "to": null,
    "from": "0xEC30759D0A3F3CE0A730920DC29d74e441f492C3",
    "contractAddress": "0x0Ce668D271b8016a785Bf146e58739F432300B12",
    "transactionIndex": 1,
    "gasUsed": "2912497",
    "logsBloom": "0x
    "blockHash": "0x943bbb99afda2589e73965ec0d3856190e7d885b8f7779151712b3490cbde082",
    "transactionHash": "0x865893ab3fa3599443635d9b29c096ed0991709ca21f6d236ffd5d1f6e3504dd",
    "logs": [],
    "blockNumber": 5262224,
    "cumulativeGasUsed": "2964102",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e31a2a814da820fde16e2ca7914424f2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rangesCreated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"catalogIndex\",\"type\":\"uint256\"}],\"name\":\"AddedOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"AppendedRange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newNodeFee\",\"type\":\"uint16\"}],\"name\":\"ChangedNodeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"ChangedTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newTreasuryFee\",\"type\":\"uint16\"}],\"name\":\"ChangedTreasuryFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"catalogIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"}],\"name\":\"SoldOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"catalogIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"TokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"UpdatedOffer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_productIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_rangeStartToken\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rangeEndToken\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rangePrice\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_rangeName\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"}],\"name\":\"addOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"appendOfferRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"startTokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"endTokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"}],\"name\":\"appendOfferRangeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"catalogIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"internalTokenIndex\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"}],\"name\":\"contractToOfferRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDecimals\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOfferCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getOfferInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"availableRanges\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"}],\"name\":\"getOfferRangeInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collectionIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAllowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_treasuryFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_nodeFee\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openSales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newFee\",\"type\":\"uint16\"}],\"name\":\"setNodeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newFee\",\"type\":\"uint16\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"updateOfferRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"validateRoles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canOffer\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Juan M. Sanchez M.\",\"details\":\"Uses AccessControl for the minting mechanisms on other tokens!\",\"kind\":\"dev\",\"methods\":{\"addOffer(address,uint256,uint256[],uint256[],uint256[],string[],address)\":{\"details\":\"It validates that the collection has mintable tokens leftIt validates that the number of tokens allowed to sell is less or equal than the number of mintable tokens\",\"params\":{\"_nodeAddress\":\"Address of the node to be paid\",\"_productIndex\":\"Index of the collection inside the ERC721\",\"_rangeEndToken\":\"Ending token inside the ERC721 (for each range)\",\"_rangeName\":\"Name (for each range)\",\"_rangePrice\":\"Price of each range (for each range)\",\"_rangeStartToken\":\"Starting token inside the ERC721 (for each range)\",\"_tokenAddress\":\"Address of the ERC721\"}},\"buyToken(uint256,uint256,uint256)\":{\"details\":\"It validates that the Marketplace is still a minterIt splits the funds in 3 waysIt validates that the ERC721 token supports the interface for royalties and only then, it will give the funds to the creatorIf the ERC721 collection doesn't have any mintable tokens left, it will revert using the ERC721 error, not in the marketplace!\",\"params\":{\"catalogIndex\":\"Index of the sale within the catalog\",\"internalTokenIndex\":\"Index of the token within the range\",\"rangeIndex\":\"Index of the range within the offer\"}},\"getOfferCount()\":{\"details\":\"Includes completed collections though\"},\"getOfferInfo(uint256)\":{\"details\":\"Translates the internal offer schema to individual values\",\"params\":{\"_index\":\"Index of the offer in this contract\"}},\"getOfferRangeInfo(uint256,uint256)\":{\"details\":\"Translates the internal offer schema to individual values\",\"params\":{\"offerIndex\":\"Index of the offer in this contract\",\"rangeIndex\":\"Index of the range inside the contract\"}},\"initialize(address,uint16,uint16)\":{\"details\":\"Should start up with the treasury, node and treasury fee\",\"params\":{\"_nodeFee\":\"Fee given to the node on every sale (Recommended default: 1%)\",\"_treasury\":\"The address of the Treasury\",\"_treasuryFee\":\"Fee given to the treasury every sale (Recommended default: 9%)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setNodeFee(uint16)\":{\"params\":{\"_newFee\":\"New Fee\"}},\"setTreasuryAddress(address)\":{\"details\":\"Make sure the treasury is a wallet address!If the treasury is a contract, make sure it has a receive function!\",\"params\":{\"_newTreasury\":\"New address\"}},\"setTreasuryFee(uint16)\":{\"params\":{\"_newFee\":\"New Fee\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"validateRoles(address)\":{\"details\":\"Doubles as a view function for anyone wondering if they can mint or if they need to approve the marketplace\",\"params\":{\"tokenAddress\":\"Address of the token to validate\"}}},\"title\":\"Minter Marketplace \",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addOffer(address,uint256,uint256[],uint256[],uint256[],string[],address)\":{\"notice\":\"Adds an offer to the market's catalog\"},\"buyToken(uint256,uint256,uint256)\":{\"notice\":\"Receives funds and mints a new token for the sender\"},\"getOfferCount()\":{\"notice\":\"Returns the number of collections on the market\"},\"getOfferInfo(uint256)\":{\"notice\":\"Returns the basic information about an offer\"},\"getOfferRangeInfo(uint256,uint256)\":{\"notice\":\"Returns the information about an offer's range\"},\"initialize(address,uint16,uint16)\":{\"notice\":\"Constructor\"},\"setNodeFee(uint16)\":{\"notice\":\"Sets the new fee paid to nodes\"},\"setTreasuryAddress(address)\":{\"notice\":\"Sets the new treasury address\"},\"setTreasuryFee(uint16)\":{\"notice\":\"Sets the new treasury fee\"},\"validateRoles(address)\":{\"notice\":\"Validates that the Minter Marketplace and the message sender have the correct roles inside the ERC721\"}},\"notice\":\"Handles the minting of ERC721 RAIR Tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Marketplaces/MarketplaceMinter.sol\":\"Minter_Marketplace\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                Strings.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                Strings.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98fac37221212c8f126f198d262a4df86394bd1a9969f61e40739fe8ac013dd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Marketplaces/MarketplaceMinter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.4; \\n\\n// Used on interfaces\\nimport '@openzeppelin/contracts/access/AccessControl.sol';\\nimport \\\"../Tokens/IRAIR-ERC721.sol\\\";\\nimport \\\"../Tokens/IERC2981.sol\\\";\\n\\n// Parent classes\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\n\\n//import 'hardhat/console.sol';\\n\\n/// @title  Minter Marketplace \\n/// @notice Handles the minting of ERC721 RAIR Tokens\\n/// @author Juan M. Sanchez M.\\n/// @dev \\tUses AccessControl for the minting mechanisms on other tokens!\\ncontract Minter_Marketplace is OwnableUpgradeable {\\n\\tstruct offer {\\n\\t\\taddress contractAddress;\\n\\t\\taddress nodeAddress;\\n\\t\\tuint productIndex;\\n\\t\\tuint[] tokenRangeStart;\\n\\t\\tuint[] tokenRangeEnd;\\n\\t\\tuint[] tokensAllowed;\\n\\t\\tuint[] rangePrice;\\n\\t\\tstring[] rangeName;\\n\\t}\\n\\n\\tuint16 public constant feeDecimals = 2;\\n\\n\\tmapping(address => mapping(uint => uint)) internal _contractToOffers;\\n\\n\\toffer[] offerCatalog;\\n\\n\\taddress public treasury;\\n\\tuint public openSales;\\n\\tuint16 public treasuryFee;\\n\\tuint16 public nodeFee;\\n\\n\\tevent AddedOffer(address contractAddress, uint productIndex, uint rangesCreated, uint catalogIndex);\\n\\tevent UpdatedOffer(address contractAddress, uint offerIndex, uint rangeIndex, uint tokens, uint price, string name);\\n\\tevent AppendedRange(address contractAddress, uint productIndex, uint offerIndex, uint rangeIndex,  uint startToken, uint endToken, uint price, string name);\\n\\tevent TokenMinted(address ownerAddress, address contractAddress, uint catalogIndex, uint rangeIndex, uint tokenIndex);\\n\\tevent SoldOut(address contractAddress, uint catalogIndex, uint rangeIndex);\\n\\tevent ChangedTreasury(address newTreasury);\\n\\tevent ChangedTreasuryFee(address treasury, uint16 newTreasuryFee);\\n\\tevent ChangedNodeFee(uint16 newNodeFee);\\n\\n\\tfunction contractToOfferRange(address erc721Address, uint productIndex) public view returns (uint offerIndex) {\\n\\t\\trequire(offerCatalog.length > 0, \\\"Minting Marketplace: There are no offers registered\\\");\\n\\t\\trequire(offerCatalog[(_contractToOffers[erc721Address][productIndex])].contractAddress == erc721Address, \\\"Minting Marketplace: There are no offers registered for that address\\\");\\n\\t\\trequire(offerCatalog[(_contractToOffers[erc721Address][productIndex])].productIndex == productIndex, \\\"Minting Marketplace: There are is no offer registered for that product\\\");\\n\\t\\treturn (_contractToOffers[erc721Address][productIndex]);\\n\\t}\\n\\n\\t/// @notice\\tConstructor\\n\\t/// @dev\\tShould start up with the treasury, node and treasury fee\\n\\t/// @param\\t_treasury\\t\\tThe address of the Treasury\\n\\t/// @param\\t_treasuryFee\\tFee given to the treasury every sale (Recommended default: 9%)\\n\\t/// @param\\t_nodeFee\\t\\tFee given to the node on every sale (Recommended default: 1%)\\n\\tfunction initialize(address _treasury, uint16 _treasuryFee, uint16 _nodeFee) public initializer {\\n\\t\\ttreasury = _treasury;\\n\\t\\ttreasuryFee = _treasuryFee;\\n\\t\\tnodeFee = _nodeFee;\\n\\t\\topenSales = 0;\\n\\t}\\n\\n\\t/// @notice\\tSets the new treasury address\\n\\t/// @dev\\tMake sure the treasury is a wallet address!\\n\\t/// @dev\\tIf the treasury is a contract, make sure it has a receive function!\\n\\t/// @param\\t_newTreasury\\tNew address\\n\\tfunction setTreasuryAddress(address _newTreasury) public onlyOwner {\\n\\t\\ttreasury = _newTreasury;\\n\\t\\temit ChangedTreasury(_newTreasury);\\n\\t}\\n\\n\\t/// @notice\\tSets the new treasury fee\\n\\t/// @param\\t_newFee\\tNew Fee\\n\\tfunction setTreasuryFee(uint16 _newFee) public onlyOwner {\\n\\t\\ttreasuryFee = _newFee;\\n\\t\\temit ChangedTreasuryFee(treasury, _newFee);\\n\\t}\\n\\n\\t/// @notice\\tSets the new fee paid to nodes\\n\\t/// @param\\t_newFee\\tNew Fee\\n\\tfunction setNodeFee(uint16 _newFee) public onlyOwner {\\n\\t\\tnodeFee = _newFee;\\n\\t\\temit ChangedNodeFee(_newFee);\\n\\t}\\n\\n\\t/// @notice\\tReturns the number of collections on the market\\n\\t/// @dev\\tIncludes completed collections though\\n\\tfunction getOfferCount() public view returns(uint) {\\n\\t\\treturn offerCatalog.length;\\n\\t}\\n\\n\\t/// @notice\\tReturns the basic information about an offer\\n\\t/// @dev\\tTranslates the internal offer schema to individual values\\n\\t/// @param\\t_index\\t\\tIndex of the offer in this contract\\n\\tfunction getOfferInfo(uint _index) public view returns(address contractAddress, uint productIndex, address nodeAddress, uint availableRanges) {\\n\\t\\toffer memory selectedOffer = offerCatalog[_index];\\n\\t\\treturn (\\n\\t\\t\\tselectedOffer.contractAddress,\\n\\t\\t\\tselectedOffer.productIndex,\\n\\t\\t\\tselectedOffer.nodeAddress,\\n\\t\\t\\tselectedOffer.rangeName.length\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice\\tReturns the information about an offer's range\\n\\t/// @dev\\tTranslates the internal offer schema to individual values\\n\\t/// @param\\tofferIndex\\t\\tIndex of the offer in this contract\\n\\t/// @param\\trangeIndex\\t\\tIndex of the range inside the contract\\n\\tfunction getOfferRangeInfo(uint offerIndex, uint rangeIndex) public view returns(\\n\\t\\taddress contractAddress,\\n\\t\\tuint collectionIndex,\\n\\t\\tuint tokenStart,\\n\\t\\tuint tokenEnd,\\n\\t\\tuint tokensAllowed,\\n\\t\\tuint price,\\n\\t\\tstring memory name) {\\n\\t\\toffer memory selectedOffer = offerCatalog[offerIndex];\\n\\t\\treturn (selectedOffer.contractAddress,\\n\\t\\t\\tselectedOffer.productIndex,\\n\\t\\t\\tselectedOffer.tokenRangeStart[rangeIndex],\\n\\t\\t\\tselectedOffer.tokenRangeEnd[rangeIndex],\\n\\t\\t\\tselectedOffer.tokensAllowed[rangeIndex],\\n\\t\\t\\tselectedOffer.rangePrice[rangeIndex],\\n\\t\\t\\tselectedOffer.rangeName[rangeIndex]);\\n\\t}\\n\\n\\t/// @notice Makes sure the starting and ending tokens are correct\\n\\t/// @param\\tstart \\tStarting token\\n\\t/// @param\\tend \\tEnding token\\n\\tfunction _validateRangeInfo(uint start, uint end) internal pure {\\n\\t\\trequire(start < end, \\\"Minting Marketplace: Range's starting token has to be less than the range's ending token!\\\");\\n\\t}\\n\\n\\t/// @notice Validates that the Minter Marketplace and the message sender have the correct roles inside the ERC721\\n\\t/// @dev\\tDoubles as a view function for anyone wondering if they can mint or if they need to approve the marketplace\\n\\t/// @param\\ttokenAddress \\tAddress of the token to validate\\n\\tfunction validateRoles(address tokenAddress) public view returns (bool canOffer) {\\n\\t\\trequire(IAccessControl(tokenAddress).hasRole(bytes32(keccak256(\\\"MINTER\\\")), address(this)), \\\"Minting Marketplace: This Marketplace isn't a Minter!\\\");\\n\\t\\trequire(IAccessControl(tokenAddress).hasRole(bytes32(keccak256(\\\"CREATOR\\\")), address(msg.sender)), \\\"Minting Marketplace: Sender isn't the creator!\\\");\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/// @notice Inserts a range inside the offer\\n\\t/// @param\\tofferIndex \\tIndex of the offer to append ranges to\\n\\t/// @param\\tstartToken \\tStarting token\\n\\t/// @param\\tendToken \\tEnding token\\n\\t/// @param\\tprice \\t\\tPrice of that specific range\\n\\t/// @param\\tname \\t \\tName of the range\\n\\tfunction _appendOfferRange(\\n\\t\\tuint offerIndex,\\n\\t\\tuint startToken,\\n\\t\\tuint endToken,\\n\\t\\tuint price,\\n\\t\\tstring memory name\\n\\t) internal {\\n\\t\\toffer storage selectedOffer = offerCatalog[offerIndex];\\n\\t\\tselectedOffer.tokenRangeStart.push(startToken);\\n\\t\\tselectedOffer.tokenRangeEnd.push(endToken);\\n\\t\\tselectedOffer.rangePrice.push(price);\\n\\t\\tselectedOffer.tokensAllowed.push((endToken - startToken) + 1);\\n\\t\\tselectedOffer.rangeName.push(name);\\n\\t\\temit AppendedRange(\\n\\t\\t\\tselectedOffer.contractAddress,\\n\\t\\t\\tselectedOffer.productIndex,\\n\\t\\t\\tofferIndex,\\n\\t\\t\\tselectedOffer.rangeName.length - 1,\\n\\t\\t\\tstartToken,\\n\\t\\t\\tendToken,\\n\\t\\t\\tprice,\\n\\t\\t\\tname);\\n\\t\\topenSales++;\\n\\t}\\n\\n\\t/// @notice\\tAdds an offer to the market's catalog\\n\\t/// @dev\\tIt validates that the collection has mintable tokens left\\n\\t/// @dev\\tIt validates that the number of tokens allowed to sell is less or equal than the number of mintable tokens\\n\\t/// @param\\t_tokenAddress\\t\\tAddress of the ERC721\\n\\t/// @param\\t_productIndex\\t\\tIndex of the collection inside the ERC721\\n\\t/// @param\\t_rangeStartToken\\tStarting token inside the ERC721 (for each range)\\n\\t/// @param\\t_rangeEndToken\\t\\tEnding token inside the ERC721 (for each range)\\n\\t/// @param\\t_rangePrice\\t\\t\\tPrice of each range (for each range)\\n\\t/// @param\\t_rangeName\\t\\t\\tName (for each range)\\n\\t/// @param\\t_nodeAddress\\t\\tAddress of the node to be paid\\n\\tfunction addOffer(\\n\\t\\taddress _tokenAddress,\\n\\t\\tuint _productIndex,\\n\\t\\tuint[] calldata _rangeStartToken,\\n\\t\\tuint[] calldata _rangeEndToken,\\n\\t\\tuint[] calldata _rangePrice,\\n\\t\\tstring[] calldata _rangeName,\\n\\t\\taddress _nodeAddress)\\n\\texternal {\\n\\t\\tvalidateRoles(_tokenAddress);\\n\\t\\trequire(_rangeStartToken.length == _rangeEndToken.length &&\\n\\t\\t\\t\\t\\t_rangePrice.length == _rangeStartToken.length &&\\n\\t\\t\\t\\t\\t_rangeName.length == _rangePrice.length, \\\"Minting Marketplace: Offer's ranges should have the same length!\\\");\\n\\t\\t\\n\\t\\t(,,uint mintableTokensLeft,,) = IRAIR_ERC721(_tokenAddress).getCollection(_productIndex);\\n\\t\\trequire(mintableTokensLeft > 0, \\\"Minting Marketplace: Cannot mint more tokens from this Product!\\\");\\n\\t\\t\\n\\t\\toffer storage newOffer = offerCatalog.push();\\n\\n\\t\\tnewOffer.contractAddress = _tokenAddress;\\n\\t\\tnewOffer.nodeAddress = _nodeAddress;\\n\\t\\tnewOffer.productIndex = _productIndex;\\n\\n\\t\\tfor (uint i = 0; i < _rangeName.length; i++) {\\n\\t\\t\\t_validateRangeInfo(_rangeStartToken[i], _rangeEndToken[i]);\\n\\t\\t\\t_appendOfferRange(\\n\\t\\t\\t\\tofferCatalog.length - 1,\\n\\t\\t\\t\\t_rangeStartToken[i],\\n\\t\\t\\t\\t_rangeEndToken[i],\\n\\t\\t\\t\\t_rangePrice[i],\\n\\t\\t\\t\\t_rangeName[i]\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\t_contractToOffers[_tokenAddress][_productIndex] = offerCatalog.length - 1;\\n\\t\\temit AddedOffer(_tokenAddress, _productIndex, _rangeName.length, offerCatalog.length - 1);\\n\\t}\\n\\n\\tfunction updateOfferRange(\\n\\t\\tuint offerIndex,\\n\\t\\tuint rangeIndex,\\n\\t\\tuint startToken,\\n\\t\\tuint endToken,\\n\\t\\tuint price,\\n\\t\\tstring calldata name\\n\\t) external {\\n\\t\\toffer storage selectedOffer = offerCatalog[offerIndex];\\n\\t\\trequire(endToken <= selectedOffer.tokenRangeEnd[rangeIndex] &&\\n\\t\\t\\t\\t\\tstartToken >= selectedOffer.tokenRangeStart[rangeIndex],\\n\\t\\t\\t\\t\\t\\t'Minting Marketplace: New limits must be within the previous limits!');\\n\\t\\tvalidateRoles(selectedOffer.contractAddress);\\n\\t\\t_validateRangeInfo(startToken, endToken);\\n\\t\\tselectedOffer.tokensAllowed[rangeIndex] -= (selectedOffer.tokenRangeEnd[rangeIndex] - selectedOffer.tokenRangeStart[rangeIndex]) - (endToken - startToken);\\n\\t\\tselectedOffer.tokenRangeStart[rangeIndex] = startToken;\\n\\t\\tselectedOffer.tokenRangeEnd[rangeIndex] = endToken;\\n\\t\\tselectedOffer.rangePrice[rangeIndex] = price;\\n\\t\\tselectedOffer.rangeName[rangeIndex] = name;\\n\\t\\temit UpdatedOffer(selectedOffer.contractAddress, offerIndex, rangeIndex, selectedOffer.tokensAllowed[rangeIndex], price, name);\\n\\t}\\n\\n\\tfunction appendOfferRange(\\n\\t\\tuint offerIndex,\\n\\t\\tuint startToken,\\n\\t\\tuint endToken,\\n\\t\\tuint price,\\n\\t\\tstring calldata name\\n\\t) public {\\n\\t\\tvalidateRoles(offerCatalog[offerIndex].contractAddress);\\n\\t\\t_validateRangeInfo(startToken, endToken);\\n\\t\\t_appendOfferRange(\\n\\t\\t\\tofferIndex,\\n\\t\\t\\tstartToken,\\n\\t\\t\\tendToken,\\n\\t\\t\\tprice,\\n\\t\\t\\tname\\n\\t\\t);\\n\\t}\\n\\n\\tfunction appendOfferRangeBatch(\\n\\t\\tuint offerIndex,\\n\\t\\tuint[] memory startTokens,\\n\\t\\tuint[] memory endTokens,\\n\\t\\tuint[] memory prices,\\n\\t\\tstring[] memory names\\n\\t) public {\\n\\t\\trequire(startTokens.length == endTokens.length &&\\n\\t\\t\\t\\t\\tprices.length == startTokens.length &&\\n\\t\\t\\t\\t\\tnames.length == prices.length, \\\"Minting Marketplace: Offer's ranges should have the same length!\\\");\\n\\t\\tvalidateRoles(offerCatalog[offerIndex].contractAddress);\\n\\t\\tfor (uint i = 0; i < names.length; i++) {\\n\\t\\t\\t_validateRangeInfo(startTokens[i], endTokens[i]);\\n\\t\\t\\t_appendOfferRange(\\n\\t\\t\\t\\tofferIndex,\\n\\t\\t\\t\\tstartTokens[i],\\n\\t\\t\\t\\tendTokens[i],\\n\\t\\t\\t\\tprices[i],\\n\\t\\t\\t\\tnames[i]\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// @notice\\tReceives funds and mints a new token for the sender\\n\\t/// @dev\\tIt validates that the Marketplace is still a minter\\n\\t/// @dev\\tIt splits the funds in 3 ways\\n\\t/// @dev\\tIt validates that the ERC721 token supports the interface for royalties and only then, it will give the funds to the creator\\n\\t/// @dev\\tIf the ERC721 collection doesn't have any mintable tokens left, it will revert using the ERC721 error, not in the marketplace!\\n\\t/// @param\\tcatalogIndex\\t\\tIndex of the sale within the catalog\\n\\t/// @param\\trangeIndex\\t\\t\\tIndex of the range within the offer\\n\\t/// @param\\tinternalTokenIndex\\tIndex of the token within the range\\n\\tfunction buyToken(uint catalogIndex, uint rangeIndex, uint internalTokenIndex) payable public {\\n\\t\\toffer storage selectedCollection = offerCatalog[catalogIndex];\\n\\t\\trequire(selectedCollection.contractAddress != address(0), \\\"Minting Marketplace: Invalid Collection Selected!\\\");\\n\\t\\trequire((selectedCollection.tokensAllowed.length > rangeIndex), \\\"Minting Marketplace: Invalid range!\\\");\\n\\t\\trequire((selectedCollection.tokensAllowed[rangeIndex] > 0), \\\"Minting Marketplace: Cannot mint more tokens for this range!\\\");\\n\\t\\trequire(selectedCollection.tokenRangeStart[rangeIndex] <= internalTokenIndex &&\\n\\t\\t\\t\\tinternalTokenIndex <= selectedCollection.tokenRangeEnd[rangeIndex],\\n\\t\\t\\t\\t\\t\\\"Minting Marketplace: Token doesn't belong in that offer range!\\\");\\n\\t\\trequire(msg.value >= selectedCollection.rangePrice[rangeIndex], \\\"Minting Marketplace: Insuficient Funds!\\\");\\n\\t\\t\\n\\t\\taddress creatorAddress;\\n\\t\\tuint256 amount;\\n\\n\\t\\tbool hasFees = IERC2981(selectedCollection.contractAddress).supportsInterface(type(IERC2981).interfaceId);\\n\\t\\t\\n\\t\\tif (hasFees) {\\n\\t\\t\\t(creatorAddress, amount,) = IRAIR_ERC721(selectedCollection.contractAddress).royaltyInfo(0, selectedCollection.rangePrice[rangeIndex], bytes(selectedCollection.rangeName[rangeIndex]));\\n\\t\\t\\tpayable(creatorAddress).transfer(selectedCollection.rangePrice[rangeIndex] * (100000 - (treasuryFee + nodeFee)) / 100000);\\n\\t\\t}\\n\\n\\t\\tpayable(msg.sender).transfer(msg.value - selectedCollection.rangePrice[rangeIndex]);\\n\\t\\tpayable(treasury).transfer((selectedCollection.rangePrice[rangeIndex] * treasuryFee) / 100000);\\n\\t\\tpayable(selectedCollection.nodeAddress).transfer((selectedCollection.rangePrice[rangeIndex] * nodeFee) / 100000);\\n\\t\\tselectedCollection.tokensAllowed[rangeIndex]--;\\n\\t\\tif (selectedCollection.tokensAllowed[rangeIndex] == 0) {\\n\\t\\t\\topenSales--;\\n\\t\\t\\temit SoldOut(selectedCollection.contractAddress, catalogIndex, rangeIndex);\\n\\t\\t}\\n\\t\\tIRAIR_ERC721(selectedCollection.contractAddress).mint(msg.sender, selectedCollection.productIndex, internalTokenIndex);\\n\\t\\temit TokenMinted(msg.sender, selectedCollection.contractAddress, catalogIndex, rangeIndex, internalTokenIndex);\\n\\t}\\n}\",\"keccak256\":\"0xec5e8b1320a234e9dfeba1afc084e99ea13c324f5ba03be606fe50e64d8e132a\",\"license\":\"GPL-3.0\"},\"contracts/Tokens/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.4; \\n\\ninterface IERC2981 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256,bytes)\\\")) == 0xc155531d\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0xc155531d;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _value - the sale price of the NFT asset specified by _tokenId\\n    /// @param _data - information used by extensions of this ERC.\\n    ///                Must not to be used by implementers of EIP-2981 \\n    ///                alone.\\n    /// @return _receiver - address of who should be sent the royalty payment\\n    /// @return _royaltyAmount - the royalty payment amount for _value sale price\\n    /// @return _royaltyPaymentData - information used by extensions of this ERC.\\n    ///                               Must not to be used by implementers of\\n    ///                               EIP-2981 alone.\\n    function royaltyInfo(\\n    \\tuint256 _tokenId,\\n    \\tuint256 _value,\\n    \\tbytes calldata _data)\\n    external returns (\\n    \\taddress _receiver,\\n    \\tuint256 _royaltyAmount,\\n    \\tbytes memory _royaltyPaymentData);\\n\\n    /// @notice Informs callers that this contract supports ERC2981\\n    /// @dev If `_registerInterface(_INTERFACE_ID_ERC2981)` is called\\n    ///      in the initializer, this should be automatic\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @return `true` if the contract implements\\n    ///         `_INTERFACE_ID_ERC2981` and `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\",\"keccak256\":\"0x8f3369e221ab1ae54eb41ca8930062b11fc6ed96ae15b19e01d8c6d63a1257ec\",\"license\":\"GPL-3.0\"},\"contracts/Tokens/IRAIR-ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6; \\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\ninterface IRAIR_ERC721 is IERC721 {\\n\\n\\tevent CollectionCreated(uint indexed id, string name, uint length);\\n\\tevent RangeLocked(uint collectionIndex, uint startingToken, uint endingToken, uint tokensLocked, string collectionName);\\n\\tevent CollectionCompleted(uint indexed id, string name);\\n\\tevent RangeUnlocked(uint collectionID, uint startingToken, uint endingToken);\\n\\n\\t// Get the total number of collections in the contract\\n\\tfunction getCollectionCount() external view returns(uint);\\n\\n\\t// Get a specific collection in the contract\\n\\tfunction getCollection(uint index) external view returns(uint startingToken, uint endingToken, uint mintableTokensLeft, string memory collectionName, uint[] memory locks);\\n\\t\\n\\t// Mint a token inside a collection\\n\\tfunction mint(address to, uint collectionID, uint index) external;\\n\\n\\t// Ask for the royalty info of the creator\\n\\t// Value is the price for the token, so if token #1 is being sold for 100 ETH and the creator fee is 30%, you-ll get as a result 30 in _royaltyAmount\\n\\tfunction royaltyInfo(uint256 _tokenId, uint256 _value,\\tbytes calldata _data)\\n\\t\\texternal view returns (address _receiver, uint256 _royaltyAmount, bytes memory _royaltyPaymentData);\\n}\",\"keccak256\":\"0x8064508a722211ffa485f9630a65ec9ccee316ee6c1de0a2ef07d45215c4aa48\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101755760003560e01c80639c13108c116100cb578063d048db371161007f578063f2fde38b11610059578063f2fde38b14610441578063f416253014610461578063f7ca892a1461048257600080fd5b8063d048db37146103f9578063de2d554b1461040e578063e4ccbe6c1461042157600080fd5b8063ca3dba5d116100b0578063ca3dba5d14610383578063cc0f1786146103b6578063cc32d176146103de57600080fd5b80639c13108c14610335578063a652db491461036357600080fd5b806361d027b31161012d578063715018a611610107578063715018a6146102e257806375cb00ea146102f75780638da5cb5b1461031757600080fd5b806361d027b31461026a5780636605bfda146102a2578063665b64dd146102c257600080fd5b80633539a52c1161015e5780633539a52c146101fa57806338b2c8331461021a578063607814b21461023a57600080fd5b80631c4b995a1461017a5780632a1da9821461019c575b600080fd5b34801561018657600080fd5b5061019a610195366004612990565b610498565b005b3480156101a857600080fd5b506101bc6101b7366004612b9f565b6105b0565b6040516101f194939291906001600160a01b039485168152602081019390935292166040820152606081019190915260800190565b60405180910390f35b34801561020657600080fd5b5061019a610215366004612e6b565b610865565b34801561022657600080fd5b5061019a610235366004612bb8565b6108f0565b34801561024657600080fd5b5061025a610255366004612973565b610a65565b60405190151581526020016101f1565b34801561027657600080fd5b5060675461028a906001600160a01b031681565b6040516001600160a01b0390911681526020016101f1565b3480156102ae57600080fd5b5061019a6102bd366004612973565b610c8e565b3480156102ce57600080fd5b5061019a6102dd366004612a01565b610d4a565b3480156102ee57600080fd5b5061019a611146565b34801561030357600080fd5b5061019a610312366004612ed5565b6111ac565b34801561032357600080fd5b506033546001600160a01b031661028a565b34801561034157600080fd5b506103556103503660046129d5565b611480565b6040519081526020016101f1565b34801561036f57600080fd5b5061019a61037e366004612b84565b6116f2565b34801561038f57600080fd5b506103a361039e366004612d29565b6117a4565b6040516101f19796959493929190612fd0565b3480156103c257600080fd5b506103cb600281565b60405161ffff90911681526020016101f1565b3480156103ea57600080fd5b506069546103cb9061ffff1681565b34801561040557600080fd5b50606654610355565b61019a61041c366004612d4b565b611af9565b34801561042d57600080fd5b5061019a61043c366004612b84565b61233f565b34801561044d57600080fd5b5061019a61045c366004612973565b6123e7565b34801561046d57600080fd5b506069546103cb9062010000900461ffff1681565b34801561048e57600080fd5b5061035560685481565b600054610100900460ff16806104b1575060005460ff16155b6105285760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff1615801561054a576000805461ffff19166101011790555b606780546001600160a01b03861673ffffffffffffffffffffffffffffffffffffffff199091161790556069805461ffff848116620100000263ffffffff1990921690861617179055600060685580156105aa576000805461ff00191690555b50505050565b6000806000806000606686815481106105cb576105cb613358565b60009182526020918290206040805161010081018252600890930290910180546001600160a01b039081168452600182015416838501526002810154838301526003810180548351818702810187019094528084529394919360608601939283018282801561065957602002820191906000526020600020905b815481526020019060010190808311610645575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156106b157602002820191906000526020600020905b81548152602001906001019080831161069d575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561070957602002820191906000526020600020905b8154815260200190600101908083116106f5575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561076157602002820191906000526020600020905b81548152602001906001019080831161074d575b5050505050815260200160078201805480602002602001604051908101604052809291908181526020016000905b8282101561083b5783829060005260206000200180546107ae906132ec565b80601f01602080910402602001604051908101604052809291908181526020018280546107da906132ec565b80156108275780601f106107fc57610100808354040283529160200191610827565b820191906000526020600020905b81548152906001019060200180831161080a57829003601f168201915b50505050508152602001906001019061078f565b5050509152505080516040820151602083015160e090930151519199909850919650945092505050565b61089a6066878154811061087b5761087b613358565b60009182526020909120600890910201546001600160a01b0316610a65565b506108a585856124c9565b6108e88686868686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061256892505050565b505050505050565b82518451148015610902575083518251145b801561090f575081518151145b610983576040805162461bcd60e51b81526020600482015260248101919091527f4d696e74696e67204d61726b6574706c6163653a204f6666657227732072616e60448201527f6765732073686f756c642068617665207468652073616d65206c656e67746821606482015260840161051f565b6109996066868154811061087b5761087b613358565b5060005b81518110156108e8576109e28582815181106109bb576109bb613358565b60200260200101518583815181106109d5576109d5613358565b60200260200101516124c9565b610a53868683815181106109f8576109f8613358565b6020026020010151868481518110610a1257610a12613358565b6020026020010151868581518110610a2c57610a2c613358565b6020026020010151868681518110610a4657610a46613358565b6020026020010151612568565b80610a5d81613327565b91505061099d565b604051632474521560e21b81527ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc960048201523060248201526000906001600160a01b038316906391d148549060440160206040518083038186803b158015610acd57600080fd5b505afa158015610ae1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b059190612b62565b610b775760405162461bcd60e51b815260206004820152603560248201527f4d696e74696e67204d61726b6574706c6163653a2054686973204d61726b657460448201527f706c6163652069736e27742061204d696e746572210000000000000000000000606482015260840161051f565b604051632474521560e21b81527f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db660048201523360248201526001600160a01b038316906391d148549060440160206040518083038186803b158015610bdc57600080fd5b505afa158015610bf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c149190612b62565b610c865760405162461bcd60e51b815260206004820152602e60248201527f4d696e74696e67204d61726b6574706c6163653a2053656e6465722069736e2760448201527f74207468652063726561746f7221000000000000000000000000000000000000606482015260840161051f565b506001919050565b6033546001600160a01b03163314610ce85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051f565b6067805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f63cc689e9d3377465b51fb094ea4ca5e0a1436b21f1ad30d707c696111c66500906020015b60405180910390a150565b610d538b610a65565b508786148015610d6257508388145b8015610d6d57508184145b610de1576040805162461bcd60e51b81526020600482015260248101919091527f4d696e74696e67204d61726b6574706c6163653a204f6666657227732072616e60448201527f6765732073686f756c642068617665207468652073616d65206c656e67746821606482015260840161051f565b6040517f5a1f3c28000000000000000000000000000000000000000000000000000000008152600481018b90526000906001600160a01b038d1690635a1f3c289060240160006040518083038186803b158015610e3d57600080fd5b505afa158015610e51573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e799190810190612d77565b50509250505060008111610ef55760405162461bcd60e51b815260206004820152603f60248201527f4d696e74696e67204d61726b6574706c6163653a2043616e6e6f74206d696e7460448201527f206d6f726520746f6b656e732066726f6d20746869732050726f647563742100606482015260840161051f565b6000606660018160018154018082558091505003906000526020600020906008020190508c8160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550828160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508b816002018190555060005b8481101561108757610fb98c8c83818110610f9457610f94613358565b905060200201358b8b84818110610fad57610fad613358565b905060200201356124c9565b60665461107590610fcc90600190613292565b8d8d84818110610fde57610fde613358565b905060200201358c8c85818110610ff757610ff7613358565b905060200201358b8b8681811061101057611010613358565b905060200201358a8a8781811061102957611029613358565b905060200281019061103b919061312b565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061256892505050565b8061107f81613327565b915050610f77565b5060665461109790600190613292565b606560008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008e8152602001908152602001600020819055507f9c82f4230a033475cfb564c6eb24f4ad45139901a657e8edd9a6cd234e3549498d8d87879050600160668054905061110a9190613292565b604080516001600160a01b039095168552602085019390935291830152606082015260800160405180910390a150505050505050505050505050565b6033546001600160a01b031633146111a05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051f565b6111aa60006126ae565b565b6000606688815481106111c1576111c1613358565b906000526020600020906008020190508060040187815481106111e6576111e6613358565b9060005260206000200154851115801561121f575080600301878154811061121057611210613358565b90600052602060002001548610155b6112b75760405162461bcd60e51b815260206004820152604360248201527f4d696e74696e67204d61726b6574706c6163653a204e6577206c696d6974732060448201527f6d7573742062652077697468696e207468652070726576696f7573206c696d6960648201527f7473210000000000000000000000000000000000000000000000000000000000608482015260a40161051f565b80546112cb906001600160a01b0316610a65565b506112d686866124c9565b6112e08686613292565b8160030188815481106112f5576112f5613358565b906000526020600020015482600401898154811061131557611315613358565b906000526020600020015461132a9190613292565b6113349190613292565b81600501888154811061134957611349613358565b9060005260206000200160008282546113629190613292565b925050819055508581600301888154811061137f5761137f613358565b9060005260206000200181905550848160040188815481106113a3576113a3613358565b9060005260206000200181905550838160060188815481106113c7576113c7613358565b906000526020600020018190555082828260070189815481106113ec576113ec613358565b90600052602060002001919061140392919061270d565b5080546005820180547fd99934f5b053ba28c54ae74875195b688f9367ba5b0c50f5233e692eb91549c8926001600160a01b0316918b918b91908290811061144d5761144d613358565b906000526020600020015488888860405161146e9796959493929190612f75565b60405180910390a15050505050505050565b6066546000906114f85760405162461bcd60e51b815260206004820152603360248201527f4d696e74696e67204d61726b6574706c6163653a20546865726520617265206e60448201527f6f206f6666657273207265676973746572656400000000000000000000000000606482015260840161051f565b6001600160a01b038316600081815260656020908152604080832086845290915290205460668054909190811061153157611531613358565b60009182526020909120600890910201546001600160a01b0316146115e55760405162461bcd60e51b8152602060048201526044602482018190527f4d696e74696e67204d61726b6574706c6163653a20546865726520617265206e908201527f6f206f6666657273207265676973746572656420666f7220746861742061646460648201527f7265737300000000000000000000000000000000000000000000000000000000608482015260a40161051f565b6001600160a01b038316600090815260656020908152604080832085845290915290205460668054849290811061161e5761161e613358565b906000526020600020906008020160020154146116c95760405162461bcd60e51b815260206004820152604660248201527f4d696e74696e67204d61726b6574706c6163653a20546865726520617265206960448201527f73206e6f206f66666572207265676973746572656420666f722074686174207060648201527f726f647563740000000000000000000000000000000000000000000000000000608482015260a40161051f565b506001600160a01b03919091166000908152606560209081526040808320938352929052205490565b6033546001600160a01b0316331461174c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051f565b6069805461ffff191661ffff8316908117909155606754604080516001600160a01b03909216825260208201929092527f2adb51c26afe364a53c16cd44e82bdf5a52680ad11c64f2dbeb5bdb3764f731d9101610d3f565b6000806000806000806060600060668a815481106117c4576117c4613358565b60009182526020918290206040805161010081018252600890930290910180546001600160a01b039081168452600182015416838501526002810154838301526003810180548351818702810187019094528084529394919360608601939283018282801561185257602002820191906000526020600020905b81548152602001906001019080831161183e575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156118aa57602002820191906000526020600020905b815481526020019060010190808311611896575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561190257602002820191906000526020600020905b8154815260200190600101908083116118ee575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561195a57602002820191906000526020600020905b815481526020019060010190808311611946575b5050505050815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015611a345783829060005260206000200180546119a7906132ec565b80601f01602080910402602001604051908101604052809291908181526020018280546119d3906132ec565b8015611a205780601f106119f557610100808354040283529160200191611a20565b820191906000526020600020905b815481529060010190602001808311611a0357829003601f168201915b505050505081526020019060010190611988565b505050508152505090508060000151816040015182606001518b81518110611a5e57611a5e613358565b602002602001015183608001518c81518110611a7c57611a7c613358565b60200260200101518460a001518d81518110611a9a57611a9a613358565b60200260200101518560c001518e81518110611ab857611ab8613358565b60200260200101518660e001518f81518110611ad657611ad6613358565b602002602001015197509750975097509750975097505092959891949750929550565b600060668481548110611b0e57611b0e613358565b6000918252602090912060089091020180549091506001600160a01b0316611b9e5760405162461bcd60e51b815260206004820152603160248201527f4d696e74696e67204d61726b6574706c6163653a20496e76616c696420436f6c60448201527f6c656374696f6e2053656c656374656421000000000000000000000000000000606482015260840161051f565b60058101548310611c175760405162461bcd60e51b815260206004820152602360248201527f4d696e74696e67204d61726b6574706c6163653a20496e76616c69642072616e60448201527f6765210000000000000000000000000000000000000000000000000000000000606482015260840161051f565b6000816005018481548110611c2e57611c2e613358565b906000526020600020015411611cac5760405162461bcd60e51b815260206004820152603c60248201527f4d696e74696e67204d61726b6574706c6163653a2043616e6e6f74206d696e7460448201527f206d6f726520746f6b656e7320666f7220746869732072616e67652100000000606482015260840161051f565b81816003018481548110611cc257611cc2613358565b906000526020600020015411158015611cfa5750806004018381548110611ceb57611ceb613358565b90600052602060002001548211155b611d6c5760405162461bcd60e51b815260206004820152603e60248201527f4d696e74696e67204d61726b6574706c6163653a20546f6b656e20646f65736e60448201527f27742062656c6f6e6720696e2074686174206f666665722072616e6765210000606482015260840161051f565b806006018381548110611d8157611d81613358565b9060005260206000200154341015611e015760405162461bcd60e51b815260206004820152602760248201527f4d696e74696e67204d61726b6574706c6163653a20496e737566696369656e7460448201527f2046756e64732100000000000000000000000000000000000000000000000000606482015260840161051f565b80546040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527fc0aa9aba000000000000000000000000000000000000000000000000000000006004820152600091829182916001600160a01b0316906301ffc9a79060240160206040518083038186803b158015611e8157600080fd5b505afa158015611e95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb99190612b62565b905080156120315783546006850180546001600160a01b039092169163c155531d916000918a908110611eee57611eee613358565b9060005260206000200154876007018a81548110611f0e57611f0e613358565b906000526020600020016040518463ffffffff1660e01b8152600401611f3693929190613073565b60006040518083038186803b158015611f4e57600080fd5b505afa158015611f62573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f8a9190810190612af4565b5060695491945092506001600160a01b038416906108fc90620186a090611fbd9061ffff620100008204811691166131ef565b611fce9061ffff16620186a061326e565b62ffffff16876006018a81548110611fe857611fe8613358565b9060005260206000200154611ffd919061324f565b612007919061322d565b6040518115909202916000818181858888f1935050505015801561202f573d6000803e3d6000fd5b505b336001600160a01b03166108fc85600601888154811061205357612053613358565b9060005260206000200154346120699190613292565b6040518115909202916000818181858888f19350505050158015612091573d6000803e3d6000fd5b506067546069546006860180546001600160a01b03909316926108fc92620186a09261ffff909116918b9081106120ca576120ca613358565b90600052602060002001546120df919061324f565b6120e9919061322d565b6040518115909202916000818181858888f19350505050158015612111573d6000803e3d6000fd5b5060018401546069546006860180546001600160a01b03909316926108fc92620186a0926201000090910461ffff16918b90811061215157612151613358565b9060005260206000200154612166919061324f565b612170919061322d565b6040518115909202916000818181858888f19350505050158015612198573d6000803e3d6000fd5b508360050186815481106121ae576121ae613358565b600091825260208220018054916121c4836132d5565b91905055508360050186815481106121de576121de613358565b9060005260206000200154600014156122535760688054906000612201836132d5565b90915550508354604080516001600160a01b0390921682526020820189905281018790527fd7597aa2d6438f91b7d71e7d13764734af94bc7db28326e194bfab67236e58c19060600160405180910390a15b835460028501546040517f156e29f60000000000000000000000000000000000000000000000000000000081523360048201526024810191909152604481018790526001600160a01b039091169063156e29f690606401600060405180830381600087803b1580156122c457600080fd5b505af11580156122d8573d6000803e3d6000fd5b50508554604080513381526001600160a01b03909216602083015281018a905260608101899052608081018890527f188c6e7ce5cf6a45f5d4441da49a243005c388c7f4f00137378ba3d058baf01d925060a001905060405180910390a150505050505050565b6033546001600160a01b031633146123995760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051f565b6069805463ffff000019166201000061ffff8416908102919091179091556040519081527f6a6cc0807c3fb0910ab842e5fd4c193307b3cff967f1a7d096538e4961884b7090602001610d3f565b6033546001600160a01b031633146124415760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051f565b6001600160a01b0381166124bd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161051f565b6124c6816126ae565b50565b8082106125645760405162461bcd60e51b815260206004820152605960248201527f4d696e74696e67204d61726b6574706c6163653a2052616e676527732073746160448201527f7274696e6720746f6b656e2068617320746f206265206c657373207468616e2060648201527f7468652072616e6765277320656e64696e6720746f6b656e2100000000000000608482015260a40161051f565b5050565b60006066868154811061257d5761257d613358565b600091825260208083206003600890930201918201805460018181018355918552828520018990556004830180548083018255908552828520018890556006830180549182018155845292209091018490559050600581016125df8686613292565b6125ea906001613215565b81546001818101845560009384526020808520909201929092556007840180549283018155835291829020845161262993919092019190850190612791565b508054600282015460078301547f5fb7e8962f72a7aa133e869363451a963b669f4833ca29bc394ebd53f121b98f926001600160a01b03169190899061267190600190613292565b8989898960405161268998979695949392919061301d565b60405180910390a1606880549060006126a183613327565b9190505550505050505050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054612719906132ec565b90600052602060002090601f01602090048101928261273b5760008555612781565b82601f106127545782800160ff19823516178555612781565b82800160010185558215612781579182015b82811115612781578235825591602001919060010190612766565b5061278d929150612805565b5090565b82805461279d906132ec565b90600052602060002090601f0160209004810192826127bf5760008555612781565b82601f106127d857805160ff1916838001178555612781565b82800160010185558215612781579182015b828111156127815782518255916020019190600101906127ea565b5b8082111561278d5760008155600101612806565b600061282d612828846131c7565b613172565b905082815283838301111561284157600080fd5b61284f8360208301846132a9565b9392505050565b803561286181613384565b919050565b60008083601f84011261287857600080fd5b50813567ffffffffffffffff81111561289057600080fd5b6020830191508360208260051b85010111156128ab57600080fd5b9250929050565b600082601f8301126128c357600080fd5b813560206128d3612828836131a3565b80838252828201915082860187848660051b89010111156128f357600080fd5b60005b85811015612912578135845292840192908401906001016128f6565b5090979650505050505050565b60008083601f84011261293157600080fd5b50813567ffffffffffffffff81111561294957600080fd5b6020830191508360208285010111156128ab57600080fd5b803561ffff8116811461286157600080fd5b60006020828403121561298557600080fd5b813561284f81613384565b6000806000606084860312156129a557600080fd5b83356129b081613384565b92506129be60208501612961565b91506129cc60408501612961565b90509250925092565b600080604083850312156129e857600080fd5b82356129f381613384565b946020939093013593505050565b600080600080600080600080600080600060e08c8e031215612a2257600080fd5b612a2b8c612856565b9a5060208c0135995067ffffffffffffffff8060408e01351115612a4e57600080fd5b612a5e8e60408f01358f01612866565b909a50985060608d0135811015612a7457600080fd5b612a848e60608f01358f01612866565b909850965060808d0135811015612a9a57600080fd5b612aaa8e60808f01358f01612866565b909650945060a08d0135811015612ac057600080fd5b50612ad18d60a08e01358e01612866565b9093509150612ae260c08d01612856565b90509295989b509295989b9093969950565b600080600060608486031215612b0957600080fd5b8351612b1481613384565b60208501516040860151919450925067ffffffffffffffff811115612b3857600080fd5b8401601f81018613612b4957600080fd5b612b588682516020840161281a565b9150509250925092565b600060208284031215612b7457600080fd5b8151801515811461284f57600080fd5b600060208284031215612b9657600080fd5b61284f82612961565b600060208284031215612bb157600080fd5b5035919050565b600080600080600060a08688031215612bd057600080fd5b85359450602086013567ffffffffffffffff80821115612bef57600080fd5b612bfb89838a016128b2565b95506040880135915080821115612c1157600080fd5b612c1d89838a016128b2565b94506060880135915080821115612c3357600080fd5b612c3f89838a016128b2565b93506080880135915080821115612c5557600080fd5b818801915088601f830112612c6957600080fd5b612c7661282883356131a3565b8083358252602082019150602084018b6020863560051b8701011115612c9b57600080fd5b60005b8535811015612d16578482351115612cb557600080fd5b813586018d603f820112612cc857600080fd5b6020810135612cd9612828826131c7565b8181528f6040838501011115612cee57600080fd5b8160408401602083013760006020928201830152865294850194929092019150600101612c9e565b5050809450505050509295509295909350565b60008060408385031215612d3c57600080fd5b50508035926020909101359150565b600080600060608486031215612d6057600080fd5b505081359360208301359350604090920135919050565b600080600080600060a08688031215612d8f57600080fd5b85519450602080870151945060408701519350606087015167ffffffffffffffff80821115612dbd57600080fd5b818901915089601f830112612dd157600080fd5b612ddf8a835185850161281a565b94506080890151915080821115612df557600080fd5b508701601f81018913612e0757600080fd5b8051612e15612828826131a3565b8082825284820191508484018c868560051b8701011115612e3557600080fd5b600094505b83851015612e58578051835260019490940193918501918501612e3a565b5080955050505050509295509295909350565b60008060008060008060a08789031215612e8457600080fd5b86359550602087013594506040870135935060608701359250608087013567ffffffffffffffff811115612eb757600080fd5b612ec389828a0161291f565b979a9699509497509295939492505050565b600080600080600080600060c0888a031215612ef057600080fd5b873596506020880135955060408801359450606088013593506080880135925060a088013567ffffffffffffffff811115612f2a57600080fd5b612f368a828b0161291f565b989b979a50959850939692959293505050565b60008151808452612f618160208601602086016132a9565b601f01601f19169290920160200192915050565b6001600160a01b038816815286602082015285604082015284606082015283608082015260c060a08201528160c0820152818360e0830137600081830160e090810191909152601f909201601f191601019695505050505050565b6001600160a01b03881681528660208201528560408201528460608201528360808201528260a082015260e060c0820152600061301060e0830184612f49565b9998505050505050505050565b60006101006001600160a01b038b1683528960208401528860408401528760608401528660808401528560a08401528460c08401528060e084015261306481840185612f49565b9b9a5050505050505050505050565b838152600060208481840152606060408401526000845481600182811c9150808316806130a157607f831692505b8583108114156130bf57634e487b7160e01b85526022600452602485fd5b60608801839052608088018180156130de57600181146130ef5761311a565b60ff1986168252878201965061311a565b60008b81526020902060005b86811015613114578154848201529085019089016130fb565b83019750505b50949b9a5050505050505050505050565b6000808335601e1984360301811261314257600080fd5b83018035915067ffffffffffffffff82111561315d57600080fd5b6020019150368190038213156128ab57600080fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561319b5761319b61336e565b604052919050565b600067ffffffffffffffff8211156131bd576131bd61336e565b5060051b60200190565b600067ffffffffffffffff8211156131e1576131e161336e565b50601f01601f191660200190565b600061ffff80831681851680830382111561320c5761320c613342565b01949350505050565b6000821982111561322857613228613342565b500190565b60008261324a57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561326957613269613342565b500290565b600062ffffff8381169083168181101561328a5761328a613342565b039392505050565b6000828210156132a4576132a4613342565b500390565b60005b838110156132c45781810151838201526020016132ac565b838111156105aa5750506000910152565b6000816132e4576132e4613342565b506000190190565b600181811c9082168061330057607f821691505b6020821081141561332157634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561333b5761333b613342565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146124c657600080fdfea2646970667358221220511a1046b2ddfe9827631268982c80c37a854bba0bc6f09ad9d37c6cdad8cc9564736f6c63430008060033",
  "devdoc": {
    "author": "Juan M. Sanchez M.",
    "details": "Uses AccessControl for the minting mechanisms on other tokens!",
    "kind": "dev",
    "methods": {
      "addOffer(address,uint256,uint256[],uint256[],uint256[],string[],address)": {
        "details": "It validates that the collection has mintable tokens leftIt validates that the number of tokens allowed to sell is less or equal than the number of mintable tokens",
        "params": {
          "_nodeAddress": "Address of the node to be paid",
          "_productIndex": "Index of the collection inside the ERC721",
          "_rangeEndToken": "Ending token inside the ERC721 (for each range)",
          "_rangeName": "Name (for each range)",
          "_rangePrice": "Price of each range (for each range)",
          "_rangeStartToken": "Starting token inside the ERC721 (for each range)",
          "_tokenAddress": "Address of the ERC721"
        }
      },
      "buyToken(uint256,uint256,uint256)": {
        "details": "It validates that the Marketplace is still a minterIt splits the funds in 3 waysIt validates that the ERC721 token supports the interface for royalties and only then, it will give the funds to the creatorIf the ERC721 collection doesn't have any mintable tokens left, it will revert using the ERC721 error, not in the marketplace!",
        "params": {
          "catalogIndex": "Index of the sale within the catalog",
          "internalTokenIndex": "Index of the token within the range",
          "rangeIndex": "Index of the range within the offer"
        }
      },
      "getOfferCount()": {
        "details": "Includes completed collections though"
      },
      "getOfferInfo(uint256)": {
        "details": "Translates the internal offer schema to individual values",
        "params": {
          "_index": "Index of the offer in this contract"
        }
      },
      "getOfferRangeInfo(uint256,uint256)": {
        "details": "Translates the internal offer schema to individual values",
        "params": {
          "offerIndex": "Index of the offer in this contract",
          "rangeIndex": "Index of the range inside the contract"
        }
      },
      "initialize(address,uint16,uint16)": {
        "details": "Should start up with the treasury, node and treasury fee",
        "params": {
          "_nodeFee": "Fee given to the node on every sale (Recommended default: 1%)",
          "_treasury": "The address of the Treasury",
          "_treasuryFee": "Fee given to the treasury every sale (Recommended default: 9%)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setNodeFee(uint16)": {
        "params": {
          "_newFee": "New Fee"
        }
      },
      "setTreasuryAddress(address)": {
        "details": "Make sure the treasury is a wallet address!If the treasury is a contract, make sure it has a receive function!",
        "params": {
          "_newTreasury": "New address"
        }
      },
      "setTreasuryFee(uint16)": {
        "params": {
          "_newFee": "New Fee"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "validateRoles(address)": {
        "details": "Doubles as a view function for anyone wondering if they can mint or if they need to approve the marketplace",
        "params": {
          "tokenAddress": "Address of the token to validate"
        }
      }
    },
    "title": "Minter Marketplace ",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addOffer(address,uint256,uint256[],uint256[],uint256[],string[],address)": {
        "notice": "Adds an offer to the market's catalog"
      },
      "buyToken(uint256,uint256,uint256)": {
        "notice": "Receives funds and mints a new token for the sender"
      },
      "getOfferCount()": {
        "notice": "Returns the number of collections on the market"
      },
      "getOfferInfo(uint256)": {
        "notice": "Returns the basic information about an offer"
      },
      "getOfferRangeInfo(uint256,uint256)": {
        "notice": "Returns the information about an offer's range"
      },
      "initialize(address,uint16,uint16)": {
        "notice": "Constructor"
      },
      "setNodeFee(uint16)": {
        "notice": "Sets the new fee paid to nodes"
      },
      "setTreasuryAddress(address)": {
        "notice": "Sets the new treasury address"
      },
      "setTreasuryFee(uint16)": {
        "notice": "Sets the new treasury fee"
      },
      "validateRoles(address)": {
        "notice": "Validates that the Minter Marketplace and the message sender have the correct roles inside the ERC721"
      }
    },
    "notice": "Handles the minting of ERC721 RAIR Tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 747,
        "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 750,
        "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1008,
        "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 627,
        "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 740,
        "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6388,
        "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
        "label": "_contractToOffers",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6392,
        "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
        "label": "offerCatalog",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_struct(offer)6379_storage)dyn_storage"
      },
      {
        "astId": 6394,
        "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
        "label": "treasury",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 6396,
        "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
        "label": "openSales",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 6398,
        "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
        "label": "treasuryFee",
        "offset": 0,
        "slot": "105",
        "type": "t_uint16"
      },
      {
        "astId": 6400,
        "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
        "label": "nodeFee",
        "offset": 2,
        "slot": "105",
        "type": "t_uint16"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(offer)6379_storage)dyn_storage": {
        "base": "t_struct(offer)6379_storage",
        "encoding": "dynamic_array",
        "label": "struct Minter_Marketplace.offer[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(offer)6379_storage": {
        "encoding": "inplace",
        "label": "struct Minter_Marketplace.offer",
        "members": [
          {
            "astId": 6359,
            "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
            "label": "contractAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6361,
            "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
            "label": "nodeAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6363,
            "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
            "label": "productIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6366,
            "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
            "label": "tokenRangeStart",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 6369,
            "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
            "label": "tokenRangeEnd",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 6372,
            "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
            "label": "tokensAllowed",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 6375,
            "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
            "label": "rangePrice",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 6378,
            "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
            "label": "rangeName",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_string_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}