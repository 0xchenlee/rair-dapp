{
  "address": "0x5535FE9ABdA206F6780cc87b4e1fe4733b98bd9C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pricePerToken",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_rairAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "NewContractDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc777",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceForNFT",
          "type": "uint256"
        }
      ],
      "name": "NewTokensAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc777",
          "type": "address"
        }
      ],
      "name": "TokenNoLongerAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc777",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensWithdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ERC777",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc777Address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pricePerToken",
          "type": "uint256"
        }
      ],
      "name": "add777Token",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "contractToOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "creators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deploymentCostForERC777",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        }
      ],
      "name": "getContractCountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCreatorsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerToContracts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc777Address",
          "type": "address"
        }
      ],
      "name": "remove777Token",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "tokensReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc777",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7702a5fabd8b7a3d776f23038e87d850363ed3ada6885949b8d42fd24dc8099b",
  "receipt": {
    "to": null,
    "from": "0xEC30759D0A3F3CE0A730920DC29d74e441f492C3",
    "contractAddress": "0x5535FE9ABdA206F6780cc87b4e1fe4733b98bd9C",
    "transactionIndex": 0,
    "gasUsed": "5599576",
    "logsBloom": "0x
    "blockHash": "0x916f71180413a589236755fab1a70793e15c09fca316b8aca504c2b0bac5b333",
    "transactionHash": "0x7702a5fabd8b7a3d776f23038e87d850363ed3ada6885949b8d42fd24dc8099b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 20924418,
        "transactionHash": "0x7702a5fabd8b7a3d776f23038e87d850363ed3ada6885949b8d42fd24dc8099b",
        "address": "0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24",
        "topics": [
          "0x93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db153",
          "0x0000000000000000000000005535fe9abda206f6780cc87b4e1fe4733b98bd9c",
          "0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b",
          "0x0000000000000000000000005535fe9abda206f6780cc87b4e1fe4733b98bd9c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x916f71180413a589236755fab1a70793e15c09fca316b8aca504c2b0bac5b333"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 20924418,
        "transactionHash": "0x7702a5fabd8b7a3d776f23038e87d850363ed3ada6885949b8d42fd24dc8099b",
        "address": "0x5535FE9ABdA206F6780cc87b4e1fe4733b98bd9C",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x916f71180413a589236755fab1a70793e15c09fca316b8aca504c2b0bac5b333"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 20924418,
        "transactionHash": "0x7702a5fabd8b7a3d776f23038e87d850363ed3ada6885949b8d42fd24dc8099b",
        "address": "0x5535FE9ABdA206F6780cc87b4e1fe4733b98bd9C",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xe33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c147230",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x916f71180413a589236755fab1a70793e15c09fca316b8aca504c2b0bac5b333"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 20924418,
        "transactionHash": "0x7702a5fabd8b7a3d776f23038e87d850363ed3ada6885949b8d42fd24dc8099b",
        "address": "0x5535FE9ABdA206F6780cc87b4e1fe4733b98bd9C",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ec30759d0a3f3ce0a730920dc29d74e441f492c3",
          "0x000000000000000000000000ec30759d0a3f3ce0a730920dc29d74e441f492c3"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x916f71180413a589236755fab1a70793e15c09fca316b8aca504c2b0bac5b333"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 20924418,
        "transactionHash": "0x7702a5fabd8b7a3d776f23038e87d850363ed3ada6885949b8d42fd24dc8099b",
        "address": "0x5535FE9ABdA206F6780cc87b4e1fe4733b98bd9C",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b",
          "0x000000000000000000000000ec30759d0a3f3ce0a730920dc29d74e441f492c3",
          "0x000000000000000000000000ec30759d0a3f3ce0a730920dc29d74e441f492c3"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x916f71180413a589236755fab1a70793e15c09fca316b8aca504c2b0bac5b333"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 20924418,
        "transactionHash": "0x7702a5fabd8b7a3d776f23038e87d850363ed3ada6885949b8d42fd24dc8099b",
        "address": "0x5535FE9ABdA206F6780cc87b4e1fe4733b98bd9C",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xe33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c147230",
          "0x0000000000000000000000000ce668d271b8016a785bf146e58739f432300b12",
          "0x000000000000000000000000ec30759d0a3f3ce0a730920dc29d74e441f492c3"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x916f71180413a589236755fab1a70793e15c09fca316b8aca504c2b0bac5b333"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 20924418,
        "transactionHash": "0x7702a5fabd8b7a3d776f23038e87d850363ed3ada6885949b8d42fd24dc8099b",
        "address": "0x5535FE9ABdA206F6780cc87b4e1fe4733b98bd9C",
        "topics": [
          "0x3229ffedb9ac4c1136e523cacfdab8c7621a1f1394161e5fa51850fbf4b4079b"
        ],
        "data": "0x0000000000000000000000000ce668d271b8016a785bf146e58739f432300b12000000000000000000000000000000000000000000000000d02ab486cedc0000",
        "logIndex": 6,
        "blockHash": "0x916f71180413a589236755fab1a70793e15c09fca316b8aca504c2b0bac5b333"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 20924418,
        "transactionHash": "0x7702a5fabd8b7a3d776f23038e87d850363ed3ada6885949b8d42fd24dc8099b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ec30759d0a3f3ce0a730920dc29d74e441f492c3",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000004f9323897dc0000000000000000000000000000000000000000000000000000813b5439eb3251a00000000000000000000000000000000000000000000000002506915ab84dfb000000000000000000000000000000000000000000000000007c422201535651a000000000000000000000000000000000000000000000000029ffc3935029fb0",
        "logIndex": 7,
        "blockHash": "0x916f71180413a589236755fab1a70793e15c09fca316b8aca504c2b0bac5b333"
      }
    ],
    "blockNumber": 20924418,
    "cumulativeGasUsed": "5599576",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "15000000000000000000",
    "0x0Ce668D271b8016a785Bf146e58739F432300B12"
  ],
  "solcInputHash": "743ef5957cf5282afb9a20ad809ffdeb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rairAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"NewContractDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc777\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceForNFT\",\"type\":\"uint256\"}],\"name\":\"NewTokensAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc777\",\"type\":\"address\"}],\"name\":\"TokenNoLongerAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc777\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC777\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc777Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerToken\",\"type\":\"uint256\"}],\"name\":\"add777Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractToOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deploymentCostForERC777\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"getContractCountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreatorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerToContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc777Address\",\"type\":\"address\"}],\"name\":\"remove777Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc777\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Juan M. Sanchez M.\",\"details\":\"Uses AccessControl for the reception of ERC777 tokens!\",\"kind\":\"dev\",\"methods\":{\"add777Token(address,uint256)\":{\"params\":{\"_erc777Address\":\"Address of the new Token\"}},\"constructor\":{\"params\":{\"_pricePerToken\":\"Tokens required for the deployment\",\"_rairAddress\":\"Address of the primary ERC777 contract (RAIR contract)\"}},\"getContractCountOf(address)\":{\"details\":\"Use alongside ownerToContracts for the full list of tokens \",\"params\":{\"deployer\":\"Wallet address to query\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"remove777Token(address)\":{\"params\":{\"_erc777Address\":\"Address of the Token\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"details\":\"This is our deployment mechanism for ERC721 contracts!\",\"params\":{\"amount\":\"The number of tokens sent\",\"from\":\"The owner of the tokens\",\"operator\":\"The ERC777 operator calling the send() function\",\"operatorData\":\"bytes sent from the operator\",\"to\":\"The recipient of the tokens\",\"userData\":\"bytes sent from the send call\"}},\"withdrawTokens(address,uint256)\":{\"details\":\"If the contract has less than the amount, the ERC777 contract will revertAccessControl makes sure only an OWNER can withdraw\",\"params\":{\"amount\":\"Amount of tokens to withdraw\",\"erc777\":\"Address of the ERC777 contract\"}}},\"title\":\"RAIR ERC721 Factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"add777Token(address,uint256)\":{\"notice\":\"Adds an address to the list of allowed minters\"},\"constructor\":{\"notice\":\"Factory Constructor\"},\"getContractCountOf(address)\":{\"notice\":\"Returns the number of contracts deployed by an address\"},\"getCreatorsCount()\":{\"notice\":\"Returns the number of addresses that have deployed a contract\"},\"remove777Token(address)\":{\"notice\":\"Removes an address from the list of allowed minters\"},\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"notice\":\"Function called by an ERC777 when they send tokens\"},\"withdrawTokens(address,uint256)\":{\"notice\":\"Transfers tokens from the factory to any of the OWNER addresses\"}},\"notice\":\"Handles the deployment of ERC721 RAIR Tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RAIR-ERC721_Factory.sol\":\"RAIR_Token_Factory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\",\"keccak256\":\"0x313834fba9dbefee1df7717a5e3063ebf567d276e67bc925a03c7f8423f4c50e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a9a31f278ee3ed0568ab7e3c09ecb72bf92f922475a274760b4c58f87f9ad0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\",\"keccak256\":\"0xc1e11e6758e8c83fc43e71e63dc1a211cace8a5912bbf06e697bc2148069800f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0fd59f83d16f090c27a8105db0f4ad05b0f5d127f9878b82ebf0ad2bbc4e3f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(\\n        address account,\\n        bytes32 _interfaceHash,\\n        address implementer\\n    ) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     * @param account Address of the contract for which to update the cache.\\n     * @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not.\\n     * If the result is not cached a direct lookup on the contract address is performed.\\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     * {updateERC165Cache} with the contract address.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\",\"keccak256\":\"0xdf30b8f2bba82b86661928377f70ba4b68739a799f8bad36e542144811aa70d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/RAIR-ERC721_Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.9; \\r\\n\\r\\n// Interfaces\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\r\\n\\r\\n// Parent classes\\r\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\r\\nimport '@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\r\\n\\r\\nimport './Tokens/RAIR-ERC721.sol';\\r\\n\\r\\n/// @title  RAIR ERC721 Factory\\r\\n/// @notice Handles the deployment of ERC721 RAIR Tokens\\r\\n/// @author Juan M. Sanchez M.\\r\\n/// @dev \\tUses AccessControl for the reception of ERC777 tokens!\\r\\ncontract RAIR_Token_Factory is IERC777Recipient, AccessControlEnumerable {\\r\\n\\tIERC1820Registry internal constant _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\r\\n\\t\\r\\n\\tbytes32 public constant OWNER = keccak256(\\\"OWNER\\\");\\r\\n\\tbytes32 public constant ERC777 = keccak256(\\\"ERC777\\\");\\r\\n\\r\\n\\tmapping(address => address[]) public ownerToContracts;\\r\\n\\tmapping(address => address) public contractToOwner;\\r\\n\\r\\n\\tmapping(address => uint) public deploymentCostForERC777;\\r\\n\\r\\n\\taddress[] public creators;\\r\\n\\r\\n\\tevent NewTokensAccepted(address erc777, uint priceForNFT);\\r\\n\\tevent TokenNoLongerAccepted(address erc777);\\r\\n\\tevent NewContractDeployed(address owner, uint id, address token);\\r\\n\\tevent TokensWithdrawn(address recipient, address erc777, uint amount);\\r\\n\\r\\n\\t/// @notice Factory Constructor\\r\\n\\t/// @param  _pricePerToken    Tokens required for the deployment\\r\\n\\t/// @param  _rairAddress \\t  Address of the primary ERC777 contract (RAIR contract)\\r\\n\\tconstructor(uint _pricePerToken, address _rairAddress) {\\r\\n\\t\\t_ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC777TokensRecipient\\\"), address(this));\\r\\n\\t\\t_setRoleAdmin(OWNER, OWNER);\\r\\n\\t\\t_setRoleAdmin(ERC777, OWNER);\\r\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n\\t\\t_setupRole(OWNER, msg.sender);\\r\\n\\t\\t_setupRole(ERC777, _rairAddress);\\r\\n\\t\\tdeploymentCostForERC777[_rairAddress] = _pricePerToken;\\r\\n\\t\\temit NewTokensAccepted(_rairAddress, _pricePerToken);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Returns the number of addresses that have deployed a contract\\r\\n\\tfunction getCreatorsCount() public view returns(uint count) {\\r\\n\\t\\treturn creators.length;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Returns the number of contracts deployed by an address\\r\\n\\t/// @dev\\tUse alongside ownerToContracts for the full list of tokens \\r\\n\\t/// @param\\tdeployer\\tWallet address to query\\r\\n\\tfunction getContractCountOf(address deployer) public view returns(uint count) {\\r\\n\\t\\treturn ownerToContracts[deployer].length;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Transfers tokens from the factory to any of the OWNER addresses\\r\\n\\t/// @dev \\tIf the contract has less than the amount, the ERC777 contract will revert\\r\\n\\t/// @dev \\tAccessControl makes sure only an OWNER can withdraw\\r\\n\\t/// @param \\terc777\\tAddress of the ERC777 contract\\r\\n\\t/// @param \\tamount\\tAmount of tokens to withdraw\\r\\n\\tfunction withdrawTokens(address erc777, uint amount) public onlyRole(OWNER) {\\r\\n\\t\\trequire(hasRole(ERC777, erc777), \\\"RAIR Factory: Specified contract isn't an approved erc777 contract\\\");\\r\\n\\t\\tIERC777(erc777).send(msg.sender, amount, \\\"Factory Withdraw\\\");\\r\\n\\t\\temit TokensWithdrawn(msg.sender, erc777, amount);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice\\tAdds an address to the list of allowed minters\\r\\n\\t/// @param\\t_erc777Address\\tAddress of the new Token\\r\\n\\tfunction add777Token(address _erc777Address, uint _pricePerToken) public onlyRole(OWNER) {\\r\\n\\t\\tgrantRole(ERC777, _erc777Address);\\r\\n\\t\\tdeploymentCostForERC777[_erc777Address] = _pricePerToken;\\r\\n\\t\\temit NewTokensAccepted(_erc777Address, _pricePerToken);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice\\tRemoves an address from the list of allowed minters\\r\\n\\t/// @param\\t_erc777Address\\tAddress of the Token\\r\\n\\tfunction remove777Token(address _erc777Address) public onlyRole(OWNER) {\\r\\n\\t\\trevokeRole(ERC777, _erc777Address);\\r\\n\\t\\tdeploymentCostForERC777[_erc777Address] = 0;\\r\\n\\t\\temit TokenNoLongerAccepted(_erc777Address);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Function called by an ERC777 when they send tokens\\r\\n\\t/// @dev    This is our deployment mechanism for ERC721 contracts!\\r\\n\\t/// @param operator\\t\\tThe ERC777 operator calling the send() function\\r\\n\\t/// @param from\\t\\t\\tThe owner of the tokens\\r\\n\\t/// @param to\\t\\t\\tThe recipient of the tokens\\r\\n\\t/// @param amount\\t\\tThe number of tokens sent\\r\\n\\t/// @param userData\\t\\tbytes sent from the send call\\r\\n\\t/// @param operatorData\\tbytes sent from the operator\\r\\n\\tfunction tokensReceived(address operator, address from, address to, uint256 amount, bytes calldata userData, bytes calldata operatorData) external onlyRole(ERC777) override {\\r\\n\\t\\trequire(amount >= deploymentCostForERC777[msg.sender], 'RAIR Factory: not enough RAIR tokens to deploy a contract');\\r\\n\\r\\n\\t\\tif (amount - (deploymentCostForERC777[msg.sender]) > 0) {\\r\\n\\t\\t\\tIERC777(msg.sender).send(from, amount - (deploymentCostForERC777[msg.sender]), userData);\\r\\n\\t\\t}\\r\\n\\t\\taddress[] storage tokensFromOwner = ownerToContracts[from];\\r\\n\\t\\t\\r\\n\\t\\tif (tokensFromOwner.length == 0) {\\r\\n\\t\\t\\tcreators.push(from);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tRAIR_ERC721 newToken = new RAIR_ERC721(string(userData), from, 30000);\\r\\n\\t\\ttokensFromOwner.push(address(newToken));\\r\\n\\t\\tcontractToOwner[address(newToken)] = from;\\r\\n\\t\\temit NewContractDeployed(from, tokensFromOwner.length, address(newToken));\\r\\n\\t}\\r\\n}\",\"keccak256\":\"0xda2f46749ee2b9b4f168850d39ef4102054a15aca09a8a000328d7fe14d093ef\",\"license\":\"GPL-3.0\"},\"contracts/Tokens/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.9; \\r\\n\\r\\ninterface IERC2981 {\\r\\n    /// ERC165 bytes to add to interface array - set in parent contract\\r\\n    /// implementing this standard\\r\\n    ///\\r\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256,bytes)\\\")) == 0xc155531d\\r\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0xc155531d;\\r\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\r\\n\\r\\n    /// @notice Called with the sale price to determine how much royalty\\r\\n    //          is owed and to whom.\\r\\n    /// @param _tokenId - the NFT asset queried for royalty information\\r\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\r\\n    /// @return receiver - address of who should be sent the royalty payment\\r\\n    /// @return royaltyAmount - the royalty payment amount for _value sale price\\r\\n    function royaltyInfo(\\r\\n    \\tuint256 _tokenId,\\r\\n    \\tuint256 _salePrice)\\r\\n    external returns (\\r\\n    \\taddress receiver,\\r\\n    \\tuint256 royaltyAmount);\\r\\n\\r\\n    /// @notice Informs callers that this contract supports ERC2981\\r\\n    /// @dev If `_registerInterface(_INTERFACE_ID_ERC2981)` is called\\r\\n    ///      in the initializer, this should be automatic\\r\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\r\\n    /// @return `true` if the contract implements\\r\\n    ///         `_INTERFACE_ID_ERC2981` and `false` otherwise\\r\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\r\\n}\",\"keccak256\":\"0x74794628505993d66b293defaeefe7c7712dc3d9735026785d05ae2040818a76\",\"license\":\"GPL-3.0\"},\"contracts/Tokens/IRAIR-ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.9; \\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\r\\n\\r\\ninterface IRAIR_ERC721 is IERC721 {\\r\\n\\r\\n\\tevent ProductCreated(uint indexed id, string name, uint startingToken, uint length);\\r\\n\\tevent ProductCompleted(uint indexed id, string name);\\r\\n\\t\\r\\n\\tevent RangeLocked(uint productIndex, uint startingToken, uint endingToken, uint tokensLocked, string productName, uint lockIndex);\\r\\n\\tevent RangeUnlocked(uint productID, uint startingToken, uint endingToken);\\r\\n\\r\\n\\tevent BaseURIChanged(string newURI);\\r\\n\\tevent TokenURIChanged(uint tokenId, string newURI);\\r\\n\\tevent ProductURIChanged(uint productId, string newURI);\\r\\n\\tevent ContractURIChanged(string newURI);\\r\\n\\r\\n\\t// For OpenSea's Freezing\\r\\n\\tevent PermanentURI(string _value, uint256 indexed _id);\\r\\n\\t\\r\\n\\t// Get the total number of products in the contract\\r\\n\\tfunction getProductCount() external view returns(uint);\\r\\n\\r\\n\\t// Get a specific product in the contract\\r\\n\\tfunction getProduct(uint index) external view returns(uint startingToken, uint endingToken, uint mintableTokensLeft, string memory productName, uint[] memory locks);\\r\\n\\t\\r\\n\\t// Mint a token inside a product\\r\\n\\tfunction mint(address to, uint productID, uint index) external;\\r\\n\\r\\n\\t// Ask for the royalty info of the creator\\r\\n\\tfunction royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\r\\n\\t\\texternal view returns (address receiver, uint256 royaltyAmount);\\r\\n}\",\"keccak256\":\"0x83d5d8e10783fbec4c2a852bc2414d8d3769e7c80b00423e229c84162c046f5a\",\"license\":\"GPL-3.0\"},\"contracts/Tokens/RAIR-ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\r\\nimport '@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"./IERC2981.sol\\\";\\r\\nimport \\\"./IRAIR-ERC721.sol\\\";\\r\\n\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\n/// @title  Extended ERC721Enumerable contract for the RAIR system\\r\\n/// @notice Uses ERC2981 and ERC165 for standard royalty info\\r\\n/// @notice Uses AccessControl for the minting mechanisms\\r\\n/// @author Juan M. Sanchez M.\\r\\n/// @dev    Ideally generated by a RAIR Token Factory\\r\\ncontract RAIR_ERC721 is IERC2981, ERC165, IRAIR_ERC721, ERC721Enumerable, AccessControlEnumerable {\\r\\n\\tusing Strings for uint;\\r\\n\\r\\n\\tstruct lockedRange {\\r\\n\\t\\tuint startingToken;\\r\\n\\t\\tuint endingToken;\\r\\n\\t\\tuint lockCountdown;\\r\\n\\t\\tuint productIndex;\\r\\n\\t}\\r\\n\\r\\n\\tstruct product {\\r\\n\\t\\tuint startingToken;\\r\\n\\t\\tuint endingToken;\\r\\n\\t\\tuint mintableTokens;\\r\\n\\t\\tstring name;\\r\\n\\t\\tuint[] locks;\\r\\n\\t}\\r\\n\\r\\n\\tmapping(uint => uint[]) public tokensByProduct;\\r\\n\\tmapping(uint => uint) public tokenToProduct;\\r\\n\\tmapping(uint => uint) private tokenToLock;\\r\\n\\t\\r\\n\\t//URIs\\r\\n\\tstring internal baseURI;\\r\\n\\tmapping(uint => string) internal uniqueTokenURI;\\r\\n\\tmapping(uint => string) internal productURI;\\r\\n\\tstring internal contractMetadataURI;\\r\\n\\r\\n\\tlockedRange[] private _lockedRange;\\r\\n\\tproduct[] private _products;\\r\\n\\r\\n\\t//Roles\\r\\n\\tbytes32 public constant CREATOR = keccak256(\\\"CREATOR\\\");\\r\\n\\tbytes32 public constant MINTER = keccak256(\\\"MINTER\\\");\\r\\n\\tbytes32 public constant TRADER = keccak256(\\\"TRADER\\\");\\r\\n\\r\\n\\taddress private _factory;\\r\\n\\tuint16 private _royaltyFee;\\r\\n\\r\\n\\t/// @notice\\tToken's constructor\\r\\n\\t/// @dev\\tRAIR is still the ERC721's symbol\\r\\n\\t/// @param\\t_creatorAddress\\tAddress of the media's creator\\r\\n\\t/// @param\\t_creatorRoyalty\\tFee given to the creator on every sale\\r\\n\\tconstructor(\\r\\n\\t\\tstring memory _contractName,\\r\\n\\t\\taddress _creatorAddress,\\r\\n\\t\\tuint16 _creatorRoyalty\\r\\n\\t) ERC721(_contractName, \\\"RAIR\\\") {\\r\\n\\t\\t_factory = msg.sender;\\r\\n\\t\\t_royaltyFee = _creatorRoyalty;\\r\\n\\t\\t_setRoleAdmin(MINTER, CREATOR);\\r\\n\\t\\t_setRoleAdmin(TRADER, CREATOR);\\r\\n\\t\\t_setupRole(CREATOR, _creatorAddress);\\r\\n\\t\\t_setupRole(MINTER, _creatorAddress);\\r\\n\\t\\t_setupRole(TRADER, _creatorAddress);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice\\tMakes sure the product exists before doing changes to it\\r\\n\\t/// @param\\tproductID\\tProduct to verify\\r\\n\\tmodifier productExists(uint productID) {\\r\\n\\t\\trequire(_products.length > productID, \\\"RAIR ERC721: Product does not exist\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction freezeMetadata(uint tokenId) public onlyRole(CREATOR) {\\r\\n\\t\\temit PermanentURI(tokenURI(tokenId), tokenId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setContractURI(string calldata newURI) external onlyRole(CREATOR) {\\r\\n\\t\\tcontractMetadataURI = newURI;\\r\\n\\t\\temit ContractURIChanged(newURI);\\r\\n\\t}\\r\\n\\r\\n\\tfunction contractURI() public view returns (string memory) {\\r\\n\\t\\treturn contractMetadataURI;\\r\\n    }\\r\\n\\t\\r\\n\\t/// @notice\\tSets the Base URI for ALL tokens\\r\\n\\t/// @dev\\tCan be overriden by the specific token URI\\r\\n\\t/// @param\\tnewURI\\tURI to be used\\r\\n\\tfunction setBaseURI(string calldata newURI) external onlyRole(CREATOR) {\\r\\n\\t\\tbaseURI = newURI;\\r\\n\\t\\temit BaseURIChanged(newURI);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice\\tOverridden function from the ERC721 contract that returns our\\r\\n\\t///\\t\\t\\tvariable base URI instead of the hardcoded URI\\r\\n\\tfunction _baseURI() internal view override(ERC721) returns (string memory) {\\r\\n\\t\\treturn baseURI;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice\\tUpdates the unique URI of a token, but in a single transaction\\r\\n\\t/// @dev\\tUses the single function so it also emits an event\\r\\n\\t/// @param\\ttokenIds\\tToken Indexes that will be given an URI\\r\\n\\t/// @param\\tnewURIs\\t\\tNew URIs to be set\\r\\n\\tfunction setUniqueURIBatch(uint[] calldata tokenIds, string[] calldata newURIs) external onlyRole(CREATOR) {\\r\\n\\t\\trequire(tokenIds.length == newURIs.length, \\\"RAIR ERC721: Token IDs and URIs should have the same length\\\");\\r\\n\\t\\tfor (uint i = 0; i < tokenIds.length; i++) {\\r\\n\\t\\t\\tsetUniqueURI(tokenIds[i], newURIs[i]);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\t/// @notice\\tGives an individual token an unique URI\\r\\n\\t/// @dev\\tEmits an event so there's provenance\\r\\n\\t/// @param\\ttokenId\\tToken Index that will be given an URI\\r\\n\\t/// @param\\tnewURI\\tNew URI to be given\\r\\n\\tfunction setUniqueURI(uint tokenId, string calldata newURI) public onlyRole(CREATOR) {\\r\\n\\t\\tuniqueTokenURI[tokenId] = newURI;\\r\\n\\t\\temit TokenURIChanged(tokenId, newURI);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice\\tGives an individual token an unique URI\\r\\n\\t/// @dev\\tEmits an event so there's provenance\\r\\n\\t/// @param\\tproductId\\tToken Index that will be given an URI\\r\\n\\t/// @param\\tnewURI\\t\\tNew URI to be given\\r\\n\\tfunction setProductURI(uint productId, string calldata newURI) public onlyRole(CREATOR) {\\r\\n\\t\\tproductURI[productId] = newURI;\\r\\n\\t\\temit ProductURIChanged(productId, newURI);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice\\tReturns a token's URI, could be specific or general\\r\\n\\t/// @dev\\tIF the specific token URI doesn't exist, the general base URI will be returned\\r\\n\\t/// @param\\ttokenId\\t\\tToken Index to look for\\r\\n\\tfunction tokenURI(uint tokenId) public view override(ERC721) returns (string memory) {\\r\\n\\t\\tstring memory URI = uniqueTokenURI[tokenId];\\r\\n\\t\\tif (bytes(URI).length > 0) {\\r\\n\\t\\t\\treturn URI;\\r\\n\\t\\t}\\r\\n\\t\\tURI = productURI[tokenToProduct[tokenId]];\\r\\n\\t\\tif (bytes(URI).length > 0) {\\r\\n\\t\\t\\treturn string(abi.encodePacked(URI, tokenToProductIndex(tokenId).toString()));\\r\\n\\t\\t}\\r\\n\\t\\treturn super.tokenURI(tokenId);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice\\tReturns the number of tokens inside a product\\r\\n\\t/// @param\\tproductIndex \\tProduct index\\r\\n\\tfunction tokenCountByProduct(uint productIndex) public view returns (uint) {\\r\\n\\t\\treturn tokensByProduct[productIndex].length;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice\\tMakes sure a lock can be created\\r\\n\\t/// @dev\\tUsed on the createRangeLock call!\\r\\n\\t/// @param\\tproductIndex \\tProduct index\\r\\n\\t/// @param\\tstartingToken \\tFirst token to lock\\r\\n\\t/// @param\\tendingToken \\tLast token to lock\\r\\n\\tfunction canCreateLock(uint productIndex, uint startingToken, uint endingToken) public view returns (bool canCreate) {\\r\\n\\t\\tproduct storage selectedProduct =  _products[productIndex];\\r\\n\\t\\tif (startingToken > selectedProduct.endingToken - selectedProduct.startingToken ||\\r\\n\\t\\t\\t\\tendingToken > selectedProduct.endingToken - selectedProduct.startingToken) {\\r\\n\\t\\t\\treturn false;\\r\\n\\t\\t}\\r\\n\\t\\tfor (uint i = 0; i < selectedProduct.locks.length; i++) {\\r\\n\\t\\t\\tif ((_lockedRange[selectedProduct.locks[i]].startingToken <= selectedProduct.startingToken + startingToken &&\\r\\n\\t\\t\\t\\t\\t_lockedRange[selectedProduct.locks[i]].endingToken >= selectedProduct.startingToken + startingToken) ||\\r\\n\\t\\t\\t\\t\\t\\t(_lockedRange[selectedProduct.locks[i]].startingToken <= selectedProduct.startingToken + endingToken &&\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t_lockedRange[selectedProduct.locks[i]].endingToken >= selectedProduct.startingToken + endingToken)) {\\r\\n\\t\\t\\t\\treturn false;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn true;\\r\\n\\t} \\r\\n\\r\\n\\t/// @notice\\tLocks transfers for tokens within a specific range\\r\\n\\t/// @dev\\tThe minter pays for the locking as well\\r\\n\\t/// @param\\tproductIndex Index of the product on the contract\\r\\n\\t/// @param\\t_startingToken Initial token locked\\r\\n\\t/// @param\\t_endingToken Last token locked\\r\\n\\t/// @param\\t_lockedTokens Number of tokens that have to be minted in order to unlock the full range\\r\\n\\tfunction createRangeLock(uint productIndex, uint _startingToken, uint _endingToken, uint _lockedTokens) public onlyRole(CREATOR) productExists(productIndex) {\\r\\n\\t\\tproduct storage selectedProduct =  _products[productIndex];\\r\\n\\r\\n\\t\\trequire(selectedProduct.startingToken + _endingToken <= selectedProduct.endingToken, 'RAIR ERC721: Invalid ending token');\\r\\n\\t\\trequire(_endingToken - _startingToken <= selectedProduct.endingToken - selectedProduct.startingToken, 'RAIR ERC721: Invalid token limits');\\r\\n\\t\\trequire((_endingToken - _startingToken + 1) >= _lockedTokens, 'RAIR ERC721: Invalid number of tokens to lock');\\r\\n\\r\\n\\t\\trequire(canCreateLock(productIndex, _startingToken, _endingToken), \\\"RAIR ERC721: Cannot create lock\\\");\\r\\n\\r\\n\\t\\tlockedRange storage newRange = _lockedRange.push();\\r\\n\\t\\tnewRange.startingToken = selectedProduct.startingToken + _startingToken;\\r\\n\\t\\tnewRange.endingToken = selectedProduct.startingToken + _endingToken;\\r\\n\\t\\tnewRange.lockCountdown = _lockedTokens;\\r\\n\\t\\tnewRange.productIndex = productIndex;\\r\\n\\t\\tselectedProduct.locks.push(_lockedRange.length - 1);\\r\\n\\t\\temit RangeLocked(productIndex, selectedProduct.startingToken + _startingToken, selectedProduct.startingToken + _endingToken, _lockedTokens, selectedProduct.name, _lockedRange.length - 1);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice\\tCreates a product\\r\\n\\t/// @dev\\tOnly a CREATOR can call this function\\r\\n\\t/// @param\\t_productName Name of the product\\r\\n\\t/// @param\\t_copies\\t\\t\\tAmount of tokens inside the product\\r\\n\\tfunction createProduct(string memory _productName, uint _copies) public onlyRole(CREATOR) {\\r\\n\\t\\tuint lastToken;\\r\\n\\t\\tlastToken = _products.length == 0 ? 0 : _products[_products.length - 1].endingToken + 1;\\r\\n\\t\\t\\r\\n\\t\\tproduct storage newProduct = _products.push();\\r\\n\\r\\n\\t\\tnewProduct.startingToken = lastToken;\\r\\n\\t\\tnewProduct.endingToken = newProduct.startingToken + _copies - 1;\\r\\n\\t\\tnewProduct.name = string(_productName);\\r\\n\\t\\tnewProduct.mintableTokens = _copies;\\r\\n\\t\\t\\r\\n\\t\\temit ProductCreated(_products.length - 1, _productName, lastToken, _copies);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice\\tReturns the number of products on the contract\\r\\n\\t/// @dev\\tUse with get product to list all of the products\\r\\n\\tfunction getProductCount() external view override(IRAIR_ERC721) returns(uint) {\\r\\n\\t\\treturn _products.length;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice\\tReturns information about a product\\r\\n\\t/// @param\\tindex\\tIndex of the product\\r\\n\\tfunction getProduct(uint index) external override(IRAIR_ERC721) view returns(uint startingToken, uint endingToken, uint mintableTokensLeft, string memory productName, uint[] memory locks) {\\r\\n\\t\\tproduct memory selectedProduct =  _products[index];\\r\\n\\t\\treturn (\\r\\n\\t\\t\\tselectedProduct.startingToken,\\r\\n\\t\\t\\tselectedProduct.endingToken,\\r\\n\\t\\t\\tselectedProduct.mintableTokens,\\r\\n\\t\\t\\tselectedProduct.name,\\r\\n\\t\\t\\tselectedProduct.locks\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice\\tLoops over the user's tokens looking for one that belongs to a product and a specific range\\r\\n\\t/// @dev\\tLoops are expensive in solidity, so don't use this in a function that requires gas\\r\\n\\t/// @param\\tuserAddress\\t\\t\\tUser to search\\r\\n\\t/// @param\\tproductIndex\\t\\tProduct to search\\r\\n\\t/// @param\\tstartingToken\\t\\tProduct to search\\r\\n\\t/// @param\\tendingToken\\t\\t\\tProduct to search\\r\\n\\tfunction hasTokenInProduct(\\r\\n\\t\\t\\t\\taddress userAddress,\\r\\n\\t\\t\\t\\tuint productIndex,\\r\\n\\t\\t\\t\\tuint startingToken,\\r\\n\\t\\t\\t\\tuint endingToken) public view returns (bool) {\\r\\n\\t\\tproduct memory aux = _products[productIndex];\\r\\n\\t\\tif (aux.endingToken != 0) {\\r\\n\\t\\t\\tfor (uint i = 0; i < balanceOf(userAddress); i++) {\\r\\n\\t\\t\\t\\tuint token = tokenOfOwnerByIndex(userAddress, i);\\r\\n\\t\\t\\t\\tif (tokenToProduct[token] == productIndex &&\\r\\n\\t\\t\\t\\t\\t\\ttoken >= aux.startingToken + startingToken &&\\r\\n\\t\\t\\t\\t\\t\\ttoken <= aux.startingToken + endingToken) {\\r\\n\\t\\t\\t\\t\\treturn true;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn false;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice\\tReturns the token index inside the product\\r\\n\\t/// @param\\ttoken\\tToken ID to find\\r\\n\\tfunction tokenToProductIndex(uint token) public view returns (uint tokenIndex) {\\r\\n\\t\\treturn token - _products[tokenToProduct[token]].startingToken;\\r\\n\\t} \\r\\n\\r\\n\\t/// @notice\\tLoops through a range of tokens inside a product and returns the first token without an owner\\r\\n\\t/// @dev\\tUses a loop, do not call this from a non-view function!\\r\\n\\t/// @param\\tproductID\\tIndex of the product to search\\r\\n\\t/// @param\\tstartingIndex\\tIndex of the product to search\\r\\n\\t/// @param\\tendingIndex\\t\\tIndex of the product to search\\r\\n\\tfunction getNextSequentialIndex(uint productID, uint startingIndex, uint endingIndex) public view productExists(productID) returns(uint nextIndex) {\\r\\n\\t\\tproduct memory currentProduct = _products[productID];\\r\\n\\t\\tfor (uint i = currentProduct.startingToken + startingIndex; i <= currentProduct.startingToken + endingIndex; i++) {\\r\\n\\t\\t\\tif (!_exists(i)) {\\r\\n\\t\\t\\t\\treturn i - currentProduct.startingToken;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\trequire(false, \\\"RAIR ERC721: There are no available tokens in this range.\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice\\tView function to get information about a lock\\r\\n\\t/// @dev \\tThis uses universal numbering so you'll need to get information\\r\\n\\t///\\t\\t\\tabout a product first to know what are the locks associated\\r\\n\\t/// @param\\tindex\\tIndex in the lock array to be returned\\r\\n\\tfunction getLockedRange(uint index) public view returns (uint startingToken, uint endingToken, uint countToUnlock, uint productIndex) {\\r\\n\\t\\tlockedRange memory currentLock = _lockedRange[index];\\r\\n\\t\\tproduct memory currentProduct = _products[currentLock.productIndex];\\r\\n\\t\\treturn (\\r\\n\\t\\t\\tcurrentLock.startingToken - currentProduct.startingToken,\\r\\n\\t\\t\\tcurrentLock.endingToken - currentProduct.startingToken,\\r\\n\\t\\t\\tcurrentLock.lockCountdown,\\r\\n\\t\\t\\tcurrentLock.productIndex\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice\\tView function to verify if a token can be traded\\r\\n\\t/// @param\\t_tokenId\\tIndex of the token to search\\r\\n\\tfunction isTokenLocked(uint256 _tokenId) public view returns (bool) {\\r\\n\\t\\treturn _lockedRange[tokenToLock[_tokenId]].productIndex == tokenToProduct[_tokenId] && _lockedRange[tokenToLock[_tokenId]].lockCountdown > 0;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice\\tMints a specific token within a product\\r\\n\\t/// @dev\\tHas to be used alongside getNextSequentialIndex to simulate a sequential minting\\r\\n\\t/// @dev\\tAnyone that wants a specific token just has to call this\\r\\n\\t/// @param\\tto\\t\\t\\t\\t\\tAddress of the new token's owner\\r\\n\\t/// @param\\tproductId\\t\\t\\tProduct to mint from\\r\\n\\t/// @param\\tindexInProduct\\tInternal index of the token\\r\\n\\tfunction mint(address to, uint productId, uint indexInProduct) external override(IRAIR_ERC721) onlyRole(MINTER) productExists(productId) {\\r\\n\\t\\tproduct storage currentProduct = _products[productId];\\r\\n\\t\\t\\r\\n\\t\\trequire(indexInProduct <= currentProduct.endingToken - currentProduct.startingToken, \\\"RAIR ERC721: Invalid token index\\\");\\r\\n\\r\\n\\t\\t_safeMint(to, currentProduct.startingToken + indexInProduct);\\r\\n\\r\\n\\t\\ttokensByProduct[productId].push(currentProduct.startingToken + indexInProduct);\\r\\n\\r\\n\\t\\ttokenToProduct[currentProduct.startingToken + indexInProduct] = productId;\\r\\n\\t\\tcurrentProduct.mintableTokens--;\\r\\n\\r\\n\\t\\tlockedRange storage lock;\\r\\n\\t\\tfor (uint i = 0; i < currentProduct.locks.length; i++) {\\r\\n\\t\\t\\tif (_lockedRange[currentProduct.locks[i]].startingToken <= currentProduct.startingToken + indexInProduct &&\\r\\n\\t\\t\\t\\t\\t_lockedRange[currentProduct.locks[i]].endingToken >= currentProduct.startingToken + indexInProduct) {\\r\\n\\t\\t\\t\\tlock = _lockedRange[currentProduct.locks[i]];\\r\\n\\t\\t\\t\\ttokenToLock[currentProduct.startingToken + indexInProduct] = currentProduct.locks[i];\\r\\n\\t\\t\\t\\tif (lock.lockCountdown > 0) {\\r\\n\\t\\t\\t\\t\\tlock.lockCountdown--;\\r\\n\\t\\t\\t\\t\\tif (lock.lockCountdown == 0) {\\r\\n\\t\\t\\t\\t\\t\\temit RangeUnlocked(productId, lock.startingToken, lock.endingToken);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (currentProduct.mintableTokens == 0) {\\r\\n\\t\\t\\temit ProductCompleted(productId, currentProduct.name);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Returns the fee for the NFT sale\\r\\n\\t/// @param _tokenId - the NFT asset queried for royalty information\\r\\n\\t/// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\r\\n\\t/// @return receiver - address of who should be sent the royalty payment\\r\\n\\t/// @return royaltyAmount - the royalty payment amount for _salePrice sale price\\r\\n\\tfunction royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\r\\n\\t\\texternal view override(IRAIR_ERC721, IERC2981) returns (address receiver, uint256 royaltyAmount) {\\r\\n\\t\\treturn (getRoleMember(CREATOR, 0), (_salePrice * _royaltyFee) / 100000);\\r\\n\\t}\\r\\n\\r\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165, AccessControlEnumerable, ERC721Enumerable, IERC2981) returns (bool) {\\r\\n\\t\\treturn interfaceId == type(IERC2981).interfaceId\\r\\n\\t\\t\\t|| super.supportsInterface(interfaceId);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Queries if an operator can act on behalf of an owner on all of their tokens\\r\\n\\t/// @dev Overrides the OpenZeppelin standard by allowing anyone with the TRADER role to transfer tokens\\r\\n\\t/// @param owner \\t\\tOwner of the tokens.\\r\\n\\t/// @param operator \\tOperator of the tokens.\\r\\n\\tfunction isApprovedForAll(address owner, address operator) public view virtual override(ERC721, IERC721) returns (bool) {\\r\\n        return (hasRole(TRADER, operator) || super.isApprovedForAll(owner, operator));\\r\\n    }\\r\\n\\r\\n\\t/// @notice Hook being called before every transfer\\r\\n\\t/// @dev\\tTransfer locking happens here!\\r\\n\\t/// @param\\t_from\\t\\tToken's original owner\\r\\n\\t/// @param\\t_to\\t\\t\\tToken's new owner\\r\\n\\t/// @param\\t_tokenId\\tToken's ID\\r\\n\\tfunction _beforeTokenTransfer(address _from, address _to, uint256 _tokenId) internal virtual override(ERC721Enumerable) {\\r\\n\\t\\tif (_from != address(0) && _to != address(0)) {\\r\\n\\t\\t\\tif (_lockedRange[tokenToLock[_tokenId]].productIndex == tokenToProduct[_tokenId]) {\\r\\n\\t\\t\\t\\trequire(_lockedRange[tokenToLock[_tokenId]].lockCountdown == 0, \\\"RAIR ERC721: Transfers for this range are currently locked\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t_checkRole(TRADER, msg.sender);\\r\\n\\t\\t} \\r\\n\\t\\t//require(hasRole(TRADER, _from), 'RAIR ERC721: Transfers cannot be made outside RAIR marketplaces!');\\r\\n\\t\\tsuper._beforeTokenTransfer(_from, _to, _tokenId);\\r\\n\\t}\\r\\n}\",\"keccak256\":\"0x15e57829f1ec9f3af3078cc985eac9f4d5bb544642052d3e7544b3f377e1728f\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200614538038062006145833981016040819052620000349162000361565b6040516329965a1d60e01b815230600482018190527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b158015620000ae57600080fd5b505af1158015620000c3573d6000803e3d6000fd5b50505050620000e86000805160206200610583398151915280620001b160201b60201c565b620001126000805160206200612583398151915260008051602062006105833981519152620001b1565b6200011f600033620001fc565b6200013a6000805160206200610583398151915233620001fc565b620001556000805160206200612583398151915282620001fc565b6001600160a01b038116600081815260046020908152604091829020859055815192835282018490527f3229ffedb9ac4c1136e523cacfdab8c7621a1f1394161e5fa51850fbf4b4079b910160405180910390a15050620003a0565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6200021382826200023f60201b62000a401760201c565b60008281526001602090815260409091206200023a91839062000a506200024f821b17901c565b505050565b6200024b82826200026f565b5050565b600062000266836001600160a01b0384166200030f565b90505b92915050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200024b576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002cb3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000818152600183016020526040812054620003585750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000269565b50600062000269565b600080604083850312156200037557600080fd5b825160208401519092506001600160a01b03811681146200039557600080fd5b809150509250929050565b615d5580620003b06000396000f3fe60806040523480156200001157600080fd5b5060043610620001505760003560e01c8063871797f711620000c7578063aa55ecbc1162000086578063aa55ecbc146200030f578063ca15c8731462000318578063cd53d08e146200032f578063d547741f1462000346578063dbdda1a1146200035d578063f42512ce146200037457600080fd5b8063871797f714620002895780639010d07c14620002ac57806391d1485414620002c3578063956f903814620002da578063a217fddf146200030657600080fd5b8063248a9ca31162000114578063248a9ca314620001ee5780632f2ff15d146200021457806336568abe146200022b578063543a16b114620002425780636a1972bd146200025957600080fd5b806223de29146200015557806301ffc9a7146200016e57806306b091f9146200019a578063117803e314620001b15780631c6ee6a214620001d7575b600080fd5b6200016c62000166366004620010b3565b620003a0565b005b620001856200017f3660046200116b565b6200064c565b60405190151581526020015b60405180910390f35b6200016c620001ab36600462001197565b6200067a565b620001c860008051602062005ce083398151915281565b60405190815260200162000191565b6200016c620001e836600462001197565b62000809565b620001c8620001ff366004620011c4565b60009081526020819052604090206001015490565b6200016c62000225366004620011de565b62000892565b6200016c6200023c366004620011de565b620008bd565b620001c860008051602062005d0083398151915281565b620002706200026a36600462001197565b620008e3565b6040516001600160a01b03909116815260200162000191565b620001c86200029a3660046200120d565b60046020526000908152604090205481565b62000270620002bd3660046200122b565b6200091c565b62000185620002d4366004620011de565b6200093d565b620001c8620002eb3660046200120d565b6001600160a01b031660009081526002602052604090205490565b620001c8600081565b600554620001c8565b620001c862000329366004620011c4565b62000966565b6200027062000340366004620011c4565b6200097f565b6200016c62000357366004620011de565b620009aa565b6200016c6200036e3660046200120d565b620009b6565b62000270620003853660046200120d565b6003602052600090815260409020546001600160a01b031681565b60008051602062005d00833981519152620003bc813362000a67565b33600090815260046020526040902054861015620004475760405162461bcd60e51b815260206004820152603960248201527f5241495220466163746f72793a206e6f7420656e6f756768205241495220746f60448201527f6b656e7320746f206465706c6f79206120636f6e74726163740000000000000060648201526084015b60405180910390fd5b3360009081526004602052604081205462000463908862001264565b1115620004e65733600081815260046020526040902054639bd9bbc6908a906200048e908a62001264565b88886040518563ffffffff1660e01b8152600401620004b19493929190620012a7565b600060405180830381600087803b158015620004cc57600080fd5b505af1158015620004e1573d6000803e3d6000fd5b505050505b6001600160a01b038816600090815260026020526040902080546200055157600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b038b161790555b600086868b61753060405162000567906200103c565b620005769493929190620012db565b604051809103906000f08015801562000593573d6000803e3d6000fd5b5082546001810184556000848152602080822090920180546001600160a01b038086166001600160a01b0319928316811790935591835260039093526040918290208054918f169190931617909155835490519192507f8541d3f155d1d78bb99039323325761c94686b6f359d2ab4f5c645551f55fa119162000637918d9185906001600160a01b0393841681526020810192909252909116604082015260600190565b60405180910390a15050505050505050505050565b60006001600160e01b03198216635a05180f60e01b1480620006745750620006748262000ad6565b92915050565b60008051602062005ce083398151915262000696813362000a67565b620006b160008051602062005d00833981519152846200093d565b620007305760405162461bcd60e51b815260206004820152604260248201527f5241495220466163746f72793a2053706563696669656420636f6e747261637460448201527f2069736e277420616e20617070726f7665642065726337373720636f6e74726160648201526118dd60f21b608482015260a4016200043e565b604051634decdde360e11b81523360048201526024810183905260606044820152601060648201526f466163746f727920576974686472617760801b60848201526001600160a01b03841690639bd9bbc69060a401600060405180830381600087803b158015620007a057600080fd5b505af1158015620007b5573d6000803e3d6000fd5b5050604080513381526001600160a01b03871660208201529081018590527f6337ed398c0e8467698c581374fdce4db14922df487b5a39483079f5f59b60a4925060600190505b60405180910390a1505050565b60008051602062005ce083398151915262000825813362000a67565b6200084060008051602062005d008339815191528462000892565b6001600160a01b038316600081815260046020908152604091829020859055815192835282018490527f3229ffedb9ac4c1136e523cacfdab8c7621a1f1394161e5fa51850fbf4b4079b9101620007fc565b6200089e828262000b0d565b6000828152600160205260409020620008b8908262000a50565b505050565b620008c9828262000b37565b6000828152600160205260409020620008b8908262000bb5565b600260205281600052604060002081815481106200090057600080fd5b6000918252602090912001546001600160a01b03169150829050565b600082815260016020526040812062000936908362000bcc565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000818152600160205260408120620006749062000bda565b600581815481106200099057600080fd5b6000918252602090912001546001600160a01b0316905081565b620008c9828262000be5565b60008051602062005ce0833981519152620009d2813362000a67565b620009ed60008051602062005d0083398151915283620009aa565b6001600160a01b03821660008181526004602090815260408083209290925590519182527ffae0368e2524d44fb9cd4e3d7b3c3ef4c00778a55c6121e48e49d11fb38c7e38910160405180910390a15050565b62000a4c828262000c0f565b5050565b600062000936836001600160a01b03841662000c97565b62000a7382826200093d565b62000a4c5762000a8e816001600160a01b0316601462000ce9565b62000a9b83602062000ce9565b60405160200162000aae92919062001349565b60408051601f198184030181529082905262461bcd60e51b82526200043e91600401620013c2565b60006001600160e01b03198216637965db0b60e01b14806200067457506301ffc9a760e01b6001600160e01b031983161462000674565b60008281526020819052604090206001015462000b2b813362000a67565b620008b8838362000c0f565b6001600160a01b038116331462000ba95760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016200043e565b62000a4c828262000ea3565b600062000936836001600160a01b03841662000f0b565b60006200093683836200100f565b600062000674825490565b60008281526020819052604090206001015462000c03813362000a67565b620008b8838362000ea3565b62000c1b82826200093d565b62000a4c576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905562000c533390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600081815260018301602052604081205462000ce05750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000674565b50600062000674565b6060600062000cfa836002620013f7565b62000d0790600262001419565b67ffffffffffffffff81111562000d225762000d2262001434565b6040519080825280601f01601f19166020018201604052801562000d4d576020820181803683370190505b509050600360fc1b8160008151811062000d6b5762000d6b6200144a565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062000d9d5762000d9d6200144a565b60200101906001600160f81b031916908160001a905350600062000dc3846002620013f7565b62000dd090600162001419565b90505b600181111562000e52576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062000e085762000e086200144a565b1a60f81b82828151811062000e215762000e216200144a565b60200101906001600160f81b031916908160001a90535060049490941c9362000e4a8162001460565b905062000dd3565b508315620009365760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016200043e565b62000eaf82826200093d565b1562000a4c576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600081815260018301602052604081205480156200100457600062000f3260018362001264565b855490915060009062000f489060019062001264565b905081811462000fb457600086600001828154811062000f6c5762000f6c6200144a565b906000526020600020015490508087600001848154811062000f925762000f926200144a565b6000918252602080832090910192909255918252600188019052604090208390555b855486908062000fc85762000fc86200147a565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505062000674565b600091505062000674565b60008260000182815481106200102957620010296200144a565b9060005260206000200154905092915050565b61484f806200149183390190565b80356001600160a01b03811681146200106257600080fd5b919050565b60008083601f8401126200107a57600080fd5b50813567ffffffffffffffff8111156200109357600080fd5b602083019150836020828501011115620010ac57600080fd5b9250929050565b60008060008060008060008060c0898b031215620010d057600080fd5b620010db896200104a565b9750620010eb60208a016200104a565b9650620010fb60408a016200104a565b955060608901359450608089013567ffffffffffffffff808211156200112057600080fd5b6200112e8c838d0162001067565b909650945060a08b01359150808211156200114857600080fd5b50620011578b828c0162001067565b999c989b5096995094979396929594505050565b6000602082840312156200117e57600080fd5b81356001600160e01b0319811681146200093657600080fd5b60008060408385031215620011ab57600080fd5b620011b6836200104a565b946020939093013593505050565b600060208284031215620011d757600080fd5b5035919050565b60008060408385031215620011f257600080fd5b8235915062001204602084016200104a565b90509250929050565b6000602082840312156200122057600080fd5b62000936826200104a565b600080604083850312156200123f57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b6000828210156200127957620012796200124e565b500390565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b0385168152836020820152606060408201526000620012d16060830184866200127e565b9695505050505050565b606081526000620012f16060830186886200127e565b6001600160a01b039490941660208301525061ffff9190911660409091015292915050565b60005b838110156200133357818101518382015260200162001319565b8381111562001343576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516200138381601785016020880162001316565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351620013b681602884016020880162001316565b01602801949350505050565b6020815260008251806020840152620013e381604085016020870162001316565b601f01601f19169190910160400192915050565b60008160001904831182151516156200141457620014146200124e565b500290565b600082198211156200142f576200142f6200124e565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000816200147257620014726200124e565b506000190190565b634e487b7160e01b600052603160045260246000fdfe60806040523480156200001157600080fd5b506040516200484f3803806200484f8339810160408190526200003491620003f7565b82604051806040016040528060048152602001632920a4a960e11b81525081600090805190602001906200006a9291906200030b565b508051620000809060019060208401906200030b565b5050601580546001600160b01b0319163361ffff60a01b191617600160a01b61ffff85160217905550620000d36000805160206200480f833981519152600080516020620047ef83398151915262000157565b620000fd6000805160206200482f833981519152600080516020620047ef83398151915262000157565b62000118600080516020620047ef83398151915283620001a2565b620001336000805160206200480f83398151915283620001a2565b6200014e6000805160206200482f83398151915283620001a2565b50505062000537565b6000828152600a6020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b620001b98282620001e560201b620025081760201c565b6000828152600b60209081526040909120620001e091839062002516620001f5821b17901c565b505050565b620001f1828262000215565b5050565b60006200020c836001600160a01b038416620002b9565b90505b92915050565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff16620001f1576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620002753390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600081815260018301602052604081205462000302575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200020f565b5060006200020f565b8280546200031990620004fa565b90600052602060002090601f0160209004810192826200033d576000855562000388565b82601f106200035857805160ff191683800117855562000388565b8280016001018555821562000388579182015b82811115620003885782518255916020019190600101906200036b565b50620003969291506200039a565b5090565b5b808211156200039657600081556001016200039b565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620003df57600080fd5b919050565b805161ffff81168114620003df57600080fd5b6000806000606084860312156200040d57600080fd5b83516001600160401b03808211156200042557600080fd5b818601915086601f8301126200043a57600080fd5b8151818111156200044f576200044f620003b1565b604051601f8201601f19908116603f011681019083821181831017156200047a576200047a620003b1565b816040528281526020935089848487010111156200049757600080fd5b600091505b82821015620004bb57848201840151818301850152908301906200049c565b82821115620004cd5760008484830101525b9650620004df915050868201620003c7565b93505050620004f160408501620003e4565b90509250925092565b600181811c908216806200050f57607f821691505b602082108114156200053157634e487b7160e01b600052602260045260246000fd5b50919050565b6142a880620005476000396000f3fe608060405234801561001057600080fd5b50600436106102bb5760003560e01c80636352211e11610182578063bda5ec33116100e9578063d547741f116100a2578063e8a3d4851161007c578063e8a3d485146106ba578063e9300c6c146106c2578063e985e9c5146106d5578063fe6d8124146106e857600080fd5b8063d547741f14610672578063d76bf56614610685578063e4fbb609146106a557600080fd5b8063bda5ec3314610600578063c00b83c514610613578063c1d78b4a14610626578063c87b56dd14610639578063ca15c8731461064c578063d403bf861461065f57600080fd5b8063938e3d7b1161013b578063938e3d7b1461059357806395d89b41146105a6578063a217fddf146105ae578063a22cb465146105b6578063b88d4fde146105c9578063b9db15b4146105dc57600080fd5b80636352211e146105015780636c99dcbf1461051457806370a0823114610527578063876654a01461053a5780639010d07c1461056d57806391d148541461058057600080fd5b8063248a9ca3116102265780633d42f206116101df5780633d42f2061461049a57806342842e0e146104ad5780634a348da9146104c05780634dcf6ad6146104c85780634f6ccce7146104db57806355f804b3146104ee57600080fd5b8063248a9ca3146103f9578063276a28a31461041c5780632a55205a1461042f5780632f2ff15d146104615780632f745c591461047457806336568abe1461048757600080fd5b806315a182411161027857806315a182411461037e578063175c4ef81461039157806318160ddd146103b85780631c899d1a146103c057806323b872dd146103d357806324704bd7146103e657600080fd5b806301ffc9a7146102c05780630301e1e2146102e857806306fdde0314610316578063081812fc1461032b578063095ea7b314610356578063156e29f61461036b575b600080fd5b6102d36102ce36600461376f565b61070f565b60405190151581526020015b60405180910390f35b6103086102f636600461378c565b6000908152600c602052604090205490565b6040519081526020016102df565b61031e61073a565b6040516102df91906137fd565b61033e61033936600461378c565b6107cc565b6040516001600160a01b0390911681526020016102df565b61036961036436600461382c565b610866565b005b610369610379366004613856565b61097c565b61036961038c366004613889565b610cf9565b6103087f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce81565b600854610308565b6103696103ce3660046138fd565b611015565b6103696103e1366004613949565b611089565b6103086103f4366004613985565b6110ba565b61030861040736600461378c565b6000908152600a602052604090206001015490565b6102d361042a36600461378c565b6110eb565b61044261043d366004613985565b611171565b604080516001600160a01b0390931683526020830191909152016102df565b61036961046f3660046139a7565b6111c0565b61030861048236600461382c565b6111e2565b6103696104953660046139a7565b611278565b6102d36104a83660046139d3565b61129a565b6103696104bb366004613949565b6114a0565b601454610308565b6103696104d636600461378c565b6114bb565b6103086104e936600461378c565b611518565b6103696104fc3660046139ff565b6115ab565b61033e61050f36600461378c565b61160f565b6102d3610522366004613a41565b611686565b610308610535366004613a7a565b611862565b61054d61054836600461378c565b6118e9565b6040805194855260208501939093529183015260608201526080016102df565b61033e61057b366004613985565b611ac0565b6102d361058e3660046139a7565b611ad8565b6103696105a13660046139ff565b611b03565b61031e611b5a565b610308600081565b6103696105c4366004613a95565b611b69565b6103696105d7366004613b5d565b611c2e565b6105ef6105ea36600461378c565b611c66565b6040516102df959493929190613bd9565b61030861060e3660046139d3565b611dcf565b61030861062136600461378c565b612010565b610369610634366004613c87565b612051565b61031e61064736600461378c565b612144565b61030861065a36600461378c565b6122e5565b61036961066d3660046138fd565b6122fc565b6103696106803660046139a7565b612362565b61030861069336600461378c565b600d6020526000908152604090205481565b61030860008051602061425383398151915281565b61031e61236c565b6103696106d0366004613cf3565b61237b565b6102d36106e3366004613d4c565b6124a8565b6103087ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b60006001600160e01b03198216632baae9fd60e01b148061073457506107348261252b565b92915050565b60606000805461074990613d76565b80601f016020809104026020016040519081016040528092919081815260200182805461077590613d76565b80156107c25780601f10610797576101008083540402835291602001916107c2565b820191906000526020600020905b8154815290600101906020018083116107a557829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b031661084a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006108718261160f565b9050806001600160a01b0316836001600160a01b031614156108df5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610841565b336001600160a01b03821614806108fb57506108fb81336124a8565b61096d5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610841565b6109778383612550565b505050565b7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc96109a781336125be565b601454839081106109ca5760405162461bcd60e51b815260040161084190613db1565b6000601485815481106109df576109df613df4565b9060005260206000209060050201905080600001548160010154610a039190613e20565b841115610a525760405162461bcd60e51b815260206004820181905260248201527f52414952204552433732313a20496e76616c696420746f6b656e20696e6465786044820152606401610841565b610a6b86858360000154610a669190613e37565b612622565b6000858152600c602052604090208154610a86908690613e37565b8154600181018355600092835260208320015581548691600d91610aab908890613e37565b815260200190815260200160002081905550806002016000815480929190610ad290613e4f565b9091555060009050805b6004830154811015610caa578254610af5908790613e37565b6013846004018381548110610b0c57610b0c613df4565b906000526020600020015481548110610b2757610b27613df4565b90600052602060002090600402016000015411158015610b9657508254610b4f908790613e37565b6013846004018381548110610b6657610b66613df4565b906000526020600020015481548110610b8157610b81613df4565b90600052602060002090600402016001015410155b15610c98576013836004018281548110610bb257610bb2613df4565b906000526020600020015481548110610bcd57610bcd613df4565b90600052602060002090600402019150826004018181548110610bf257610bf2613df4565b9060005260206000200154600e6000888660000154610c119190613e37565b8152602081019190915260400160002055600282015415610c9357600282018054906000610c3e83613e4f565b90915550506002820154610c935781546001830154604080518a815260208101939093528201527fd3edbeb94dfb8eadcd8c291774b9ac3cc9b06af829273e295bf3197849934b889060600160405180910390a15b610caa565b80610ca281613e66565b915050610adc565b506002820154610cf057857f7118e1ae63262db55027a75ee525791f482e7fdf6c2ccb6c11528bf1652780e183600301604051610ce79190613f21565b60405180910390a25b50505050505050565b600080516020614253833981519152610d1281336125be565b60145485908110610d355760405162461bcd60e51b815260040161084190613db1565b600060148781548110610d4a57610d4a613df4565b906000526020600020906005020190508060010154858260000154610d6f9190613e37565b1115610dc75760405162461bcd60e51b815260206004820152602160248201527f52414952204552433732313a20496e76616c696420656e64696e6720746f6b656044820152603760f91b6064820152608401610841565b80546001820154610dd89190613e20565b610de28787613e20565b1115610e3a5760405162461bcd60e51b815260206004820152602160248201527f52414952204552433732313a20496e76616c696420746f6b656e206c696d69746044820152607360f81b6064820152608401610841565b83610e458787613e20565b610e50906001613e37565b1015610eb45760405162461bcd60e51b815260206004820152602d60248201527f52414952204552433732313a20496e76616c6964206e756d626572206f66207460448201526c6f6b656e7320746f206c6f636b60981b6064820152608401610841565b610ebf87878761129a565b610f0b5760405162461bcd60e51b815260206004820152601f60248201527f52414952204552433732313a2043616e6e6f7420637265617465206c6f636b006044820152606401610841565b60138054600181018255600091909152815460049091027f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0900190610f50908890613e37565b81558154610f5f908790613e37565b60018083019190915560028201869055600382018990556013546004840191610f8791613e20565b8154600181018355600092835260209092209091015581547f31677189d834d986e226e646cd121f117815e9bf4992c19728ca028f2ee542e6908990610fce908a90613e37565b8454610fdb908a90613e37565b60135489906003880190610ff190600190613e20565b60405161100396959493929190613f34565b60405180910390a15050505050505050565b60008051602061425383398151915261102e81336125be565b6000848152601060205260409020611047908484613649565b507f483621391b5e72d74eb03c7b5715531c486e326fb115ab3bcf34b133041854ce84848460405161107b93929190613f9b565b60405180910390a150505050565b611093338261263c565b6110af5760405162461bcd60e51b815260040161084190613fbe565b61097783838361270b565b600c60205281600052604060002081815481106110d657600080fd5b90600052602060002001600091509150505481565b6000818152600d6020908152604080832054600e90925282205460138054909190811061111a5761111a613df4565b90600052602060002090600402016003015414801561073457506000828152600e602052604081205460138054909190811061115857611158613df4565b9060005260206000209060040201600201541192915050565b60008061118d6000805160206142538339815191526000611ac0565b601554620186a0906111aa90600160a01b900461ffff168661400f565b6111b49190614044565b915091505b9250929050565b6111ca82826128b6565b6000828152600b602052604090206109779082612516565b60006111ed83611862565b821061124f5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610841565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61128282826128dc565b6000828152600b602052604090206109779082612956565b600080601485815481106112b0576112b0613df4565b90600052602060002090600502019050806000015481600101546112d49190613e20565b8411806112f05750805460018201546112ed9190613e20565b83115b156112ff576000915050611499565b60005b600482015481101561149257815461131b908690613e37565b601383600401838154811061133257611332613df4565b90600052602060002001548154811061134d5761134d613df4565b906000526020600020906004020160000154111580156113bc57508154611375908690613e37565b601383600401838154811061138c5761138c613df4565b9060005260206000200154815481106113a7576113a7613df4565b90600052602060002090600402016001015410155b80611470575081546113cf908590613e37565b60138360040183815481106113e6576113e6613df4565b90600052602060002001548154811061140157611401613df4565b9060005260206000209060040201600001541115801561147057508154611429908590613e37565b601383600401838154811061144057611440613df4565b90600052602060002001548154811061145b5761145b613df4565b90600052602060002090600402016001015410155b1561148057600092505050611499565b8061148a81613e66565b915050611302565b5060019150505b9392505050565b61097783838360405180602001604052806000815250611c2e565b6000805160206142538339815191526114d481336125be565b817fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b556572076114ff84612144565b60405161150c91906137fd565b60405180910390a25050565b600061152360085490565b82106115865760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610841565b6008828154811061159957611599613df4565b90600052602060002001549050919050565b6000805160206142538339815191526115c481336125be565b6115d0600f8484613649565b507f5411e8ebf1636d9e83d5fc4900bf80cbac82e8790da2a4c94db4895e889eedf68383604051611602929190614058565b60405180910390a1505050565b6000818152600260205260408120546001600160a01b0316806107345760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610841565b6000806014858154811061169c5761169c613df4565b90600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820180546116e390613d76565b80601f016020809104026020016040519081016040528092919081815260200182805461170f90613d76565b801561175c5780601f106117315761010080835404028352916020019161175c565b820191906000526020600020905b81548152906001019060200180831161173f57829003601f168201915b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156117b457602002820191906000526020600020905b8154815260200190600101908083116117a0575b505050505081525050905080602001516000146118545760005b6117d787611862565b8110156118525760006117ea88836111e2565b6000818152600d60205260409020549091508714801561181657508251611812908790613e37565b8110155b801561182e5750825161182a908690613e37565b8111155b1561183f576001935050505061185a565b508061184a81613e66565b9150506117ce565b505b60009150505b949350505050565b60006001600160a01b0382166118cd5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610841565b506001600160a01b031660009081526003602052604090205490565b60008060008060006013868154811061190457611904613df4565b906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090506000601482606001518154811061196057611960613df4565b90600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820180546119a790613d76565b80601f01602080910402602001604051908101604052809291908181526020018280546119d390613d76565b8015611a205780601f106119f557610100808354040283529160200191611a20565b820191906000526020600020905b815481529060010190602001808311611a0357829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611a7857602002820191906000526020600020905b815481526020019060010190808311611a64575b50505091909252505081518451929350611a9492909150613e20565b81516020840151611aa59190613e20565b83604001518460600151955095509550955050509193509193565b6000828152600b60205260408120611499908361296b565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020614253833981519152611b1c81336125be565b611b2860128484613649565b507fd5ee5eaf65263bab5d569890714d123ad48a9e54409d35e71d374f3dd300bba08383604051611602929190614058565b60606001805461074990613d76565b6001600160a01b038216331415611bc25760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610841565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b611c38338361263c565b611c545760405162461bcd60e51b815260040161084190613fbe565b611c6084848484612977565b50505050565b6000806000606080600060148781548110611c8357611c83613df4565b90600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382018054611cca90613d76565b80601f0160208091040260200160405190810160405280929190818152602001828054611cf690613d76565b8015611d435780601f10611d1857610100808354040283529160200191611d43565b820191906000526020600020905b815481529060010190602001808311611d2657829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611d9b57602002820191906000526020600020905b815481526020019060010190808311611d87575b5050509190925250508151602083015160408401516060850151608090950151929c919b5099509297509550909350505050565b6000838060148054905011611df65760405162461bcd60e51b815260040161084190613db1565b600060148681548110611e0b57611e0b613df4565b90600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382018054611e5290613d76565b80601f0160208091040260200160405190810160405280929190818152602001828054611e7e90613d76565b8015611ecb5780601f10611ea057610100808354040283529160200191611ecb565b820191906000526020600020905b815481529060010190602001808311611eae57829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611f2357602002820191906000526020600020905b815481526020019060010190808311611f0f575b50505050508152505090506000858260000151611f409190613e37565b90505b8151611f50908690613e37565b8111611f99576000818152600260205260409020546001600160a01b0316611f87578151611f7e9082613e20565b93505050612008565b80611f9181613e66565b915050611f43565b5060405162461bcd60e51b815260206004820152603960248201527f52414952204552433732313a20546865726520617265206e6f20617661696c6160448201527f626c6520746f6b656e7320696e20746869732072616e67652e000000000000006064820152608401610841565b509392505050565b6000818152600d602052604081205460148054909190811061203457612034613df4565b906000526020600020906005020160000154826107349190613e20565b60008051602061425383398151915261206a81336125be565b8382146120df5760405162461bcd60e51b815260206004820152603b60248201527f52414952204552433732313a20546f6b656e2049447320616e6420555249732060448201527f73686f756c642068617665207468652073616d65206c656e67746800000000006064820152608401610841565b60005b8481101561213c5761212a8686838181106120ff576120ff613df4565b9050602002013585858481811061211857612118613df4565b90506020028101906103ce919061406c565b8061213481613e66565b9150506120e2565b505050505050565b60008181526010602052604081208054606092919061216290613d76565b80601f016020809104026020016040519081016040528092919081815260200182805461218e90613d76565b80156121db5780601f106121b0576101008083540402835291602001916121db565b820191906000526020600020905b8154815290600101906020018083116121be57829003601f168201915b505050505090506000815111156121f25792915050565b6000838152600d6020908152604080832054835260119091529020805461221890613d76565b80601f016020809104026020016040519081016040528092919081815260200182805461224490613d76565b80156122915780601f1061226657610100808354040283529160200191612291565b820191906000526020600020905b81548152906001019060200180831161227457829003601f168201915b505050505090506000815111156122dc57806122b46122af85612010565b6129aa565b6040516020016122c59291906140b3565b604051602081830303815290604052915050919050565b61149983612aa8565b6000818152600b6020526040812061073490612b5b565b60008051602061425383398151915261231581336125be565b600084815260116020526040902061232e908484613649565b507f658b273d88cb66d5790b2e0cb1510b48ab78d39cba1c9cad2df51068c42c607c84848460405161107b93929190613f9b565b6112828282612b65565b60606012805461074990613d76565b60008051602061425383398151915261239481336125be565b601454600090156123e257601480546123af90600190613e20565b815481106123bf576123bf613df4565b90600052602060002090600502016001015460016123dd9190613e37565b6123e5565b60005b60148054600181810183556000929092526005027fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec0182815591925061242b8584613e37565b6124359190613e20565b6001820155845161244f90600383019060208801906136cd565b506002810184905560145461246690600190613e20565b7f8d3d82130aebba03bb48b5d158bc2bbb4647856765b1089e7250507307965af9868487604051612499939291906140e2565b60405180910390a25050505050565b60006124d47f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce83611ad8565b8061149957506001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff16611499565b6125128282612b8b565b5050565b6000611499836001600160a01b038416612c11565b60006001600160e01b03198216635a05180f60e01b1480610734575061073482612c60565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906125858261160f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6125c88282611ad8565b612512576125e0816001600160a01b03166014612c85565b6125eb836020612c85565b6040516020016125fc929190614107565b60408051601f198184030181529082905262461bcd60e51b8252610841916004016137fd565b612512828260405180602001604052806000815250612e21565b6000818152600260205260408120546001600160a01b03166126b55760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610841565b60006126c08361160f565b9050806001600160a01b0316846001600160a01b031614806126fb5750836001600160a01b03166126f0846107cc565b6001600160a01b0316145b8061185a575061185a81856124a8565b826001600160a01b031661271e8261160f565b6001600160a01b0316146127865760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610841565b6001600160a01b0382166127e85760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610841565b6127f3838383612e54565b6127fe600082612550565b6001600160a01b0383166000908152600360205260408120805460019290612827908490613e20565b90915550506001600160a01b0382166000908152600360205260408120805460019290612855908490613e37565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000828152600a60205260409020600101546128d281336125be565b6109778383612b8b565b6001600160a01b038116331461294c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610841565b6125128282612fa1565b6000611499836001600160a01b038416613008565b600061149983836130fb565b61298284848461270b565b61298e84848484613125565b611c605760405162461bcd60e51b81526004016108419061417c565b6060816129ce5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156129f857806129e281613e66565b91506129f19050600a83614044565b91506129d2565b60008167ffffffffffffffff811115612a1357612a13613ad1565b6040519080825280601f01601f191660200182016040528015612a3d576020820181803683370190505b5090505b841561185a57612a52600183613e20565b9150612a5f600a866141ce565b612a6a906030613e37565b60f81b818381518110612a7f57612a7f613df4565b60200101906001600160f81b031916908160001a905350612aa1600a86614044565b9450612a41565b6000818152600260205260409020546060906001600160a01b0316612b275760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610841565b6000612b3161322f565b90506000815111612b515760405180602001604052806000815250611499565b806122b4846129aa565b6000610734825490565b6000828152600a6020526040902060010154612b8181336125be565b6109778383612fa1565b612b958282611ad8565b612512576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612bcd3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000818152600183016020526040812054612c5857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610734565b506000610734565b60006001600160e01b03198216637965db0b60e01b148061073457506107348261323e565b60606000612c9483600261400f565b612c9f906002613e37565b67ffffffffffffffff811115612cb757612cb7613ad1565b6040519080825280601f01601f191660200182016040528015612ce1576020820181803683370190505b509050600360fc1b81600081518110612cfc57612cfc613df4565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612d2b57612d2b613df4565b60200101906001600160f81b031916908160001a9053506000612d4f84600261400f565b612d5a906001613e37565b90505b6001811115612dd2576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612d8e57612d8e613df4565b1a60f81b828281518110612da457612da4613df4565b60200101906001600160f81b031916908160001a90535060049490941c93612dcb81613e4f565b9050612d5d565b5083156114995760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610841565b612e2b8383613263565b612e386000848484613125565b6109775760405162461bcd60e51b81526004016108419061417c565b6001600160a01b03831615801590612e7457506001600160a01b03821615155b15612f96576000818152600d6020908152604080832054600e90925290912054601380549091908110612ea957612ea9613df4565b9060005260206000209060040201600301541415612f6c576000818152600e6020526040902054601380549091908110612ee557612ee5613df4565b906000526020600020906004020160020154600014612f6c5760405162461bcd60e51b815260206004820152603a60248201527f52414952204552433732313a205472616e736665727320666f7220746869732060448201527f72616e6765206172652063757272656e746c79206c6f636b65640000000000006064820152608401610841565b612f967f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce336125be565b6109778383836133b1565b612fab8282611ad8565b15612512576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600081815260018301602052604081205480156130f157600061302c600183613e20565b855490915060009061304090600190613e20565b90508181146130a557600086600001828154811061306057613060613df4565b906000526020600020015490508087600001848154811061308357613083613df4565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806130b6576130b66141e2565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610734565b6000915050610734565b600082600001828154811061311257613112613df4565b9060005260206000200154905092915050565b60006001600160a01b0384163b1561322757604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906131699033908990889088906004016141f8565b602060405180830381600087803b15801561318357600080fd5b505af19250505080156131b3575060408051601f3d908101601f191682019092526131b091810190614235565b60015b61320d573d8080156131e1576040519150601f19603f3d011682016040523d82523d6000602084013e6131e6565b606091505b5080516132055760405162461bcd60e51b81526004016108419061417c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061185a565b50600161185a565b6060600f805461074990613d76565b60006001600160e01b0319821663780e9d6360e01b1480610734575061073482613469565b6001600160a01b0382166132b95760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610841565b6000818152600260205260409020546001600160a01b03161561331e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610841565b61332a60008383612e54565b6001600160a01b0382166000908152600360205260408120805460019290613353908490613e37565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b03831661340c5761340781600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61342f565b816001600160a01b0316836001600160a01b03161461342f5761342f83826134b9565b6001600160a01b0382166134465761097781613556565b826001600160a01b0316826001600160a01b031614610977576109778282613605565b60006001600160e01b031982166380ac58cd60e01b148061349a57506001600160e01b03198216635b5e139f60e01b145b8061073457506301ffc9a760e01b6001600160e01b0319831614610734565b600060016134c684611862565b6134d09190613e20565b600083815260076020526040902054909150808214613523576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061356890600190613e20565b6000838152600960205260408120546008805493945090928490811061359057613590613df4565b9060005260206000200154905080600883815481106135b1576135b1613df4565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806135e9576135e96141e2565b6001900381819060005260206000200160009055905550505050565b600061361083611862565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b82805461365590613d76565b90600052602060002090601f01602090048101928261367757600085556136bd565b82601f106136905782800160ff198235161785556136bd565b828001600101855582156136bd579182015b828111156136bd5782358255916020019190600101906136a2565b506136c9929150613741565b5090565b8280546136d990613d76565b90600052602060002090601f0160209004810192826136fb57600085556136bd565b82601f1061371457805160ff19168380011785556136bd565b828001600101855582156136bd579182015b828111156136bd578251825591602001919060010190613726565b5b808211156136c95760008155600101613742565b6001600160e01b03198116811461376c57600080fd5b50565b60006020828403121561378157600080fd5b813561149981613756565b60006020828403121561379e57600080fd5b5035919050565b60005b838110156137c05781810151838201526020016137a8565b83811115611c605750506000910152565b600081518084526137e98160208601602086016137a5565b601f01601f19169290920160200192915050565b60208152600061149960208301846137d1565b80356001600160a01b038116811461382757600080fd5b919050565b6000806040838503121561383f57600080fd5b61384883613810565b946020939093013593505050565b60008060006060848603121561386b57600080fd5b61387484613810565b95602085013595506040909401359392505050565b6000806000806080858703121561389f57600080fd5b5050823594602084013594506040840135936060013592509050565b60008083601f8401126138cd57600080fd5b50813567ffffffffffffffff8111156138e557600080fd5b6020830191508360208285010111156111b957600080fd5b60008060006040848603121561391257600080fd5b83359250602084013567ffffffffffffffff81111561393057600080fd5b61393c868287016138bb565b9497909650939450505050565b60008060006060848603121561395e57600080fd5b61396784613810565b925061397560208501613810565b9150604084013590509250925092565b6000806040838503121561399857600080fd5b50508035926020909101359150565b600080604083850312156139ba57600080fd5b823591506139ca60208401613810565b90509250929050565b6000806000606084860312156139e857600080fd5b505081359360208301359350604090920135919050565b60008060208385031215613a1257600080fd5b823567ffffffffffffffff811115613a2957600080fd5b613a35858286016138bb565b90969095509350505050565b60008060008060808587031215613a5757600080fd5b613a6085613810565b966020860135965060408601359560600135945092505050565b600060208284031215613a8c57600080fd5b61149982613810565b60008060408385031215613aa857600080fd5b613ab183613810565b915060208301358015158114613ac657600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115613b0257613b02613ad1565b604051601f8501601f19908116603f01168101908282118183101715613b2a57613b2a613ad1565b81604052809350858152868686011115613b4357600080fd5b858560208301376000602087830101525050509392505050565b60008060008060808587031215613b7357600080fd5b613b7c85613810565b9350613b8a60208601613810565b925060408501359150606085013567ffffffffffffffff811115613bad57600080fd5b8501601f81018713613bbe57600080fd5b613bcd87823560208401613ae7565b91505092959194509250565b85815260006020868184015285604084015260a06060840152613bff60a08401866137d1565b838103608085015284518082528286019183019060005b81811015613c3257835183529284019291840191600101613c16565b50909a9950505050505050505050565b60008083601f840112613c5457600080fd5b50813567ffffffffffffffff811115613c6c57600080fd5b6020830191508360208260051b85010111156111b957600080fd5b60008060008060408587031215613c9d57600080fd5b843567ffffffffffffffff80821115613cb557600080fd5b613cc188838901613c42565b90965094506020870135915080821115613cda57600080fd5b50613ce787828801613c42565b95989497509550505050565b60008060408385031215613d0657600080fd5b823567ffffffffffffffff811115613d1d57600080fd5b8301601f81018513613d2e57600080fd5b613d3d85823560208401613ae7565b95602094909401359450505050565b60008060408385031215613d5f57600080fd5b613d6883613810565b91506139ca60208401613810565b600181811c90821680613d8a57607f821691505b60208210811415613dab57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526023908201527f52414952204552433732313a2050726f6475637420646f6573206e6f742065786040820152621a5cdd60ea1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015613e3257613e32613e0a565b500390565b60008219821115613e4a57613e4a613e0a565b500190565b600081613e5e57613e5e613e0a565b506000190190565b6000600019821415613e7a57613e7a613e0a565b5060010190565b8054600090600181811c9080831680613e9b57607f831692505b6020808410821415613ebd57634e487b7160e01b600052602260045260246000fd5b83885260208801828015613ed85760018114613ee957613f14565b60ff19871682528282019750613f14565b60008981526020902060005b87811015613f0e57815484820152908601908401613ef5565b83019850505b5050505050505092915050565b6020815260006114996020830184613e81565b86815285602082015284604082015283606082015260c060808201526000613f5f60c0830185613e81565b90508260a0830152979650505050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b838152604060208201526000613fb5604083018486613f72565b95945050505050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600081600019048311821515161561402957614029613e0a565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826140535761405361402e565b500490565b60208152600061185a602083018486613f72565b6000808335601e1984360301811261408357600080fd5b83018035915067ffffffffffffffff82111561409e57600080fd5b6020019150368190038213156111b957600080fd5b600083516140c58184602088016137a5565b8351908301906140d98183602088016137a5565b01949350505050565b6060815260006140f560608301866137d1565b60208301949094525060400152919050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161413f8160178501602088016137a5565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516141708160288401602088016137a5565b01602801949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000826141dd576141dd61402e565b500690565b634e487b7160e01b600052603160045260246000fd5b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061422b908301846137d1565b9695505050505050565b60006020828403121561424757600080fd5b81516114998161375656fe3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db6a2646970667358221220b8ff4dc21542b4541c182da6327da3caeb5d6ed54955611c722f0dde249e0f0064736f6c634300080900333c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db6f0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91be33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c147230a26469706673582212208883de127fc2986d0734fb50d8a33d7265ab882cc20c394d493178852360ce5d64736f6c634300080900336270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91be33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c147230",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Juan M. Sanchez M.",
    "details": "Uses AccessControl for the reception of ERC777 tokens!",
    "kind": "dev",
    "methods": {
      "add777Token(address,uint256)": {
        "params": {
          "_erc777Address": "Address of the new Token"
        }
      },
      "constructor": {
        "params": {
          "_pricePerToken": "Tokens required for the deployment",
          "_rairAddress": "Address of the primary ERC777 contract (RAIR contract)"
        }
      },
      "getContractCountOf(address)": {
        "details": "Use alongside ownerToContracts for the full list of tokens ",
        "params": {
          "deployer": "Wallet address to query"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "remove777Token(address)": {
        "params": {
          "_erc777Address": "Address of the Token"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "tokensReceived(address,address,address,uint256,bytes,bytes)": {
        "details": "This is our deployment mechanism for ERC721 contracts!",
        "params": {
          "amount": "The number of tokens sent",
          "from": "The owner of the tokens",
          "operator": "The ERC777 operator calling the send() function",
          "operatorData": "bytes sent from the operator",
          "to": "The recipient of the tokens",
          "userData": "bytes sent from the send call"
        }
      },
      "withdrawTokens(address,uint256)": {
        "details": "If the contract has less than the amount, the ERC777 contract will revertAccessControl makes sure only an OWNER can withdraw",
        "params": {
          "amount": "Amount of tokens to withdraw",
          "erc777": "Address of the ERC777 contract"
        }
      }
    },
    "title": "RAIR ERC721 Factory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "add777Token(address,uint256)": {
        "notice": "Adds an address to the list of allowed minters"
      },
      "constructor": {
        "notice": "Factory Constructor"
      },
      "getContractCountOf(address)": {
        "notice": "Returns the number of contracts deployed by an address"
      },
      "getCreatorsCount()": {
        "notice": "Returns the number of addresses that have deployed a contract"
      },
      "remove777Token(address)": {
        "notice": "Removes an address from the list of allowed minters"
      },
      "tokensReceived(address,address,address,uint256,bytes,bytes)": {
        "notice": "Function called by an ERC777 when they send tokens"
      },
      "withdrawTokens(address,uint256)": {
        "notice": "Transfers tokens from the factory to any of the OWNER addresses"
      }
    },
    "notice": "Handles the deployment of ERC721 RAIR Tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 325,
        "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4407_storage)"
      },
      {
        "astId": 6321,
        "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
        "label": "ownerToContracts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 6325,
        "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
        "label": "contractToOwner",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6329,
        "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
        "label": "deploymentCostForERC777",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6332,
        "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
        "label": "creators",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4407_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4407_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)4407_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4406,
            "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4106_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4106_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4101,
            "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4105,
            "contract": "contracts/RAIR-ERC721_Factory.sol:RAIR_Token_Factory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}