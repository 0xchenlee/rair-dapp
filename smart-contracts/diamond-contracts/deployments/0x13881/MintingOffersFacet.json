{
  "address": "0x2D1888f68Aa98F776B69D47b54BD7F6fd097fb71",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc721Address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "rangeName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeSplitsLength",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        }
      ],
      "name": "AddedMintingOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc721Address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "TokenMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc721Address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeSplitsLength",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "visible",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        }
      ],
      "name": "UpdatedMintingOffer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc721Address_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex_",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "percentage",
              "type": "uint256"
            }
          ],
          "internalType": "struct feeSplits[]",
          "name": "splits",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "visible_",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "nodeAddress_",
          "type": "address"
        }
      ],
      "name": "addMintingOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc721Address_",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "rangeIndexes",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "percentage",
              "type": "uint256"
            }
          ],
          "internalType": "struct feeSplits[][]",
          "name": "splits",
          "type": "tuple[][]"
        },
        {
          "internalType": "bool[]",
          "name": "visibility",
          "type": "bool[]"
        },
        {
          "internalType": "address",
          "name": "nodeAddress_",
          "type": "address"
        }
      ],
      "name": "addMintingOfferBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenIndex_",
          "type": "uint256"
        }
      ],
      "name": "buyMintingOffer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex_",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "name": "buyMintingOfferBatch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        }
      ],
      "name": "getOfferInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc721Address",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nodeAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rangeIndex",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "percentage",
                  "type": "uint256"
                }
              ],
              "internalType": "struct feeSplits[]",
              "name": "fees",
              "type": "tuple[]"
            },
            {
              "internalType": "bool",
              "name": "visible",
              "type": "bool"
            }
          ],
          "internalType": "struct mintingOffer",
          "name": "mintOffer",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rangeStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rangeEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensAllowed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintableTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rangePrice",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "rangeName",
              "type": "string"
            }
          ],
          "internalType": "struct IRAIR721.range",
          "name": "rangeData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc721Address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        }
      ],
      "name": "getOfferInfoForAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc721Address",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nodeAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rangeIndex",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "percentage",
                  "type": "uint256"
                }
              ],
              "internalType": "struct feeSplits[]",
              "name": "fees",
              "type": "tuple[]"
            },
            {
              "internalType": "bool",
              "name": "visible",
              "type": "bool"
            }
          ],
          "internalType": "struct mintingOffer",
          "name": "mintOffer",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rangeStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rangeEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensAllowed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintableTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rangePrice",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "rangeName",
              "type": "string"
            }
          ],
          "internalType": "struct IRAIR721.range",
          "name": "rangeData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc721Address",
          "type": "address"
        }
      ],
      "name": "getOffersCountForAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalOfferCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintingOfferId_",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "percentage",
              "type": "uint256"
            }
          ],
          "internalType": "struct feeSplits[]",
          "name": "splits_",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "visible_",
          "type": "bool"
        }
      ],
      "name": "updateMintingOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe1ce887be0fa82399b0ef456c4ba4d945869779f4af55157db0e21a5e311dc79",
  "receipt": {
    "to": null,
    "from": "0xEC30759D0A3F3CE0A730920DC29d74e441f492C3",
    "contractAddress": "0x2D1888f68Aa98F776B69D47b54BD7F6fd097fb71",
    "transactionIndex": 10,
    "gasUsed": "2624588",
    "logsBloom": "0x
    "blockHash": "0x2fc3cf779132395771c05ff934a85ba51d9f466ba9fedffc12a6b153bb8534c4",
    "transactionHash": "0xe1ce887be0fa82399b0ef456c4ba4d945869779f4af55157db0e21a5e311dc79",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 24560020,
        "transactionHash": "0xe1ce887be0fa82399b0ef456c4ba4d945869779f4af55157db0e21a5e311dc79",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ec30759d0a3f3ce0a730920dc29d74e441f492c3",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000012a61905978da000000000000000000000000000000000000000000000000027bfff9de8c7764a000000000000000000000000000000000000000000000622feb21c9c9633818c00000000000000000000000000000000000000000000000027ad5984e32fe8aa000000000000000000000000000000000000000000000622fec4c2b59bcb0f2c",
        "logIndex": 29,
        "blockHash": "0x2fc3cf779132395771c05ff934a85ba51d9f466ba9fedffc12a6b153bb8534c4"
      }
    ],
    "blockNumber": 24560020,
    "cumulativeGasUsed": "4115031",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "bf9d033ffd822e9cb4e88a18a0d93eae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"rangeName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeSplitsLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"}],\"name\":\"AddedMintingOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"TokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeSplitsLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"visible\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"}],\"name\":\"UpdatedMintingOffer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct feeSplits[]\",\"name\":\"splits\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"visible_\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"nodeAddress_\",\"type\":\"address\"}],\"name\":\"addMintingOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"rangeIndexes\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct feeSplits[][]\",\"name\":\"splits\",\"type\":\"tuple[][]\"},{\"internalType\":\"bool[]\",\"name\":\"visibility\",\"type\":\"bool[]\"},{\"internalType\":\"address\",\"name\":\"nodeAddress_\",\"type\":\"address\"}],\"name\":\"addMintingOfferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex_\",\"type\":\"uint256\"}],\"name\":\"buyMintingOffer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"buyMintingOfferBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"}],\"name\":\"getOfferInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct feeSplits[]\",\"name\":\"fees\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"visible\",\"type\":\"bool\"}],\"internalType\":\"struct mintingOffer\",\"name\":\"mintOffer\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rangeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAllowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"rangeName\",\"type\":\"string\"}],\"internalType\":\"struct IRAIR721.range\",\"name\":\"rangeData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"}],\"name\":\"getOfferInfoForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct feeSplits[]\",\"name\":\"fees\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"visible\",\"type\":\"bool\"}],\"internalType\":\"struct mintingOffer\",\"name\":\"mintOffer\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rangeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAllowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"rangeName\",\"type\":\"string\"}],\"internalType\":\"struct IRAIR721.range\",\"name\":\"rangeData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"}],\"name\":\"getOffersCountForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalOfferCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintingOfferId_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct feeSplits[]\",\"name\":\"splits_\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"visible_\",\"type\":\"bool\"}],\"name\":\"updateMintingOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Juan M. Sanchez M.\",\"kind\":\"dev\",\"methods\":{\"getOffersCountForAddress(address)\":{\"params\":{\"erc721Address\":\"Address of the ERC721 token\"}}},\"title\":\"RAIR Diamond - Minting offers facet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getOffersCountForAddress(address)\":{\"notice\":\"Returns the number of offers for a specific ERC721 address\"}},\"notice\":\"Facet in charge of the minting offers in the RAIR Marketplace\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Marketplace/Facets/MintingOffersFacet.sol\":\"MintingOffersFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/Marketplace/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.11; \\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct feeSplits {\\n\\taddress recipient;\\n\\tuint percentage;\\n}\\n\\nstruct mintingOffer {\\n\\taddress erc721Address;\\n\\taddress nodeAddress;\\n\\tuint rangeIndex;\\n\\tfeeSplits[] fees;\\n\\tbool visible;\\n}\\n\\nstruct RoleData {\\n\\tmapping(address => bool) members;\\n\\tbytes32 adminRole;\\n}\\n\\nstruct AppStorage {\\n\\t// Access Control Enumerable\\n\\tmapping(bytes32 => RoleData) _roles;\\n\\tmapping(bytes32 => EnumerableSet.AddressSet) _roleMembers;\\n\\t// App\\n\\tuint16 decimals;\\n\\tuint decimalPow;\\n\\tuint nodeFee;\\n\\tuint treasuryFee;\\n\\taddress treasuryAddress;\\n\\tmintingOffer[] mintingOffers;\\n\\tmapping(address => mapping(uint => uint)) addressToRangeOffer;\\n\\tmapping(address => uint[]) addressToOffers;\\n\\t// Always add new fields at the end of the struct, that way the structure can be upgraded\\n}\\n\\nlibrary LibAppStorage {\\n\\tfunction diamondStorage() internal pure\\treturns (AppStorage storage ds) {\\n\\t\\tassembly {\\n\\t\\t\\tds.slot := 0\\n\\t\\t}\\n\\t}\\n}\\n\\ncontract AccessControlAppStorageEnumerableMarket is Context {\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\n\\t\\n\\tAppStorage internal s;\\n\\n\\tevent RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\tevent RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    function renounceRole(bytes32 role, address account) public {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n        _revokeRole(role, account);\\n    }\\n\\n    function grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    function revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n\\tfunction hasRole(bytes32 role, address account) public view returns (bool) {\\n\\t\\treturn s._roles[role].members[account];\\n\\t}\\n\\n\\tfunction getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n\\t\\treturn s._roles[role].adminRole;\\n\\t}\\n\\n\\tfunction getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n\\t\\treturn s._roleMembers[role].at(index);\\n\\t}\\n\\n\\tfunction getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n\\t\\treturn s._roleMembers[role].length();\\n\\t}\\n\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n\\t\\tbytes32 previousAdminRole = getRoleAdmin(role);\\n\\t\\ts._roles[role].adminRole = adminRole;\\n\\t\\temit RoleAdminChanged(role, previousAdminRole, adminRole);\\n\\t}\\n\\n\\tfunction _grantRole(bytes32 role, address account) internal {\\n\\t\\tif (!hasRole(role, account)) {\\n\\t\\t\\ts._roles[role].members[account] = true;\\n\\t\\t\\temit RoleGranted(role, account, _msgSender());\\n\\t\\t\\ts._roleMembers[role].add(account);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _revokeRole(bytes32 role, address account) internal {\\n\\t\\tif (hasRole(role, account)) {\\n\\t\\t\\ts._roles[role].members[account] = false;\\n\\t\\t\\temit RoleRevoked(role, account, _msgSender());\\n\\t\\t\\ts._roleMembers[role].remove(account);\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0x4c20db9f1f539923c28e10189862ad872492d9843bf026642994470ce902d14b\",\"license\":\"GPL-3.0\"},\"contracts/Marketplace/Facets/MintingOffersFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.11; \\n\\nimport '@openzeppelin/contracts/access/IAccessControl.sol';\\nimport '../AppStorage.sol';\\n\\ninterface IRAIR721 {\\n\\tstruct range {\\n\\t\\tuint rangeStart;\\n\\t\\tuint rangeEnd;\\n\\t\\tuint tokensAllowed;\\n\\t\\tuint mintableTokens;\\n\\t\\tuint lockedTokens;\\n\\t\\tuint rangePrice;\\n\\t\\tstring rangeName;\\n\\t}\\n\\n\\tfunction rangeInfo(uint rangeId) external view returns(range memory data, uint productIndex);\\n\\tfunction mintFromRange(address to, uint rangeId, uint indexInRange) external;\\n}\\n\\n\\n/// @title  RAIR Diamond - Minting offers facet\\n/// @notice Facet in charge of the minting offers in the RAIR Marketplace\\n/// @author Juan M. Sanchez M.\\ncontract MintingOffersFacet is AccessControlAppStorageEnumerableMarket {\\n\\n\\tevent AddedMintingOffer(address erc721Address, uint rangeIndex, string rangeName, uint price, uint feeSplitsLength, uint offerIndex);\\n\\tevent UpdatedMintingOffer(address erc721Address, uint rangeIndex, uint feeSplitsLength, bool visible, uint offerIndex);\\n\\t\\n\\tevent TokenMinted(address erc721Address, uint rangeIndex, uint tokenIndex, address buyer);\\n\\n\\tmodifier checkCreatorRole(address erc721Address) {\\n\\t\\trequire(IAccessControl(erc721Address).hasRole(bytes32(keccak256(\\\"CREATOR\\\")), address(msg.sender)), \\\"Minter Marketplace: Sender isn't the creator of the contract!\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier checkMinterRole(address erc721Address) {\\n\\t\\trequire(hasMinterRole(erc721Address), \\\"Minter Marketplace: This Marketplace isn't a Minter!\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier mintingOfferExists(uint offerIndex_) {\\n\\t\\trequire(s.mintingOffers.length > offerIndex_, \\\"Minting Marketplace: Minting Offer doesn't exist\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier offerDoesntExist(address erc721Address, uint rangeIndex) {\\n\\t\\trequire(s.addressToRangeOffer[erc721Address][rangeIndex] == 0, \\\"Minter Marketplace: Range already has an offer\\\");\\n\\t\\tif (s.addressToRangeOffer[erc721Address][rangeIndex] == 0 && s.mintingOffers.length > 0) {\\n\\t\\t\\trequire(s.mintingOffers[0].erc721Address != erc721Address ||\\n\\t\\t\\t\\t\\t\\ts.mintingOffers[0].rangeIndex != rangeIndex,\\n\\t\\t\\t\\t\\t\\t\\t\\\"Minter Marketplace: Range already has an offer\\\");\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice Utility function to verify if the Marketplace has a MINTER role\\n\\t/// @param  erc721Address \\tAddress of the ERC721 token with AccessControl\\n\\tfunction hasMinterRole(address erc721Address) internal view returns (bool) {\\n\\t\\treturn IAccessControl(erc721Address).hasRole(bytes32(keccak256(\\\"MINTER\\\")), address(this));\\n\\t}\\n\\n\\t/// @notice Returns the number of offers for a specific ERC721 address\\n\\t/// @param  erc721Address \\tAddress of the ERC721 token\\n\\tfunction getOffersCountForAddress(address erc721Address) public view returns (uint) {\\n\\t\\treturn s.addressToOffers[erc721Address].length;\\n\\t}\\n\\n\\tfunction getTotalOfferCount() public view returns (uint) {\\n\\t\\treturn s.mintingOffers.length;\\n\\t}\\n\\n\\tfunction getOfferInfoForAddress(address erc721Address, uint rangeIndex) public view returns (uint offerIndex, mintingOffer memory mintOffer, IRAIR721.range memory rangeData, uint productIndex) {\\n\\t\\tmintingOffer memory selectedOffer = s.mintingOffers[s.addressToOffers[erc721Address][rangeIndex]];\\n\\t\\t(rangeData, productIndex) = IRAIR721(selectedOffer.erc721Address).rangeInfo(selectedOffer.rangeIndex);\\n\\t\\tofferIndex = s.addressToOffers[erc721Address][rangeIndex];\\n\\t\\tmintOffer = selectedOffer;\\n\\t}\\n\\n\\tfunction getOfferInfo(uint offerIndex) public view returns (mintingOffer memory mintOffer, IRAIR721.range memory rangeData, uint productIndex) {\\n\\t\\tmintingOffer memory selectedOffer = s.mintingOffers[offerIndex];\\n\\t\\tmintOffer = selectedOffer;\\n\\t\\t(rangeData, productIndex) = IRAIR721(selectedOffer.erc721Address).rangeInfo(selectedOffer.rangeIndex);\\n\\t}\\n\\n\\tfunction addMintingOffer(\\n\\t\\taddress erc721Address_,\\n\\t\\tuint rangeIndex_,\\n\\t\\tfeeSplits[] calldata splits,\\n\\t\\tbool visible_,\\n\\t\\taddress nodeAddress_\\n\\t) external {\\n\\t\\t_addMintingOffer(erc721Address_, rangeIndex_, splits, visible_, nodeAddress_);\\n\\t}\\n\\n\\tfunction addMintingOfferBatch(\\n\\t\\taddress erc721Address_,\\n\\t\\tuint[] calldata rangeIndexes,\\n\\t\\tfeeSplits[][] calldata splits,\\n\\t\\tbool[] calldata visibility,\\n\\t\\taddress nodeAddress_\\n\\t) external {\\n\\t\\trequire(rangeIndexes.length > 0, \\\"Minter Marketplace: No offers sent!\\\");\\n\\t\\trequire(rangeIndexes.length == visibility.length && splits.length == visibility.length, \\\"Minter Marketplace: Arrays should have the same length\\\");\\n\\t\\tfor (uint i = 0; i < rangeIndexes.length; i++) {\\n\\t\\t\\t_addMintingOffer(erc721Address_, rangeIndexes[i], splits[i], visibility[i], nodeAddress_);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _addMintingOffer(\\n\\t\\taddress erc721Address_,\\n\\t\\tuint rangeIndex_,\\n\\t\\tfeeSplits[] memory splits,\\n\\t\\tbool visible_,\\n\\t\\taddress nodeAddress_\\n\\t) internal checkCreatorRole(erc721Address_) checkMinterRole(erc721Address_) offerDoesntExist(erc721Address_, rangeIndex_) {\\n\\t\\tmintingOffer storage newOffer = s.mintingOffers.push();\\n\\t\\t(IRAIR721.range memory rangeData,) = IRAIR721(erc721Address_).rangeInfo(rangeIndex_);\\n\\t\\trequire(rangeData.mintableTokens > 0, \\\"Minter Marketplace: Offer doesn't have tokens available!\\\");\\n\\t\\tnewOffer.erc721Address = erc721Address_;\\n\\t\\tnewOffer.nodeAddress = nodeAddress_;\\n\\t\\tnewOffer.rangeIndex = rangeIndex_;\\n\\t\\tnewOffer.visible = visible_;\\n\\t\\tuint totalPercentage = s.nodeFee + s.treasuryFee;\\n\\t\\tfor (uint i = 0; i < splits.length; i++) {\\n\\t\\t\\ttotalPercentage += splits[i].percentage;\\n\\t\\t\\tnewOffer.fees.push(splits[i]);\\n\\t\\t}\\n\\t\\trequire(totalPercentage == (100 * s.decimalPow), \\\"Minter Marketplace: Fees don't add up to 100%\\\");\\n\\t\\ts.addressToOffers[erc721Address_].push(s.mintingOffers.length - 1);\\n\\t\\ts.addressToRangeOffer[erc721Address_][rangeIndex_] = s.mintingOffers.length - 1;\\n\\t\\temit AddedMintingOffer(erc721Address_, rangeIndex_, rangeData.rangeName, rangeData.rangePrice, splits.length, s.mintingOffers.length - 1);\\n\\t}\\n\\n\\tfunction updateMintingOffer (\\n\\t\\tuint mintingOfferId_,\\n\\t\\tfeeSplits[] memory splits_,\\n\\t\\tbool visible_\\n\\t) external mintingOfferExists(mintingOfferId_) {\\n\\t\\t_updateMintingOffer(mintingOfferId_, splits_, visible_);\\n\\t}\\n\\n\\tfunction _updateMintingOffer (\\n\\t\\tuint mintingOfferId_,\\n\\t\\tfeeSplits[] memory splits_,\\n\\t\\tbool visible_\\n\\t) internal {\\n\\t\\tmintingOffer storage selectedOffer = s.mintingOffers[mintingOfferId_];\\n\\t\\trequire(\\n\\t\\t\\tIAccessControl(selectedOffer.erc721Address).hasRole(bytes32(keccak256(\\\"CREATOR\\\")), address(msg.sender)),\\n\\t\\t\\t\\\"Minter Marketplace: Sender isn't the creator of the contract!\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\thasMinterRole(selectedOffer.erc721Address),\\n\\t\\t\\t\\\"Minter Marketplace: This Marketplace isn't a Minter!\\\"\\n\\t\\t);\\n\\t\\tuint totalPercentage = s.nodeFee + s.treasuryFee;\\n\\t\\tdelete selectedOffer.fees;\\n\\t\\tfor (uint i = 0; i < splits_.length; i++) {\\n\\t\\t\\ttotalPercentage += splits_[i].percentage;\\n\\t\\t\\tselectedOffer.fees.push(splits_[i]);\\n\\t\\t}\\n\\t\\trequire(totalPercentage == (100 * s.decimalPow), \\\"Minter Marketplace: Fees don't add up to 100%\\\");\\n\\t\\tselectedOffer.visible = visible_;\\n\\t\\temit UpdatedMintingOffer(\\n\\t\\t\\tselectedOffer.erc721Address,\\n\\t\\t\\tselectedOffer.rangeIndex,\\n\\t\\t\\tselectedOffer.fees.length,\\n\\t\\t\\tselectedOffer.visible,\\n\\t\\t\\tmintingOfferId_\\n\\t\\t);\\n\\t}\\n\\n\\tfunction buyMintingOffer(uint offerIndex_, uint tokenIndex_) public mintingOfferExists(offerIndex_) payable {\\n\\t\\tmintingOffer storage selectedOffer = s.mintingOffers[offerIndex_];\\n\\t\\trequire(selectedOffer.visible, \\\"Minter Marketplace: This offer is not ready to be sold!\\\");\\n\\t\\trequire(hasMinterRole(selectedOffer.erc721Address), \\\"Minter Marketplace: This Marketplace isn't a Minter!\\\");\\n\\t\\t(IRAIR721.range memory rangeData,) = IRAIR721(selectedOffer.erc721Address).rangeInfo(selectedOffer.rangeIndex);\\n\\t\\trequire(rangeData.rangePrice <= msg.value, \\\"Minter Marketplace: Insufficient funds!\\\");\\n\\t\\tif (msg.value - rangeData.rangePrice > 0) {\\n\\t\\t\\tpayable(msg.sender).transfer(msg.value - rangeData.rangePrice);\\n\\t\\t}\\n\\t\\tuint totalTransferred = rangeData.rangePrice * (s.nodeFee + s.treasuryFee) / (100 * s.decimalPow);\\n\\t\\tpayable(selectedOffer.nodeAddress).transfer(rangeData.rangePrice * s.nodeFee / (100 * s.decimalPow));\\n\\t\\tpayable(s.treasuryAddress).transfer(rangeData.rangePrice * s.treasuryFee / (100 * s.decimalPow));\\n\\t\\tuint auxMoneyToBeSent;\\n\\t\\tfor (uint i = 0; i < selectedOffer.fees.length; i++) {\\n\\t\\t\\tauxMoneyToBeSent = rangeData.rangePrice * selectedOffer.fees[i].percentage / (100 * s.decimalPow);\\n\\t\\t\\ttotalTransferred += auxMoneyToBeSent;\\n\\t\\t\\tpayable(selectedOffer.fees[i].recipient).transfer(auxMoneyToBeSent);\\n\\t\\t}\\n\\t\\trequire(totalTransferred == rangeData.rangePrice, \\\"Minter Marketplace: Error transferring funds!\\\");\\n\\t\\t_buyMintingOffer(selectedOffer.erc721Address, selectedOffer.rangeIndex, tokenIndex_, msg.sender);\\n\\t}\\n\\n\\tfunction buyMintingOfferBatch(\\n\\t\\tuint offerIndex_,\\n\\t\\tuint[] calldata tokenIndexes,\\n\\t\\taddress[] calldata recipients\\t\\t\\n\\t) external mintingOfferExists(offerIndex_) payable {\\n\\t\\trequire(tokenIndexes.length > 0, \\\"Minter Marketplace: No tokens sent!\\\");\\n\\t\\trequire(tokenIndexes.length == recipients.length, \\\"Minter Marketplace: Tokens and Addresses should have the same length\\\");\\n\\t\\tmintingOffer storage selectedOffer = s.mintingOffers[offerIndex_];\\n\\t\\trequire(selectedOffer.visible, \\\"Minter Marketplace: This offer is not ready to be sold!\\\");\\n\\t\\trequire(hasMinterRole(selectedOffer.erc721Address), \\\"Minter Marketplace: This Marketplace isn't a Minter!\\\");\\n\\t\\t(IRAIR721.range memory rangeData,) = IRAIR721(selectedOffer.erc721Address).rangeInfo(selectedOffer.rangeIndex);\\n\\t\\trequire((rangeData.rangePrice * tokenIndexes.length) <= msg.value, \\\"Minter Marketplace: Insufficient funds!\\\");\\n\\t\\tif (msg.value - (rangeData.rangePrice * tokenIndexes.length) > 0) {\\n\\t\\t\\tpayable(msg.sender).transfer(msg.value - (rangeData.rangePrice * tokenIndexes.length));\\n\\t\\t}\\n\\t\\tuint totalTransferred = (rangeData.rangePrice * tokenIndexes.length) * (s.nodeFee + s.treasuryFee) / (100 * s.decimalPow);\\n\\t\\tpayable(selectedOffer.nodeAddress).transfer((rangeData.rangePrice * tokenIndexes.length) * s.nodeFee / (100 * s.decimalPow));\\n\\t\\tpayable(s.treasuryAddress).transfer((rangeData.rangePrice * tokenIndexes.length) * s.treasuryFee / (100 * s.decimalPow));\\n\\t\\tuint auxMoneyToBeSent;\\n\\t\\tuint i;\\n\\t\\tfor (i = 0; i < selectedOffer.fees.length; i++) {\\n\\t\\t\\tauxMoneyToBeSent = (rangeData.rangePrice * tokenIndexes.length) * selectedOffer.fees[i].percentage / (100 * s.decimalPow);\\n\\t\\t\\ttotalTransferred += auxMoneyToBeSent;\\n\\t\\t\\tpayable(selectedOffer.fees[i].recipient).transfer(auxMoneyToBeSent);\\n\\t\\t}\\n\\t\\trequire(totalTransferred == (rangeData.rangePrice * tokenIndexes.length), \\\"Minter Marketplace: Error transferring funds!\\\");\\n\\t\\tfor (i = 0; i < tokenIndexes.length; i++) {\\n\\t\\t\\t_buyMintingOffer(selectedOffer.erc721Address, selectedOffer.rangeIndex, tokenIndexes[i], recipients[i]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _buyMintingOffer(address erc721Address, uint rangeIndex, uint tokenIndex, address recipient) internal {\\n\\t\\tIRAIR721(erc721Address).mintFromRange(recipient, rangeIndex, tokenIndex);\\n\\t\\temit TokenMinted(erc721Address, rangeIndex, tokenIndex, recipient);\\n\\t}\\n}\",\"keccak256\":\"0xf6e7748ddab17db16ba06d633bfbee61ce66c2fe0bb43dd80beec2edfdd58ae4\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612e86806100206000396000f3fe6080604052600436106100f35760003560e01c80638bcccedb1161008a578063ca15c87311610059578063ca15c873146102bf578063d0b922ed146102df578063d547741f146102ff578063df275c6a1461031f57600080fd5b80638bcccedb146102225780639010d07c1461023757806391d148541461026f5780639c3ac84b1461029f57600080fd5b806334dbcd4a116100c657806334dbcd4a146101ac57806336568abe146101bf57806382ec0663146101df5780638b0e2e13146101f257600080fd5b8063248a9ca3146100f85780632a1da9821461013b5780632a8512541461016a5780632f2ff15d1461018c575b600080fd5b34801561010457600080fd5b506101286101133660046121f7565b60009081526020819052604090206001015490565b6040519081526020015b60405180910390f35b34801561014757600080fd5b5061015b6101563660046121f7565b610355565b60405161013293929190612359565b34801561017657600080fd5b5061018a6101853660046123f7565b61051e565b005b34801561019857600080fd5b5061018a6101a73660046124b2565b6106dc565b61018a6101ba3660046124de565b610707565b3480156101cb57600080fd5b5061018a6101da3660046124b2565b610c60565b61018a6101ed366004612558565b610cde565b3480156101fe57600080fd5b5061021261020d36600461257a565b61109f565b60405161013294939291906125a4565b34801561022e57600080fd5b50600754610128565b34801561024357600080fd5b50610257610252366004612558565b6112d5565b6040516001600160a01b039091168152602001610132565b34801561027b57600080fd5b5061028f61028a3660046124b2565b6112f6565b6040519015158152602001610132565b3480156102ab57600080fd5b5061018a6102ba3660046125fa565b61131f565b3480156102cb57600080fd5b506101286102da3660046121f7565b611386565b3480156102eb57600080fd5b5061018a6102fa366004612771565b61139d565b34801561030b57600080fd5b5061018a61031a3660046124b2565b6113d1565b34801561032b57600080fd5b5061012861033a366004612840565b6001600160a01b031660009081526009602052604090205490565b6040805160a08101825260008082526020820181905291810182905260608082015260808101919091526103bf6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b600080600060070185815481106103d8576103d861285b565b600091825260208083206040805160a081018252600590940290910180546001600160a01b039081168552600182015416848401526002810154848301526003810180548351818602810186019094528084529495919460608701949192909184015b82821015610483576000848152602090819020604080518082019091526002850290910180546001600160a01b0316825260019081015482840152908352909201910161043b565b5050509082525060049182015460ff161515602090910152815160408084015190516364cc98df60e11b8152928301529195508592506001600160a01b039091169063c99931be90602401600060405180830381865afa1580156104eb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261051391908101906128d5565b949690955092505050565b8561057c5760405162461bcd60e51b815260206004820152602360248201527f4d696e746572204d61726b6574706c6163653a204e6f206f66666572732073656044820152626e742160e81b60648201526084015b60405180910390fd5b858214801561058a57508382145b6105f55760405162461bcd60e51b815260206004820152603660248201527f4d696e746572204d61726b6574706c6163653a204172726179732073686f756c6044820152750c840d0c2ecca40e8d0ca40e6c2daca40d8cadccee8d60531b6064820152608401610573565b60005b868110156106d1576106bf898989848181106106165761061661285b565b9050602002013588888581811061062f5761062f61285b565b90506020028101906106419190612988565b808060200260200160405190810160405280939291908181526020016000905b8282101561068d5761067e604083028601368190038101906129d2565b81526020019060010190610661565b50505050508787868181106106a4576106a461285b565b90506020020160208101906106b991906129ee565b866113f7565b806106c981612a21565b9150506105f8565b505050505050505050565b6000828152602081905260409020600101546106f8813361191b565b610702838361197f565b505050565b6007548590811061072a5760405162461bcd60e51b815260040161057390612a3c565b836107835760405162461bcd60e51b815260206004820152602360248201527f4d696e746572204d61726b6574706c6163653a204e6f20746f6b656e732073656044820152626e742160e81b6064820152608401610573565b8382146108065760405162461bcd60e51b8152602060048201526044602482018190527f4d696e746572204d61726b6574706c6163653a20546f6b656e7320616e642041908201527f64647265737365732073686f756c642068617665207468652073616d65206c656064820152630dccee8d60e31b608482015260a401610573565b600080600701878154811061081d5761081d61285b565b60009182526020909120600590910201600481015490915060ff166108545760405162461bcd60e51b815260040161057390612a8c565b8054610868906001600160a01b0316611a17565b6108845760405162461bcd60e51b815260040161057390612ae9565b805460028201546040516364cc98df60e11b815260048101919091526000916001600160a01b03169063c99931be90602401600060405180830381865afa1580156108d3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108fb91908101906128d5565b5060a08101519091503490610911908890612b3d565b111561092f5760405162461bcd60e51b815260040161057390612b5c565b60a0810151600090610942908890612b3d565b61094c9034612ba3565b111561099c5760a081015133906108fc90610968908990612b3d565b6109729034612ba3565b6040518115909202916000818181858888f1935050505015801561099a573d6000803e3d6000fd5b505b6003546000906109ad906064612b3d565b6005546004546109bd9190612bba565b60a08401516109cd908a90612b3d565b6109d79190612b3d565b6109e19190612bd2565b60018401546003549192506001600160a01b0316906108fc90610a05906064612b3d565b60045460a0860151610a18908c90612b3d565b610a229190612b3d565b610a2c9190612bd2565b6040518115909202916000818181858888f19350505050158015610a54573d6000803e3d6000fd5b506006546003546001600160a01b03909116906108fc90610a76906064612b3d565b60055460a0860151610a89908c90612b3d565b610a939190612b3d565b610a9d9190612bd2565b6040518115909202916000818181858888f19350505050158015610ac5573d6000803e3d6000fd5b506000805b6003850154811015610bad57600354610ae4906064612b3d565b856003018281548110610af957610af961285b565b9060005260206000209060020201600101548b8b90508660a00151610b1e9190612b3d565b610b289190612b3d565b610b329190612bd2565b9150610b3e8284612bba565b9250846003018181548110610b5557610b5561285b565b600091825260208220600290910201546040516001600160a01b039091169184156108fc02918591818181858888f19350505050158015610b9a573d6000803e3d6000fd5b5080610ba581612a21565b915050610aca565b60a0840151610bbd908a90612b3d565b8314610bdb5760405162461bcd60e51b815260040161057390612bf4565b5060005b88811015610c535784546002860154610c41916001600160a01b0316908c8c85818110610c0e57610c0e61285b565b905060200201358b8b86818110610c2757610c2761285b565b9050602002016020810190610c3c9190612840565b611aa8565b80610c4b81612a21565b915050610bdf565b5050505050505050505050565b6001600160a01b0381163314610cd05760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610573565b610cda8282611b69565b5050565b60075482908110610d015760405162461bcd60e51b815260040161057390612a3c565b6000806007018481548110610d1857610d1861285b565b60009182526020909120600590910201600481015490915060ff16610d4f5760405162461bcd60e51b815260040161057390612a8c565b8054610d63906001600160a01b0316611a17565b610d7f5760405162461bcd60e51b815260040161057390612ae9565b805460028201546040516364cc98df60e11b815260048101919091526000916001600160a01b03169063c99931be90602401600060405180830381865afa158015610dce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610df691908101906128d5565b509050348160a001511115610e1d5760405162461bcd60e51b815260040161057390612b5c565b60008160a0015134610e2f9190612ba3565b1115610e745760a081015133906108fc90610e4a9034612ba3565b6040518115909202916000818181858888f19350505050158015610e72573d6000803e3d6000fd5b505b600354600090610e85906064612b3d565b600554600454610e959190612bba565b8360a00151610ea49190612b3d565b610eae9190612bd2565b60018401546003549192506001600160a01b0316906108fc90610ed2906064612b3d565b60045460a0860151610ee49190612b3d565b610eee9190612bd2565b6040518115909202916000818181858888f19350505050158015610f16573d6000803e3d6000fd5b506006546003546001600160a01b03909116906108fc90610f38906064612b3d565b60055460a0860151610f4a9190612b3d565b610f549190612bd2565b6040518115909202916000818181858888f19350505050158015610f7c573d6000803e3d6000fd5b506000805b600385015481101561105657600354610f9b906064612b3d565b856003018281548110610fb057610fb061285b565b9060005260206000209060020201600101548560a00151610fd19190612b3d565b610fdb9190612bd2565b9150610fe78284612bba565b9250846003018181548110610ffe57610ffe61285b565b600091825260208220600290910201546040516001600160a01b039091169184156108fc02918591818181858888f19350505050158015611043573d6000803e3d6000fd5b508061104e81612a21565b915050610f81565b508260a00151821461107a5760405162461bcd60e51b815260040161057390612bf4565b83546002850154611096916001600160a01b0316908833611aa8565b50505050505050565b6040805160a081018252600080825260208201819052918101829052606080820152608081018290526111086040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b6001600160a01b038516600090815260096020526040812080548291600791889081106111375761113761285b565b9060005260206000200154815481106111525761115261285b565b600091825260208083206040805160a081018252600590940290910180546001600160a01b039081168552600182015416848401526002810154848301526003810180548351818602810186019094528084529495919460608701949192909184015b828210156111fd576000848152602090819020604080518082019091526002850290910180546001600160a01b031682526001908101548284015290835290920191016111b5565b5050509082525060049182015460ff161515602090910152815160408084015190516364cc98df60e11b8152928301529192506001600160a01b039091169063c99931be90602401600060405180830381865afa158015611262573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261128a91908101906128d5565b6001600160a01b0389166000908152600960205260409020805492955090935090879081106112bb576112bb61285b565b906000526020600020015494508093505092959194509250565b60008281526001602052604081206112ed9083611be2565b90505b92915050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61137e86868686808060200260200160405190810160405280939291908181526020016000905b8282101561137257611363604083028601368190038101906129d2565b81526020019060010190611346565b505050505085856113f7565b505050505050565b60008181526001602052604081206112f090611bee565b600754839081106113c05760405162461bcd60e51b815260040161057390612a3c565b6113cb848484611bf8565b50505050565b6000828152602081905260409020600101546113ed813361191b565b6107028383611b69565b604051632474521560e21b81527f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db6600482015233602482015285906001600160a01b038216906391d1485490604401602060405180830381865afa158015611463573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114879190612c41565b6114a35760405162461bcd60e51b815260040161057390612c5e565b856114ad81611a17565b6114c95760405162461bcd60e51b815260040161057390612ae9565b6001600160a01b0387166000908152600860209081526040808320898452909152902054879087901561150e5760405162461bcd60e51b815260040161057390612cbb565b6001600160a01b0382166000908152600860209081526040808320848452909152902054158015611540575060075415155b156115d157816001600160a01b031660006007016000815481106115665761156661285b565b60009182526020909120600590910201546001600160a01b03161415806115b557508060006007016000815481106115a0576115a061285b565b90600052602060002090600502016002015414155b6115d15760405162461bcd60e51b815260040161057390612cbb565b6007805460018101825560009182526040516364cc98df60e11b815260059091027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880191906001600160a01b038c169063c99931be90611639908d9060040190815260200190565b600060405180830381865afa158015611656573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261167e91908101906128d5565b50905060008160600151116116fb5760405162461bcd60e51b815260206004820152603860248201527f4d696e746572204d61726b6574706c6163653a204f6666657220646f65736e2760448201527f74206861766520746f6b656e7320617661696c61626c652100000000000000006064820152608401610573565b81546001600160a01b03808d166001600160a01b0319928316178455600184018054918a1691909216179055600282018a9055600480830180548a151560ff19909116179055600554905460009161175291612bba565b905060005b8a518110156117fc578a81815181106117725761177261285b565b602002602001015160200151826117899190612bba565b9150836003018b82815181106117a1576117a161285b565b602090810291909101810151825460018082018555600094855293839020825160029092020180546001600160a01b0319166001600160a01b03909216919091178155910151910155806117f481612a21565b915050611757565b5060035461180b906064612b3d565b81146118295760405162461bcd60e51b815260040161057390612d09565b6001600160a01b038c16600090815260096020526040902060075461185090600190612ba3565b8154600181810184556000938452602090932001556007546118729190612ba3565b600060080160008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d8152602001908152602001600020819055507f26d54df15e8a0d68fa0ae9702cf190da88a0e1d48b0ed4c6b1099610b292f5f78c8c8460c001518560a001518e5160016000600701805490506118f39190612ba3565b60405161190596959493929190612d56565b60405180910390a1505050505050505050505050565b61192582826112f6565b610cda5761193d816001600160a01b03166014611e77565b611948836020611e77565b604051602001611959929190612d9b565b60408051601f198184030181529082905262461bcd60e51b825261057391600401612e10565b61198982826112f6565b610cda576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556119bf3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460008281526001602052604090206107029082612013565b604051632474521560e21b81527ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc960048201523060248201526000906001600160a01b038316906391d1485490604401602060405180830381865afa158015611a84573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f09190612c41565b60405163e766224360e01b81526001600160a01b038281166004830152602482018590526044820184905285169063e766224390606401600060405180830381600087803b158015611af957600080fd5b505af1158015611b0d573d6000803e3d6000fd5b5050604080516001600160a01b038881168252602082018890528183018790528516606082015290517f6a1a369ef3c3eebe428c993f6eb79fb1438544741070bc7a4388c801fa08463d9350908190036080019150a150505050565b611b7382826112f6565b15610cda576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a460008281526001602052604090206107029082612028565b60006112ed838361203d565b60006112f0825490565b6000806007018481548110611c0f57611c0f61285b565b600091825260209091206005909102018054604051632474521560e21b81527f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db660048201523360248201529192506001600160a01b0316906391d1485490604401602060405180830381865afa158015611c8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb19190612c41565b611ccd5760405162461bcd60e51b815260040161057390612c5e565b8054611ce1906001600160a01b0316611a17565b611cfd5760405162461bcd60e51b815260040161057390612ae9565b600554600454600091611d0f91612bba565b9050611d1f6003830160006121a9565b60005b8451811015611dc757848181518110611d3d57611d3d61285b565b60200260200101516020015182611d549190612bba565b915082600301858281518110611d6c57611d6c61285b565b602090810291909101810151825460018082018555600094855293839020825160029092020180546001600160a01b0319166001600160a01b0390921691909117815591015191015580611dbf81612a21565b915050611d22565b50600354611dd6906064612b3d565b8114611df45760405162461bcd60e51b815260040161057390612d09565b60048201805460ff1916841515908117909155825460028401546003850154604080516001600160a01b03909416845260208401929092529082015260ff90911615156060820152608081018690527ff9aa099c7d91e9bd33886c159620aeba7e2d9bd460bf94282df788a0af93787f9060a00160405180910390a15050505050565b60606000611e86836002612b3d565b611e91906002612bba565b67ffffffffffffffff811115611ea957611ea96126aa565b6040519080825280601f01601f191660200182016040528015611ed3576020820181803683370190505b509050600360fc1b81600081518110611eee57611eee61285b565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f1d57611f1d61285b565b60200101906001600160f81b031916908160001a9053506000611f41846002612b3d565b611f4c906001612bba565b90505b6001811115611fc4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611f8057611f8061285b565b1a60f81b828281518110611f9657611f9661285b565b60200101906001600160f81b031916908160001a90535060049490941c93611fbd81612e23565b9050611f4f565b5083156112ed5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610573565b60006112ed836001600160a01b038416612067565b60006112ed836001600160a01b0384166120b6565b60008260000182815481106120545761205461285b565b9060005260206000200154905092915050565b60008181526001830160205260408120546120ae575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556112f0565b5060006112f0565b6000818152600183016020526040812054801561219f5760006120da600183612ba3565b85549091506000906120ee90600190612ba3565b905081811461215357600086600001828154811061210e5761210e61285b565b90600052602060002001549050808760000184815481106121315761213161285b565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061216457612164612e3a565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506112f0565b60009150506112f0565b50805460008255600202906000526020600020908101906121ca91906121cd565b50565b5b808211156121f35780546001600160a01b0319168155600060018201556002016121ce565b5090565b60006020828403121561220957600080fd5b5035919050565b600060a0830160018060a01b0380845116855260208181860151168187015260408086015181880152606086015160a0606089015284815180875260c08a0191508483019650600092505b808310156122865786518051871683528501518583015295840195600192909201919083019061225b565b506080880151955061229c60808a018715159052565b98975050505050505050565b60005b838110156122c35781810151838201526020016122ab565b838111156113cb5750506000910152565b600081518084526122ec8160208601602086016122a8565b601f01601f19169290920160200192915050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a0830152600060c082015160e060c085015261235160e08501826122d4565b949350505050565b60608152600061236c6060830186612210565b828103602084015261237e8186612300565b915050826040830152949350505050565b80356001600160a01b03811681146123a657600080fd5b919050565b60008083601f8401126123bd57600080fd5b50813567ffffffffffffffff8111156123d557600080fd5b6020830191508360208260051b85010111156123f057600080fd5b9250929050565b60008060008060008060008060a0898b03121561241357600080fd5b61241c8961238f565b9750602089013567ffffffffffffffff8082111561243957600080fd5b6124458c838d016123ab565b909950975060408b013591508082111561245e57600080fd5b61246a8c838d016123ab565b909750955060608b013591508082111561248357600080fd5b506124908b828c016123ab565b90945092506124a3905060808a0161238f565b90509295985092959890939650565b600080604083850312156124c557600080fd5b823591506124d56020840161238f565b90509250929050565b6000806000806000606086880312156124f657600080fd5b85359450602086013567ffffffffffffffff8082111561251557600080fd5b61252189838a016123ab565b9096509450604088013591508082111561253a57600080fd5b50612547888289016123ab565b969995985093965092949392505050565b6000806040838503121561256b57600080fd5b50508035926020909101359150565b6000806040838503121561258d57600080fd5b6125968361238f565b946020939093013593505050565b8481526080602082015260006125bd6080830186612210565b82810360408401526125cf8186612300565b91505082606083015295945050505050565b80151581146121ca57600080fd5b80356123a6816125e1565b60008060008060008060a0878903121561261357600080fd5b61261c8761238f565b955060208701359450604087013567ffffffffffffffff8082111561264057600080fd5b818901915089601f83011261265457600080fd5b81358181111561266357600080fd5b8a60208260061b850101111561267857600080fd5b602083019650809550505050612690606088016125ef565b915061269e6080880161238f565b90509295509295509295565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156126e3576126e36126aa565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612712576127126126aa565b604052919050565b60006040828403121561272c57600080fd5b6040516040810181811067ffffffffffffffff8211171561274f5761274f6126aa565b60405290508061275e8361238f565b8152602083013560208201525092915050565b60008060006060848603121561278657600080fd5b8335925060208085013567ffffffffffffffff808211156127a657600080fd5b818701915087601f8301126127ba57600080fd5b8135818111156127cc576127cc6126aa565b6127da848260051b016126e9565b818152848101925060069190911b8301840190898211156127fa57600080fd5b928401925b81841015612823576128118a8561271a565b835284830192506040840193506127ff565b8096505050505050612837604085016125ef565b90509250925092565b60006020828403121561285257600080fd5b6112ed8261238f565b634e487b7160e01b600052603260045260246000fd5b600082601f83011261288257600080fd5b815167ffffffffffffffff81111561289c5761289c6126aa565b6128af601f8201601f19166020016126e9565b8181528460208386010111156128c457600080fd5b6123518260208301602087016122a8565b600080604083850312156128e857600080fd5b825167ffffffffffffffff8082111561290057600080fd5b9084019060e0828703121561291457600080fd5b61291c6126c0565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c08301518281111561296457600080fd5b61297088828601612871565b60c08301525060209590950151949694955050505050565b6000808335601e1984360301811261299f57600080fd5b83018035915067ffffffffffffffff8211156129ba57600080fd5b6020019150600681901b36038213156123f057600080fd5b6000604082840312156129e457600080fd5b6112ed838361271a565b600060208284031215612a0057600080fd5b81356112ed816125e1565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612a3557612a35612a0b565b5060010190565b60208082526030908201527f4d696e74696e67204d61726b6574706c6163653a204d696e74696e67204f666660408201526f195c88191bd95cdb89dd08195e1a5cdd60821b606082015260800190565b60208082526037908201527f4d696e746572204d61726b6574706c6163653a2054686973206f66666572206960408201527f73206e6f7420726561647920746f20626520736f6c6421000000000000000000606082015260800190565b60208082526034908201527f4d696e746572204d61726b6574706c6163653a2054686973204d61726b6574706040820152736c6163652069736e27742061204d696e7465722160601b606082015260800190565b6000816000190483118215151615612b5757612b57612a0b565b500290565b60208082526027908201527f4d696e746572204d61726b6574706c6163653a20496e73756666696369656e746040820152662066756e64732160c81b606082015260800190565b600082821015612bb557612bb5612a0b565b500390565b60008219821115612bcd57612bcd612a0b565b500190565b600082612bef57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602d908201527f4d696e746572204d61726b6574706c6163653a204572726f72207472616e736660408201526c657272696e672066756e64732160981b606082015260800190565b600060208284031215612c5357600080fd5b81516112ed816125e1565b6020808252603d908201527f4d696e746572204d61726b6574706c6163653a2053656e6465722069736e277460408201527f207468652063726561746f72206f662074686520636f6e747261637421000000606082015260800190565b6020808252602e908201527f4d696e746572204d61726b6574706c6163653a2052616e676520616c7265616460408201526d3c903430b99030b71037b33332b960911b606082015260800190565b6020808252602d908201527f4d696e746572204d61726b6574706c6163653a204665657320646f6e2774206160408201526c646420757020746f203130302560981b606082015260800190565b60018060a01b038716815285602082015260c060408201526000612d7d60c08301876122d4565b606083019590955250608081019290925260a0909101529392505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612dd38160178501602088016122a8565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612e048160288401602088016122a8565b01602801949350505050565b6020815260006112ed60208301846122d4565b600081612e3257612e32612a0b565b506000190190565b634e487b7160e01b600052603160045260246000fdfea26469706673582212200e2a2bf1f6420dd2b8fb05bf6a4433282574302d9356aaad426ca57e567502ab64736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c80638bcccedb1161008a578063ca15c87311610059578063ca15c873146102bf578063d0b922ed146102df578063d547741f146102ff578063df275c6a1461031f57600080fd5b80638bcccedb146102225780639010d07c1461023757806391d148541461026f5780639c3ac84b1461029f57600080fd5b806334dbcd4a116100c657806334dbcd4a146101ac57806336568abe146101bf57806382ec0663146101df5780638b0e2e13146101f257600080fd5b8063248a9ca3146100f85780632a1da9821461013b5780632a8512541461016a5780632f2ff15d1461018c575b600080fd5b34801561010457600080fd5b506101286101133660046121f7565b60009081526020819052604090206001015490565b6040519081526020015b60405180910390f35b34801561014757600080fd5b5061015b6101563660046121f7565b610355565b60405161013293929190612359565b34801561017657600080fd5b5061018a6101853660046123f7565b61051e565b005b34801561019857600080fd5b5061018a6101a73660046124b2565b6106dc565b61018a6101ba3660046124de565b610707565b3480156101cb57600080fd5b5061018a6101da3660046124b2565b610c60565b61018a6101ed366004612558565b610cde565b3480156101fe57600080fd5b5061021261020d36600461257a565b61109f565b60405161013294939291906125a4565b34801561022e57600080fd5b50600754610128565b34801561024357600080fd5b50610257610252366004612558565b6112d5565b6040516001600160a01b039091168152602001610132565b34801561027b57600080fd5b5061028f61028a3660046124b2565b6112f6565b6040519015158152602001610132565b3480156102ab57600080fd5b5061018a6102ba3660046125fa565b61131f565b3480156102cb57600080fd5b506101286102da3660046121f7565b611386565b3480156102eb57600080fd5b5061018a6102fa366004612771565b61139d565b34801561030b57600080fd5b5061018a61031a3660046124b2565b6113d1565b34801561032b57600080fd5b5061012861033a366004612840565b6001600160a01b031660009081526009602052604090205490565b6040805160a08101825260008082526020820181905291810182905260608082015260808101919091526103bf6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b600080600060070185815481106103d8576103d861285b565b600091825260208083206040805160a081018252600590940290910180546001600160a01b039081168552600182015416848401526002810154848301526003810180548351818602810186019094528084529495919460608701949192909184015b82821015610483576000848152602090819020604080518082019091526002850290910180546001600160a01b0316825260019081015482840152908352909201910161043b565b5050509082525060049182015460ff161515602090910152815160408084015190516364cc98df60e11b8152928301529195508592506001600160a01b039091169063c99931be90602401600060405180830381865afa1580156104eb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261051391908101906128d5565b949690955092505050565b8561057c5760405162461bcd60e51b815260206004820152602360248201527f4d696e746572204d61726b6574706c6163653a204e6f206f66666572732073656044820152626e742160e81b60648201526084015b60405180910390fd5b858214801561058a57508382145b6105f55760405162461bcd60e51b815260206004820152603660248201527f4d696e746572204d61726b6574706c6163653a204172726179732073686f756c6044820152750c840d0c2ecca40e8d0ca40e6c2daca40d8cadccee8d60531b6064820152608401610573565b60005b868110156106d1576106bf898989848181106106165761061661285b565b9050602002013588888581811061062f5761062f61285b565b90506020028101906106419190612988565b808060200260200160405190810160405280939291908181526020016000905b8282101561068d5761067e604083028601368190038101906129d2565b81526020019060010190610661565b50505050508787868181106106a4576106a461285b565b90506020020160208101906106b991906129ee565b866113f7565b806106c981612a21565b9150506105f8565b505050505050505050565b6000828152602081905260409020600101546106f8813361191b565b610702838361197f565b505050565b6007548590811061072a5760405162461bcd60e51b815260040161057390612a3c565b836107835760405162461bcd60e51b815260206004820152602360248201527f4d696e746572204d61726b6574706c6163653a204e6f20746f6b656e732073656044820152626e742160e81b6064820152608401610573565b8382146108065760405162461bcd60e51b8152602060048201526044602482018190527f4d696e746572204d61726b6574706c6163653a20546f6b656e7320616e642041908201527f64647265737365732073686f756c642068617665207468652073616d65206c656064820152630dccee8d60e31b608482015260a401610573565b600080600701878154811061081d5761081d61285b565b60009182526020909120600590910201600481015490915060ff166108545760405162461bcd60e51b815260040161057390612a8c565b8054610868906001600160a01b0316611a17565b6108845760405162461bcd60e51b815260040161057390612ae9565b805460028201546040516364cc98df60e11b815260048101919091526000916001600160a01b03169063c99931be90602401600060405180830381865afa1580156108d3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108fb91908101906128d5565b5060a08101519091503490610911908890612b3d565b111561092f5760405162461bcd60e51b815260040161057390612b5c565b60a0810151600090610942908890612b3d565b61094c9034612ba3565b111561099c5760a081015133906108fc90610968908990612b3d565b6109729034612ba3565b6040518115909202916000818181858888f1935050505015801561099a573d6000803e3d6000fd5b505b6003546000906109ad906064612b3d565b6005546004546109bd9190612bba565b60a08401516109cd908a90612b3d565b6109d79190612b3d565b6109e19190612bd2565b60018401546003549192506001600160a01b0316906108fc90610a05906064612b3d565b60045460a0860151610a18908c90612b3d565b610a229190612b3d565b610a2c9190612bd2565b6040518115909202916000818181858888f19350505050158015610a54573d6000803e3d6000fd5b506006546003546001600160a01b03909116906108fc90610a76906064612b3d565b60055460a0860151610a89908c90612b3d565b610a939190612b3d565b610a9d9190612bd2565b6040518115909202916000818181858888f19350505050158015610ac5573d6000803e3d6000fd5b506000805b6003850154811015610bad57600354610ae4906064612b3d565b856003018281548110610af957610af961285b565b9060005260206000209060020201600101548b8b90508660a00151610b1e9190612b3d565b610b289190612b3d565b610b329190612bd2565b9150610b3e8284612bba565b9250846003018181548110610b5557610b5561285b565b600091825260208220600290910201546040516001600160a01b039091169184156108fc02918591818181858888f19350505050158015610b9a573d6000803e3d6000fd5b5080610ba581612a21565b915050610aca565b60a0840151610bbd908a90612b3d565b8314610bdb5760405162461bcd60e51b815260040161057390612bf4565b5060005b88811015610c535784546002860154610c41916001600160a01b0316908c8c85818110610c0e57610c0e61285b565b905060200201358b8b86818110610c2757610c2761285b565b9050602002016020810190610c3c9190612840565b611aa8565b80610c4b81612a21565b915050610bdf565b5050505050505050505050565b6001600160a01b0381163314610cd05760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610573565b610cda8282611b69565b5050565b60075482908110610d015760405162461bcd60e51b815260040161057390612a3c565b6000806007018481548110610d1857610d1861285b565b60009182526020909120600590910201600481015490915060ff16610d4f5760405162461bcd60e51b815260040161057390612a8c565b8054610d63906001600160a01b0316611a17565b610d7f5760405162461bcd60e51b815260040161057390612ae9565b805460028201546040516364cc98df60e11b815260048101919091526000916001600160a01b03169063c99931be90602401600060405180830381865afa158015610dce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610df691908101906128d5565b509050348160a001511115610e1d5760405162461bcd60e51b815260040161057390612b5c565b60008160a0015134610e2f9190612ba3565b1115610e745760a081015133906108fc90610e4a9034612ba3565b6040518115909202916000818181858888f19350505050158015610e72573d6000803e3d6000fd5b505b600354600090610e85906064612b3d565b600554600454610e959190612bba565b8360a00151610ea49190612b3d565b610eae9190612bd2565b60018401546003549192506001600160a01b0316906108fc90610ed2906064612b3d565b60045460a0860151610ee49190612b3d565b610eee9190612bd2565b6040518115909202916000818181858888f19350505050158015610f16573d6000803e3d6000fd5b506006546003546001600160a01b03909116906108fc90610f38906064612b3d565b60055460a0860151610f4a9190612b3d565b610f549190612bd2565b6040518115909202916000818181858888f19350505050158015610f7c573d6000803e3d6000fd5b506000805b600385015481101561105657600354610f9b906064612b3d565b856003018281548110610fb057610fb061285b565b9060005260206000209060020201600101548560a00151610fd19190612b3d565b610fdb9190612bd2565b9150610fe78284612bba565b9250846003018181548110610ffe57610ffe61285b565b600091825260208220600290910201546040516001600160a01b039091169184156108fc02918591818181858888f19350505050158015611043573d6000803e3d6000fd5b508061104e81612a21565b915050610f81565b508260a00151821461107a5760405162461bcd60e51b815260040161057390612bf4565b83546002850154611096916001600160a01b0316908833611aa8565b50505050505050565b6040805160a081018252600080825260208201819052918101829052606080820152608081018290526111086040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b6001600160a01b038516600090815260096020526040812080548291600791889081106111375761113761285b565b9060005260206000200154815481106111525761115261285b565b600091825260208083206040805160a081018252600590940290910180546001600160a01b039081168552600182015416848401526002810154848301526003810180548351818602810186019094528084529495919460608701949192909184015b828210156111fd576000848152602090819020604080518082019091526002850290910180546001600160a01b031682526001908101548284015290835290920191016111b5565b5050509082525060049182015460ff161515602090910152815160408084015190516364cc98df60e11b8152928301529192506001600160a01b039091169063c99931be90602401600060405180830381865afa158015611262573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261128a91908101906128d5565b6001600160a01b0389166000908152600960205260409020805492955090935090879081106112bb576112bb61285b565b906000526020600020015494508093505092959194509250565b60008281526001602052604081206112ed9083611be2565b90505b92915050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61137e86868686808060200260200160405190810160405280939291908181526020016000905b8282101561137257611363604083028601368190038101906129d2565b81526020019060010190611346565b505050505085856113f7565b505050505050565b60008181526001602052604081206112f090611bee565b600754839081106113c05760405162461bcd60e51b815260040161057390612a3c565b6113cb848484611bf8565b50505050565b6000828152602081905260409020600101546113ed813361191b565b6107028383611b69565b604051632474521560e21b81527f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db6600482015233602482015285906001600160a01b038216906391d1485490604401602060405180830381865afa158015611463573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114879190612c41565b6114a35760405162461bcd60e51b815260040161057390612c5e565b856114ad81611a17565b6114c95760405162461bcd60e51b815260040161057390612ae9565b6001600160a01b0387166000908152600860209081526040808320898452909152902054879087901561150e5760405162461bcd60e51b815260040161057390612cbb565b6001600160a01b0382166000908152600860209081526040808320848452909152902054158015611540575060075415155b156115d157816001600160a01b031660006007016000815481106115665761156661285b565b60009182526020909120600590910201546001600160a01b03161415806115b557508060006007016000815481106115a0576115a061285b565b90600052602060002090600502016002015414155b6115d15760405162461bcd60e51b815260040161057390612cbb565b6007805460018101825560009182526040516364cc98df60e11b815260059091027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880191906001600160a01b038c169063c99931be90611639908d9060040190815260200190565b600060405180830381865afa158015611656573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261167e91908101906128d5565b50905060008160600151116116fb5760405162461bcd60e51b815260206004820152603860248201527f4d696e746572204d61726b6574706c6163653a204f6666657220646f65736e2760448201527f74206861766520746f6b656e7320617661696c61626c652100000000000000006064820152608401610573565b81546001600160a01b03808d166001600160a01b0319928316178455600184018054918a1691909216179055600282018a9055600480830180548a151560ff19909116179055600554905460009161175291612bba565b905060005b8a518110156117fc578a81815181106117725761177261285b565b602002602001015160200151826117899190612bba565b9150836003018b82815181106117a1576117a161285b565b602090810291909101810151825460018082018555600094855293839020825160029092020180546001600160a01b0319166001600160a01b03909216919091178155910151910155806117f481612a21565b915050611757565b5060035461180b906064612b3d565b81146118295760405162461bcd60e51b815260040161057390612d09565b6001600160a01b038c16600090815260096020526040902060075461185090600190612ba3565b8154600181810184556000938452602090932001556007546118729190612ba3565b600060080160008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d8152602001908152602001600020819055507f26d54df15e8a0d68fa0ae9702cf190da88a0e1d48b0ed4c6b1099610b292f5f78c8c8460c001518560a001518e5160016000600701805490506118f39190612ba3565b60405161190596959493929190612d56565b60405180910390a1505050505050505050505050565b61192582826112f6565b610cda5761193d816001600160a01b03166014611e77565b611948836020611e77565b604051602001611959929190612d9b565b60408051601f198184030181529082905262461bcd60e51b825261057391600401612e10565b61198982826112f6565b610cda576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556119bf3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460008281526001602052604090206107029082612013565b604051632474521560e21b81527ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc960048201523060248201526000906001600160a01b038316906391d1485490604401602060405180830381865afa158015611a84573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f09190612c41565b60405163e766224360e01b81526001600160a01b038281166004830152602482018590526044820184905285169063e766224390606401600060405180830381600087803b158015611af957600080fd5b505af1158015611b0d573d6000803e3d6000fd5b5050604080516001600160a01b038881168252602082018890528183018790528516606082015290517f6a1a369ef3c3eebe428c993f6eb79fb1438544741070bc7a4388c801fa08463d9350908190036080019150a150505050565b611b7382826112f6565b15610cda576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a460008281526001602052604090206107029082612028565b60006112ed838361203d565b60006112f0825490565b6000806007018481548110611c0f57611c0f61285b565b600091825260209091206005909102018054604051632474521560e21b81527f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db660048201523360248201529192506001600160a01b0316906391d1485490604401602060405180830381865afa158015611c8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb19190612c41565b611ccd5760405162461bcd60e51b815260040161057390612c5e565b8054611ce1906001600160a01b0316611a17565b611cfd5760405162461bcd60e51b815260040161057390612ae9565b600554600454600091611d0f91612bba565b9050611d1f6003830160006121a9565b60005b8451811015611dc757848181518110611d3d57611d3d61285b565b60200260200101516020015182611d549190612bba565b915082600301858281518110611d6c57611d6c61285b565b602090810291909101810151825460018082018555600094855293839020825160029092020180546001600160a01b0319166001600160a01b0390921691909117815591015191015580611dbf81612a21565b915050611d22565b50600354611dd6906064612b3d565b8114611df45760405162461bcd60e51b815260040161057390612d09565b60048201805460ff1916841515908117909155825460028401546003850154604080516001600160a01b03909416845260208401929092529082015260ff90911615156060820152608081018690527ff9aa099c7d91e9bd33886c159620aeba7e2d9bd460bf94282df788a0af93787f9060a00160405180910390a15050505050565b60606000611e86836002612b3d565b611e91906002612bba565b67ffffffffffffffff811115611ea957611ea96126aa565b6040519080825280601f01601f191660200182016040528015611ed3576020820181803683370190505b509050600360fc1b81600081518110611eee57611eee61285b565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f1d57611f1d61285b565b60200101906001600160f81b031916908160001a9053506000611f41846002612b3d565b611f4c906001612bba565b90505b6001811115611fc4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611f8057611f8061285b565b1a60f81b828281518110611f9657611f9661285b565b60200101906001600160f81b031916908160001a90535060049490941c93611fbd81612e23565b9050611f4f565b5083156112ed5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610573565b60006112ed836001600160a01b038416612067565b60006112ed836001600160a01b0384166120b6565b60008260000182815481106120545761205461285b565b9060005260206000200154905092915050565b60008181526001830160205260408120546120ae575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556112f0565b5060006112f0565b6000818152600183016020526040812054801561219f5760006120da600183612ba3565b85549091506000906120ee90600190612ba3565b905081811461215357600086600001828154811061210e5761210e61285b565b90600052602060002001549050808760000184815481106121315761213161285b565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061216457612164612e3a565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506112f0565b60009150506112f0565b50805460008255600202906000526020600020908101906121ca91906121cd565b50565b5b808211156121f35780546001600160a01b0319168155600060018201556002016121ce565b5090565b60006020828403121561220957600080fd5b5035919050565b600060a0830160018060a01b0380845116855260208181860151168187015260408086015181880152606086015160a0606089015284815180875260c08a0191508483019650600092505b808310156122865786518051871683528501518583015295840195600192909201919083019061225b565b506080880151955061229c60808a018715159052565b98975050505050505050565b60005b838110156122c35781810151838201526020016122ab565b838111156113cb5750506000910152565b600081518084526122ec8160208601602086016122a8565b601f01601f19169290920160200192915050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a0830152600060c082015160e060c085015261235160e08501826122d4565b949350505050565b60608152600061236c6060830186612210565b828103602084015261237e8186612300565b915050826040830152949350505050565b80356001600160a01b03811681146123a657600080fd5b919050565b60008083601f8401126123bd57600080fd5b50813567ffffffffffffffff8111156123d557600080fd5b6020830191508360208260051b85010111156123f057600080fd5b9250929050565b60008060008060008060008060a0898b03121561241357600080fd5b61241c8961238f565b9750602089013567ffffffffffffffff8082111561243957600080fd5b6124458c838d016123ab565b909950975060408b013591508082111561245e57600080fd5b61246a8c838d016123ab565b909750955060608b013591508082111561248357600080fd5b506124908b828c016123ab565b90945092506124a3905060808a0161238f565b90509295985092959890939650565b600080604083850312156124c557600080fd5b823591506124d56020840161238f565b90509250929050565b6000806000806000606086880312156124f657600080fd5b85359450602086013567ffffffffffffffff8082111561251557600080fd5b61252189838a016123ab565b9096509450604088013591508082111561253a57600080fd5b50612547888289016123ab565b969995985093965092949392505050565b6000806040838503121561256b57600080fd5b50508035926020909101359150565b6000806040838503121561258d57600080fd5b6125968361238f565b946020939093013593505050565b8481526080602082015260006125bd6080830186612210565b82810360408401526125cf8186612300565b91505082606083015295945050505050565b80151581146121ca57600080fd5b80356123a6816125e1565b60008060008060008060a0878903121561261357600080fd5b61261c8761238f565b955060208701359450604087013567ffffffffffffffff8082111561264057600080fd5b818901915089601f83011261265457600080fd5b81358181111561266357600080fd5b8a60208260061b850101111561267857600080fd5b602083019650809550505050612690606088016125ef565b915061269e6080880161238f565b90509295509295509295565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156126e3576126e36126aa565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612712576127126126aa565b604052919050565b60006040828403121561272c57600080fd5b6040516040810181811067ffffffffffffffff8211171561274f5761274f6126aa565b60405290508061275e8361238f565b8152602083013560208201525092915050565b60008060006060848603121561278657600080fd5b8335925060208085013567ffffffffffffffff808211156127a657600080fd5b818701915087601f8301126127ba57600080fd5b8135818111156127cc576127cc6126aa565b6127da848260051b016126e9565b818152848101925060069190911b8301840190898211156127fa57600080fd5b928401925b81841015612823576128118a8561271a565b835284830192506040840193506127ff565b8096505050505050612837604085016125ef565b90509250925092565b60006020828403121561285257600080fd5b6112ed8261238f565b634e487b7160e01b600052603260045260246000fd5b600082601f83011261288257600080fd5b815167ffffffffffffffff81111561289c5761289c6126aa565b6128af601f8201601f19166020016126e9565b8181528460208386010111156128c457600080fd5b6123518260208301602087016122a8565b600080604083850312156128e857600080fd5b825167ffffffffffffffff8082111561290057600080fd5b9084019060e0828703121561291457600080fd5b61291c6126c0565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c08301518281111561296457600080fd5b61297088828601612871565b60c08301525060209590950151949694955050505050565b6000808335601e1984360301811261299f57600080fd5b83018035915067ffffffffffffffff8211156129ba57600080fd5b6020019150600681901b36038213156123f057600080fd5b6000604082840312156129e457600080fd5b6112ed838361271a565b600060208284031215612a0057600080fd5b81356112ed816125e1565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612a3557612a35612a0b565b5060010190565b60208082526030908201527f4d696e74696e67204d61726b6574706c6163653a204d696e74696e67204f666660408201526f195c88191bd95cdb89dd08195e1a5cdd60821b606082015260800190565b60208082526037908201527f4d696e746572204d61726b6574706c6163653a2054686973206f66666572206960408201527f73206e6f7420726561647920746f20626520736f6c6421000000000000000000606082015260800190565b60208082526034908201527f4d696e746572204d61726b6574706c6163653a2054686973204d61726b6574706040820152736c6163652069736e27742061204d696e7465722160601b606082015260800190565b6000816000190483118215151615612b5757612b57612a0b565b500290565b60208082526027908201527f4d696e746572204d61726b6574706c6163653a20496e73756666696369656e746040820152662066756e64732160c81b606082015260800190565b600082821015612bb557612bb5612a0b565b500390565b60008219821115612bcd57612bcd612a0b565b500190565b600082612bef57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602d908201527f4d696e746572204d61726b6574706c6163653a204572726f72207472616e736660408201526c657272696e672066756e64732160981b606082015260800190565b600060208284031215612c5357600080fd5b81516112ed816125e1565b6020808252603d908201527f4d696e746572204d61726b6574706c6163653a2053656e6465722069736e277460408201527f207468652063726561746f72206f662074686520636f6e747261637421000000606082015260800190565b6020808252602e908201527f4d696e746572204d61726b6574706c6163653a2052616e676520616c7265616460408201526d3c903430b99030b71037b33332b960911b606082015260800190565b6020808252602d908201527f4d696e746572204d61726b6574706c6163653a204665657320646f6e2774206160408201526c646420757020746f203130302560981b606082015260800190565b60018060a01b038716815285602082015260c060408201526000612d7d60c08301876122d4565b606083019590955250608081019290925260a0909101529392505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612dd38160178501602088016122a8565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612e048160288401602088016122a8565b01602801949350505050565b6020815260006112ed60208301846122d4565b600081612e3257612e32612a0b565b506000190190565b634e487b7160e01b600052603160045260246000fdfea26469706673582212200e2a2bf1f6420dd2b8fb05bf6a4433282574302d9356aaad426ca57e567502ab64736f6c634300080b0033",
  "devdoc": {
    "author": "Juan M. Sanchez M.",
    "kind": "dev",
    "methods": {
      "getOffersCountForAddress(address)": {
        "params": {
          "erc721Address": "Address of the ERC721 token"
        }
      }
    },
    "title": "RAIR Diamond - Minting offers facet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getOffersCountForAddress(address)": {
        "notice": "Returns the number of offers for a specific ERC721 address"
      }
    },
    "notice": "Facet in charge of the minting offers in the RAIR Marketplace",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3761,
        "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)3743_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(feeSplits)3687_storage)dyn_storage": {
        "base": "t_struct(feeSplits)3687_storage",
        "encoding": "dynamic_array",
        "label": "struct feeSplits[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(mintingOffer)3700_storage)dyn_storage": {
        "base": "t_struct(mintingOffer)3700_storage",
        "encoding": "dynamic_array",
        "label": "struct mintingOffer[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2638_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2638_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)3707_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)3707_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2638_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2637,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2337_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AppStorage)3743_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 3712,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "_roles",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)3707_storage)"
          },
          {
            "astId": 3717,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "_roleMembers",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2638_storage)"
          },
          {
            "astId": 3719,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "decimals",
            "offset": 0,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 3721,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "decimalPow",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3723,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "nodeFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3725,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "treasuryFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3727,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 3731,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "mintingOffers",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(mintingOffer)3700_storage)dyn_storage"
          },
          {
            "astId": 3737,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "addressToRangeOffer",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 3742,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "addressToOffers",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(RoleData)3707_storage": {
        "encoding": "inplace",
        "label": "struct RoleData",
        "members": [
          {
            "astId": 3704,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 3706,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2337_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2332,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2336,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(feeSplits)3687_storage": {
        "encoding": "inplace",
        "label": "struct feeSplits",
        "members": [
          {
            "astId": 3684,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3686,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "percentage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(mintingOffer)3700_storage": {
        "encoding": "inplace",
        "label": "struct mintingOffer",
        "members": [
          {
            "astId": 3689,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "erc721Address",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3691,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "nodeAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3693,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "rangeIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3697,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "fees",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_struct(feeSplits)3687_storage)dyn_storage"
          },
          {
            "astId": 3699,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "visible",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}